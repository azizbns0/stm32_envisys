
projectstm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a61c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  0800a7b0  0800a7b0  0001a7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d0  0800b9d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9d0  0800b9d0  0001b9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9d8  0800b9d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9d8  0800b9d8  0001b9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000006c8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ac  200008ac  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffb1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002643  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00032808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f98  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002298f  00000000  00000000  00034840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e80  00000000  00000000  000571cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde71  00000000  00000000  0006904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136ec0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b2c  00000000  00000000  00136f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a794 	.word	0x0800a794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a794 	.word	0x0800a794

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <read_calliberation_data>:

#define atmPress 101325 //Pa



void read_calliberation_data(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af02      	add	r7, sp, #8
    uint16_t Callib_Start = 0xAA;
 8000f92:	23aa      	movs	r3, #170	; 0xaa
 8000f94:	80fb      	strh	r3, [r7, #6]
    dma_read_complete = 0; // Reset flag
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <read_calliberation_data+0x130>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read_DMA(BMP180_I2C, BMP180_ADDRESS, Callib_Start, I2C_MEMADD_SIZE_8BIT, dma_rx_buffer, 22);
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	2316      	movs	r3, #22
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <read_calliberation_data+0x134>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	21ee      	movs	r1, #238	; 0xee
 8000faa:	4846      	ldr	r0, [pc, #280]	; (80010c4 <read_calliberation_data+0x138>)
 8000fac:	f003 f858 	bl	8004060 <HAL_I2C_Mem_Read_DMA>
    while (!dma_read_complete); // Wait for DMA completion
 8000fb0:	bf00      	nop
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <read_calliberation_data+0x130>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0fa      	beq.n	8000fb2 <read_calliberation_data+0x26>
    AC1 = ((dma_rx_buffer[0] << 8) | dma_rx_buffer[1]);
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <read_calliberation_data+0x134>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <read_calliberation_data+0x134>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <read_calliberation_data+0x13c>)
 8000fd0:	801a      	strh	r2, [r3, #0]
    AC2 = ((dma_rx_buffer[2] << 8) | dma_rx_buffer[3]);
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <read_calliberation_data+0x134>)
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <read_calliberation_data+0x134>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <read_calliberation_data+0x140>)
 8000fe6:	801a      	strh	r2, [r3, #0]
    AC3 = ((dma_rx_buffer[4] << 8) | dma_rx_buffer[5]);
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <read_calliberation_data+0x134>)
 8000fea:	791b      	ldrb	r3, [r3, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <read_calliberation_data+0x134>)
 8000ff2:	795b      	ldrb	r3, [r3, #5]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <read_calliberation_data+0x144>)
 8000ffc:	801a      	strh	r2, [r3, #0]
    AC4 = ((dma_rx_buffer[6] << 8) | dma_rx_buffer[7]);
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <read_calliberation_data+0x134>)
 8001000:	799b      	ldrb	r3, [r3, #6]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <read_calliberation_data+0x134>)
 8001008:	79db      	ldrb	r3, [r3, #7]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <read_calliberation_data+0x148>)
 8001014:	801a      	strh	r2, [r3, #0]
    AC5 = ((dma_rx_buffer[8] << 8) | dma_rx_buffer[9]);
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <read_calliberation_data+0x134>)
 8001018:	7a1b      	ldrb	r3, [r3, #8]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <read_calliberation_data+0x134>)
 8001020:	7a5b      	ldrb	r3, [r3, #9]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <read_calliberation_data+0x14c>)
 800102c:	801a      	strh	r2, [r3, #0]
    AC6 = ((dma_rx_buffer[10] << 8) | dma_rx_buffer[11]);
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <read_calliberation_data+0x134>)
 8001030:	7a9b      	ldrb	r3, [r3, #10]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <read_calliberation_data+0x134>)
 8001038:	7adb      	ldrb	r3, [r3, #11]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21b      	sxth	r3, r3
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <read_calliberation_data+0x150>)
 8001044:	801a      	strh	r2, [r3, #0]
    B1 = ((dma_rx_buffer[12] << 8) | dma_rx_buffer[13]);
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <read_calliberation_data+0x134>)
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <read_calliberation_data+0x134>)
 8001050:	7b5b      	ldrb	r3, [r3, #13]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <read_calliberation_data+0x154>)
 800105a:	801a      	strh	r2, [r3, #0]
    B2 = ((dma_rx_buffer[14] << 8) | dma_rx_buffer[15]);
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <read_calliberation_data+0x134>)
 800105e:	7b9b      	ldrb	r3, [r3, #14]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <read_calliberation_data+0x134>)
 8001066:	7bdb      	ldrb	r3, [r3, #15]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <read_calliberation_data+0x158>)
 8001070:	801a      	strh	r2, [r3, #0]
    MB = ((dma_rx_buffer[16] << 8) | dma_rx_buffer[17]);
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <read_calliberation_data+0x134>)
 8001074:	7c1b      	ldrb	r3, [r3, #16]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <read_calliberation_data+0x134>)
 800107c:	7c5b      	ldrb	r3, [r3, #17]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <read_calliberation_data+0x15c>)
 8001086:	801a      	strh	r2, [r3, #0]
    MC = ((dma_rx_buffer[18] << 8) | dma_rx_buffer[19]);
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <read_calliberation_data+0x134>)
 800108a:	7c9b      	ldrb	r3, [r3, #18]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <read_calliberation_data+0x134>)
 8001092:	7cdb      	ldrb	r3, [r3, #19]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <read_calliberation_data+0x160>)
 800109c:	801a      	strh	r2, [r3, #0]
    MD = ((dma_rx_buffer[20] << 8) | dma_rx_buffer[21]);
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <read_calliberation_data+0x134>)
 80010a0:	7d1b      	ldrb	r3, [r3, #20]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <read_calliberation_data+0x134>)
 80010a8:	7d5b      	ldrb	r3, [r3, #21]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <read_calliberation_data+0x164>)
 80010b2:	801a      	strh	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000025e 	.word	0x2000025e
 80010c0:	20000248 	.word	0x20000248
 80010c4:	20000260 	.word	0x20000260
 80010c8:	20000200 	.word	0x20000200
 80010cc:	20000202 	.word	0x20000202
 80010d0:	20000204 	.word	0x20000204
 80010d4:	20000206 	.word	0x20000206
 80010d8:	20000208 	.word	0x20000208
 80010dc:	2000020a 	.word	0x2000020a
 80010e0:	2000020c 	.word	0x2000020c
 80010e4:	2000020e 	.word	0x2000020e
 80010e8:	20000210 	.word	0x20000210
 80010ec:	20000212 	.word	0x20000212
 80010f0:	20000214 	.word	0x20000214

080010f4 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af02      	add	r7, sp, #8
    uint8_t datatowrite = 0x2E;
 80010fa:	232e      	movs	r3, #46	; 0x2e
 80010fc:	71fb      	strb	r3, [r7, #7]
    uint8_t Temp_RAW[2] = {0};
 80010fe:	2300      	movs	r3, #0
 8001100:	80bb      	strh	r3, [r7, #4]
    dma_write_complete = 0; // Reset flag
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <Get_UTemp+0x78>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write_DMA(BMP180_I2C, BMP180_ADDRESS, 0xF4, I2C_MEMADD_SIZE_8BIT, &datatowrite, 1);
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	22f4      	movs	r2, #244	; 0xf4
 8001114:	21ee      	movs	r1, #238	; 0xee
 8001116:	4816      	ldr	r0, [pc, #88]	; (8001170 <Get_UTemp+0x7c>)
 8001118:	f002 fe86 	bl	8003e28 <HAL_I2C_Mem_Write_DMA>
    while (!dma_write_complete); // Wait for DMA completion
 800111c:	bf00      	nop
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <Get_UTemp+0x78>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0fa      	beq.n	800111e <Get_UTemp+0x2a>
    HAL_Delay(5); // Wait 4.5 ms
 8001128:	2005      	movs	r0, #5
 800112a:	f001 fdd5 	bl	8002cd8 <HAL_Delay>
    dma_read_complete = 0; // Reset flag
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <Get_UTemp+0x80>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read_DMA(BMP180_I2C, BMP180_ADDRESS, 0xF6, I2C_MEMADD_SIZE_8BIT, Temp_RAW, 2);
 8001134:	2302      	movs	r3, #2
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22f6      	movs	r2, #246	; 0xf6
 8001140:	21ee      	movs	r1, #238	; 0xee
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <Get_UTemp+0x7c>)
 8001144:	f002 ff8c 	bl	8004060 <HAL_I2C_Mem_Read_DMA>
    while (!dma_read_complete); // Wait for DMA completion
 8001148:	bf00      	nop
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <Get_UTemp+0x80>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <Get_UTemp+0x56>
    return ((Temp_RAW[0] << 8) + Temp_RAW[1]);
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	797b      	ldrb	r3, [r7, #5]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000025f 	.word	0x2000025f
 8001170:	20000260 	.word	0x20000260
 8001174:	2000025e 	.word	0x2000025e

08001178 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 800117c:	f7ff ffba 	bl	80010f4 <Get_UTemp>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <BMP180_GetTemp+0x108>)
 8001186:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <BMP180_GetTemp+0x108>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <BMP180_GetTemp+0x10c>)
 800118e:	8812      	ldrh	r2, [r2, #0]
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9c6 	bl	8000524 <__aeabi_i2d>
 8001198:	4604      	mov	r4, r0
 800119a:	460d      	mov	r5, r1
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <BMP180_GetTemp+0x110>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <BMP180_GetTemp+0x114>)
 80011ac:	f7ff fb4e 	bl	800084c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcc8 	bl	8000b58 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a31      	ldr	r2, [pc, #196]	; (8001290 <BMP180_GetTemp+0x118>)
 80011cc:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011ce:	4b31      	ldr	r3, [pc, #196]	; (8001294 <BMP180_GetTemp+0x11c>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9a5 	bl	8000524 <__aeabi_i2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <BMP180_GetTemp+0x120>)
 80011e0:	f7ff fa0a 	bl	80005f8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <BMP180_GetTemp+0x124>)
 80011ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <BMP180_GetTemp+0x118>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f992 	bl	8000524 <__aeabi_i2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff fb20 	bl	800084c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fca0 	bl	8000b58 <__aeabi_d2iz>
 8001218:	4603      	mov	r3, r0
 800121a:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <BMP180_GetTemp+0x128>)
 800121c:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <BMP180_GetTemp+0x118>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <BMP180_GetTemp+0x128>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <BMP180_GetTemp+0x12c>)
 800122a:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <BMP180_GetTemp+0x12c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3308      	adds	r3, #8
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f976 	bl	8000524 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <BMP180_GetTemp+0x130>)
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc85 	bl	8000b58 <__aeabi_d2iz>
 800124e:	4603      	mov	r3, r0
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <BMP180_GetTemp+0x134>)
 8001252:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <BMP180_GetTemp+0x134>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f963 	bl	8000524 <__aeabi_i2d>
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <BMP180_GetTemp+0x138>)
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcba 	bl	8000be8 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	ee07 3a90 	vmov	s15, r3
}
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	bdb0      	pop	{r4, r5, r7, pc}
 8001280:	20000218 	.word	0x20000218
 8001284:	2000020a 	.word	0x2000020a
 8001288:	20000208 	.word	0x20000208
 800128c:	40e00000 	.word	0x40e00000
 8001290:	20000220 	.word	0x20000220
 8001294:	20000212 	.word	0x20000212
 8001298:	40a00000 	.word	0x40a00000
 800129c:	20000214 	.word	0x20000214
 80012a0:	20000224 	.word	0x20000224
 80012a4:	20000230 	.word	0x20000230
 80012a8:	40300000 	.word	0x40300000
 80012ac:	20000244 	.word	0x20000244
 80012b0:	40240000 	.word	0x40240000

080012b4 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress(int oss) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
    uint8_t datatowrite = 0x34 + (oss << 6);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3334      	adds	r3, #52	; 0x34
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	73fb      	strb	r3, [r7, #15]
    uint8_t Press_RAW[3] = {0};
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <Get_UPress+0xcc>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	81bb      	strh	r3, [r7, #12]
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]
    dma_write_complete = 0; // Reset flag
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <Get_UPress+0xd0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write_DMA(BMP180_I2C, BMP180_ADDRESS, 0xF4, I2C_MEMADD_SIZE_8BIT, &datatowrite, 1);
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 030f 	add.w	r3, r7, #15
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	22f4      	movs	r2, #244	; 0xf4
 80012e8:	21ee      	movs	r1, #238	; 0xee
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <Get_UPress+0xd4>)
 80012ec:	f002 fd9c 	bl	8003e28 <HAL_I2C_Mem_Write_DMA>
    while (!dma_write_complete); // Wait for DMA completion
 80012f0:	bf00      	nop
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <Get_UPress+0xd0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0fa      	beq.n	80012f2 <Get_UPress+0x3e>
    switch (oss) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d81a      	bhi.n	8001338 <Get_UPress+0x84>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <Get_UPress+0x54>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
        case (0): HAL_Delay(5); break;
 8001318:	2005      	movs	r0, #5
 800131a:	f001 fcdd 	bl	8002cd8 <HAL_Delay>
 800131e:	e00b      	b.n	8001338 <Get_UPress+0x84>
        case (1): HAL_Delay(8); break;
 8001320:	2008      	movs	r0, #8
 8001322:	f001 fcd9 	bl	8002cd8 <HAL_Delay>
 8001326:	e007      	b.n	8001338 <Get_UPress+0x84>
        case (2): HAL_Delay(14); break;
 8001328:	200e      	movs	r0, #14
 800132a:	f001 fcd5 	bl	8002cd8 <HAL_Delay>
 800132e:	e003      	b.n	8001338 <Get_UPress+0x84>
        case (3): HAL_Delay(26); break;
 8001330:	201a      	movs	r0, #26
 8001332:	f001 fcd1 	bl	8002cd8 <HAL_Delay>
 8001336:	bf00      	nop
    }
    dma_read_complete = 0; // Reset flag
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <Get_UPress+0xd8>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read_DMA(BMP180_I2C, BMP180_ADDRESS, 0xF6, I2C_MEMADD_SIZE_8BIT, Press_RAW, 3);
 800133e:	2303      	movs	r3, #3
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	22f6      	movs	r2, #246	; 0xf6
 800134c:	21ee      	movs	r1, #238	; 0xee
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <Get_UPress+0xd4>)
 8001350:	f002 fe86 	bl	8004060 <HAL_I2C_Mem_Read_DMA>
    while (!dma_read_complete); // Wait for DMA completion
 8001354:	bf00      	nop
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <Get_UPress+0xd8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0fa      	beq.n	8001356 <Get_UPress+0xa2>
    return (((Press_RAW[0] << 16) + (Press_RAW[1] << 8) + Press_RAW[2]) >> (8 - oss));
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4413      	add	r3, r2
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	441a      	add	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f1c3 0308 	rsb	r3, r3, #8
 8001374:	fa42 f303 	asr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800a7b0 	.word	0x0800a7b0
 8001384:	2000025f 	.word	0x2000025f
 8001388:	20000260 	.word	0x20000260
 800138c:	2000025e 	.word	0x2000025e

08001390 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff8b 	bl	80012b4 <Get_UPress>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <BMP180_GetPress+0x2b4>)
 80013a4:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013a6:	4ba8      	ldr	r3, [pc, #672]	; (8001648 <BMP180_GetPress+0x2b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4aa8      	ldr	r2, [pc, #672]	; (800164c <BMP180_GetPress+0x2bc>)
 80013ac:	8812      	ldrh	r2, [r2, #0]
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8b7 	bl	8000524 <__aeabi_i2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	4ba5      	ldr	r3, [pc, #660]	; (8001650 <BMP180_GetPress+0x2c0>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b0 	bl	8000524 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4ba2      	ldr	r3, [pc, #648]	; (8001654 <BMP180_GetPress+0x2c4>)
 80013ca:	f7ff fa3f 	bl	800084c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7ff f90f 	bl	80005f8 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fbb9 	bl	8000b58 <__aeabi_d2iz>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a9b      	ldr	r2, [pc, #620]	; (8001658 <BMP180_GetPress+0x2c8>)
 80013ea:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013ec:	4b9b      	ldr	r3, [pc, #620]	; (800165c <BMP180_GetPress+0x2cc>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f896 	bl	8000524 <__aeabi_i2d>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b98      	ldr	r3, [pc, #608]	; (8001660 <BMP180_GetPress+0x2d0>)
 80013fe:	f7ff f8fb 	bl	80005f8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b96      	ldr	r3, [pc, #600]	; (8001664 <BMP180_GetPress+0x2d4>)
 800140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001410:	461a      	mov	r2, r3
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <BMP180_GetPress+0x2c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f883 	bl	8000524 <__aeabi_i2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4620      	mov	r0, r4
 8001424:	4629      	mov	r1, r5
 8001426:	f7ff fa11 	bl	800084c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb91 	bl	8000b58 <__aeabi_d2iz>
 8001436:	4603      	mov	r3, r0
 8001438:	4a8b      	ldr	r2, [pc, #556]	; (8001668 <BMP180_GetPress+0x2d8>)
 800143a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800143c:	4b86      	ldr	r3, [pc, #536]	; (8001658 <BMP180_GetPress+0x2c8>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <BMP180_GetPress+0x2d8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4413      	add	r3, r2
 8001446:	4a89      	ldr	r2, [pc, #548]	; (800166c <BMP180_GetPress+0x2dc>)
 8001448:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <BMP180_GetPress+0x2dc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001452:	4a87      	ldr	r2, [pc, #540]	; (8001670 <BMP180_GetPress+0x2e0>)
 8001454:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001456:	4b87      	ldr	r3, [pc, #540]	; (8001674 <BMP180_GetPress+0x2e4>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f861 	bl	8000524 <__aeabi_i2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <BMP180_GetPress+0x2e0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a81      	ldr	r2, [pc, #516]	; (8001670 <BMP180_GetPress+0x2e0>)
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f856 	bl	8000524 <__aeabi_i2d>
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <BMP180_GetPress+0x2e8>)
 800147e:	f7ff f9e5 	bl	800084c <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7ff f8b5 	bl	80005f8 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b71      	ldr	r3, [pc, #452]	; (8001660 <BMP180_GetPress+0x2d0>)
 800149c:	f7ff f9d6 	bl	800084c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb56 	bl	8000b58 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <BMP180_GetPress+0x2c8>)
 80014b0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <BMP180_GetPress+0x2ec>)
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <BMP180_GetPress+0x2e0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f82e 	bl	8000524 <__aeabi_i2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <BMP180_GetPress+0x2d0>)
 80014ce:	f7ff f9bd 	bl	800084c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb3d 	bl	8000b58 <__aeabi_d2iz>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a61      	ldr	r2, [pc, #388]	; (8001668 <BMP180_GetPress+0x2d8>)
 80014e2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <BMP180_GetPress+0x2c8>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <BMP180_GetPress+0x2d8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a64      	ldr	r2, [pc, #400]	; (8001680 <BMP180_GetPress+0x2f0>)
 80014f0:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014f2:	4b64      	ldr	r3, [pc, #400]	; (8001684 <BMP180_GetPress+0x2f4>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	009a      	lsls	r2, r3, #2
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <BMP180_GetPress+0x2f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	3302      	adds	r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	da00      	bge.n	800150e <BMP180_GetPress+0x17e>
 800150c:	3303      	adds	r3, #3
 800150e:	109b      	asrs	r3, r3, #2
 8001510:	461a      	mov	r2, r3
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <BMP180_GetPress+0x2f8>)
 8001514:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <BMP180_GetPress+0x2fc>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	461a      	mov	r2, r3
 800151e:	4b54      	ldr	r3, [pc, #336]	; (8001670 <BMP180_GetPress+0x2e0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fffc 	bl	8000524 <__aeabi_i2d>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b57      	ldr	r3, [pc, #348]	; (8001690 <BMP180_GetPress+0x300>)
 8001532:	f7ff f98b 	bl	800084c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb0b 	bl	8000b58 <__aeabi_d2iz>
 8001542:	4603      	mov	r3, r0
 8001544:	4a44      	ldr	r2, [pc, #272]	; (8001658 <BMP180_GetPress+0x2c8>)
 8001546:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <BMP180_GetPress+0x304>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffe8 	bl	8000524 <__aeabi_i2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <BMP180_GetPress+0x2e0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a44      	ldr	r2, [pc, #272]	; (8001670 <BMP180_GetPress+0x2e0>)
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffdd 	bl	8000524 <__aeabi_i2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <BMP180_GetPress+0x2e8>)
 8001570:	f7ff f96c 	bl	800084c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <BMP180_GetPress+0x308>)
 800158e:	f7ff f95d 	bl	800084c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fadd 	bl	8000b58 <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <BMP180_GetPress+0x2d8>)
 80015a2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <BMP180_GetPress+0x2c8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <BMP180_GetPress+0x2d8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	3302      	adds	r3, #2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffb7 	bl	8000524 <__aeabi_i2d>
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <BMP180_GetPress+0x30c>)
 80015bc:	f7ff f946 	bl	800084c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fac6 	bl	8000b58 <__aeabi_d2iz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <BMP180_GetPress+0x2f0>)
 80015d0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <BMP180_GetPress+0x310>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <BMP180_GetPress+0x2f0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff8d 	bl	8000504 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <BMP180_GetPress+0x2c4>)
 80015f0:	f7ff f92c 	bl	800084c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fad4 	bl	8000ba8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <BMP180_GetPress+0x314>)
 8001604:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <BMP180_GetPress+0x2b4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <BMP180_GetPress+0x2f8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	fa41 f202 	asr.w	r2, r1, r2
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <BMP180_GetPress+0x318>)
 8001622:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <BMP180_GetPress+0x318>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db41      	blt.n	80016b0 <BMP180_GetPress+0x320>
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <BMP180_GetPress+0x318>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	005a      	lsls	r2, r3, #1
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <BMP180_GetPress+0x314>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	461a      	mov	r2, r3
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <BMP180_GetPress+0x31c>)
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e040      	b.n	80016c4 <BMP180_GetPress+0x334>
 8001642:	bf00      	nop
 8001644:	2000021c 	.word	0x2000021c
 8001648:	20000218 	.word	0x20000218
 800164c:	2000020a 	.word	0x2000020a
 8001650:	20000208 	.word	0x20000208
 8001654:	40e00000 	.word	0x40e00000
 8001658:	20000220 	.word	0x20000220
 800165c:	20000212 	.word	0x20000212
 8001660:	40a00000 	.word	0x40a00000
 8001664:	20000214 	.word	0x20000214
 8001668:	20000224 	.word	0x20000224
 800166c:	20000230 	.word	0x20000230
 8001670:	20000238 	.word	0x20000238
 8001674:	2000020e 	.word	0x2000020e
 8001678:	40b00000 	.word	0x40b00000
 800167c:	20000202 	.word	0x20000202
 8001680:	20000228 	.word	0x20000228
 8001684:	20000200 	.word	0x20000200
 8001688:	2000022c 	.word	0x2000022c
 800168c:	20000204 	.word	0x20000204
 8001690:	40c00000 	.word	0x40c00000
 8001694:	2000020c 	.word	0x2000020c
 8001698:	40f00000 	.word	0x40f00000
 800169c:	40100000 	.word	0x40100000
 80016a0:	20000206 	.word	0x20000206
 80016a4:	20000234 	.word	0x20000234
 80016a8:	2000023c 	.word	0x2000023c
 80016ac:	20000240 	.word	0x20000240
	else Press = (B7/B4)*2;
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <BMP180_GetPress+0x43c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <BMP180_GetPress+0x440>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	461a      	mov	r2, r3
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <BMP180_GetPress+0x444>)
 80016c2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016c4:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <BMP180_GetPress+0x444>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <BMP180_GetPress+0x448>)
 80016d4:	f7ff f8ba 	bl	800084c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	461d      	mov	r5, r3
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <BMP180_GetPress+0x444>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff1d 	bl	8000524 <__aeabi_i2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <BMP180_GetPress+0x448>)
 80016f0:	f7ff f8ac 	bl	800084c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa26 	bl	8000b58 <__aeabi_d2iz>
 800170c:	4603      	mov	r3, r0
 800170e:	4a33      	ldr	r2, [pc, #204]	; (80017dc <BMP180_GetPress+0x44c>)
 8001710:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <BMP180_GetPress+0x44c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f640 32de 	movw	r2, #3038	; 0xbde
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <BMP180_GetPress+0x450>)
 800172a:	f7ff f88f 	bl	800084c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa0f 	bl	8000b58 <__aeabi_d2iz>
 800173a:	4603      	mov	r3, r0
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <BMP180_GetPress+0x44c>)
 800173e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <BMP180_GetPress+0x444>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <BMP180_GetPress+0x454>)
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe feea 	bl	8000524 <__aeabi_i2d>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <BMP180_GetPress+0x450>)
 8001756:	f7ff f879 	bl	800084c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f9 	bl	8000b58 <__aeabi_d2iz>
 8001766:	4603      	mov	r3, r0
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <BMP180_GetPress+0x458>)
 800176a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <BMP180_GetPress+0x444>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <BMP180_GetPress+0x44c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <BMP180_GetPress+0x458>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fecb 	bl	8000524 <__aeabi_i2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <BMP180_GetPress+0x45c>)
 8001794:	f7ff f85a 	bl	800084c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9d4 	bl	8000b58 <__aeabi_d2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <BMP180_GetPress+0x444>)
 80017b4:	6013      	str	r3, [r2, #0]

	return Press;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <BMP180_GetPress+0x444>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	2000023c 	.word	0x2000023c
 80017d0:	20000234 	.word	0x20000234
 80017d4:	20000240 	.word	0x20000240
 80017d8:	40700000 	.word	0x40700000
 80017dc:	20000220 	.word	0x20000220
 80017e0:	40f00000 	.word	0x40f00000
 80017e4:	ffffe343 	.word	0xffffe343
 80017e8:	20000224 	.word	0x20000224
 80017ec:	40300000 	.word	0x40300000

080017f0 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fdc9 	bl	8001390 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <BMP180_GetAlt+0x88>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800187c <BMP180_GetAlt+0x8c>
 800180e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001812:	ee16 0a90 	vmov	r0, s13
 8001816:	f7fe fe97 	bl	8000548 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001868 <BMP180_GetAlt+0x78>
 8001822:	ec43 2b10 	vmov	d0, r2, r3
 8001826:	f008 f89b 	bl	8009960 <pow>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	4913      	ldr	r1, [pc, #76]	; (8001880 <BMP180_GetAlt+0x90>)
 8001834:	f7fe fd28 	bl	8000288 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	a30b      	add	r3, pc, #44	; (adr r3, 8001870 <BMP180_GetAlt+0x80>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f9c9 	bl	8000be8 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	ee07 3a90 	vmov	s15, r3
}
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	ccd745e4 	.word	0xccd745e4
 800186c:	3fc85b95 	.word	0x3fc85b95
 8001870:	00000000 	.word	0x00000000
 8001874:	40e5a540 	.word	0x40e5a540
 8001878:	20000240 	.word	0x20000240
 800187c:	47c5e680 	.word	0x47c5e680
 8001880:	3ff00000 	.word	0x3ff00000

08001884 <BMP180_Start>:

void BMP180_Start (void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001888:	f7ff fb80 	bl	8000f8c <read_calliberation_data>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x24>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d102      	bne.n	80018a8 <HAL_I2C_MemRxCpltCallback+0x18>
        dma_read_complete = 1; // Set flag for read completion
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
    }
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40005400 	.word	0x40005400
 80018b8:	2000025e 	.word	0x2000025e

080018bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PV */
volatile uint8_t read_sensor_flag = 0; // Flag to trigger sensor read
volatile uint8_t update_display_flag = 0; // Flag to trigger display update
volatile uint16_t timer_counter = 0; // Counter for timing tasks
// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d129      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x66>
        timer_counter++;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018da:	801a      	strh	r2, [r3, #0]

        // Schedule sensor read every 100 ms
        if (timer_counter % 100 == 0) {
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018e4:	fba2 1203 	umull	r1, r2, r2, r3
 80018e8:	0952      	lsrs	r2, r2, #5
 80018ea:	2164      	movs	r1, #100	; 0x64
 80018ec:	fb01 f202 	mul.w	r2, r1, r2
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <HAL_TIM_PeriodElapsedCallback+0x42>
            read_sensor_flag = 1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
        }

        // Schedule display update every 500 ms
        if (timer_counter % 500 == 0) {
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001906:	fba2 1203 	umull	r1, r2, r2, r3
 800190a:	0952      	lsrs	r2, r2, #5
 800190c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001910:	fb01 f202 	mul.w	r2, r1, r2
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x66>
            update_display_flag = 1;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000456 	.word	0x20000456
 8001934:	51eb851f 	.word	0x51eb851f
 8001938:	20000454 	.word	0x20000454
 800193c:	10624dd3 	.word	0x10624dd3
 8001940:	20000455 	.word	0x20000455

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001948:	b09e      	sub	sp, #120	; 0x78
 800194a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194c:	f001 f952 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001950:	f000 f95c 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001954:	f000 fa9a 	bl	8001e8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001958:	f000 fa68 	bl	8001e2c <MX_DMA_Init>
  MX_I2C1_Init();
 800195c:	f000 f9c0 	bl	8001ce0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001960:	f000 fa3a 	bl	8001dd8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001964:	f000 f9ea 	bl	8001d3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001968:	4891      	ldr	r0, [pc, #580]	; (8001bb0 <main+0x26c>)
 800196a:	f003 fea6 	bl	80056ba <HAL_TIM_Base_Start_IT>

  BMP180_Start();
 800196e:	f7ff ff89 	bl	8001884 <BMP180_Start>

  SSD1306_Init();
 8001972:	f000 fabb 	bl	8001eec <SSD1306_Init>

  SSD1306_GotoXY (35,0);
 8001976:	2100      	movs	r1, #0
 8001978:	2023      	movs	r0, #35	; 0x23
 800197a:	f000 fc21 	bl	80021c0 <SSD1306_GotoXY>
  SSD1306_Puts ("BMP180", &Font_11x18, 1);
 800197e:	2201      	movs	r2, #1
 8001980:	498c      	ldr	r1, [pc, #560]	; (8001bb4 <main+0x270>)
 8001982:	488d      	ldr	r0, [pc, #564]	; (8001bb8 <main+0x274>)
 8001984:	f000 fcb2 	bl	80022ec <SSD1306_Puts>
  SSD1306_GotoXY (10,20);
 8001988:	2114      	movs	r1, #20
 800198a:	200a      	movs	r0, #10
 800198c:	f000 fc18 	bl	80021c0 <SSD1306_GotoXY>
  SSD1306_Puts ("Barometric", &Font_11x18, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	4988      	ldr	r1, [pc, #544]	; (8001bb4 <main+0x270>)
 8001994:	4889      	ldr	r0, [pc, #548]	; (8001bbc <main+0x278>)
 8001996:	f000 fca9 	bl	80022ec <SSD1306_Puts>
  SSD1306_GotoXY (30,40);
 800199a:	2128      	movs	r1, #40	; 0x28
 800199c:	201e      	movs	r0, #30
 800199e:	f000 fc0f 	bl	80021c0 <SSD1306_GotoXY>
  SSD1306_Puts ("Sensor", &Font_11x18, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	4983      	ldr	r1, [pc, #524]	; (8001bb4 <main+0x270>)
 80019a6:	4886      	ldr	r0, [pc, #536]	; (8001bc0 <main+0x27c>)
 80019a8:	f000 fca0 	bl	80022ec <SSD1306_Puts>
  SSD1306_GotoXY (20,40);
 80019ac:	2128      	movs	r1, #40	; 0x28
 80019ae:	2014      	movs	r0, #20
 80019b0:	f000 fc06 	bl	80021c0 <SSD1306_GotoXY>
  SSD1306_UpdateScreen(); //display
 80019b4:	f000 fb5e 	bl	8002074 <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 80019b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019bc:	f001 f98c 	bl	8002cd8 <HAL_Delay>
  SSD1306_Clear();
 80019c0:	f000 fd8d 	bl	80024de <SSD1306_Clear>
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */

      // Check if sensor read is scheduled
      if (read_sensor_flag) {
 80019c4:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <main+0x280>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d043      	beq.n	8001a56 <main+0x112>
          read_sensor_flag = 0; // Reset flag
 80019ce:	4b7d      	ldr	r3, [pc, #500]	; (8001bc4 <main+0x280>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

          // Read sensor data
          Temperature = BMP180_GetTemp();
 80019d4:	f7ff fbd0 	bl	8001178 <BMP180_GetTemp>
 80019d8:	eef0 7a40 	vmov.f32	s15, s0
 80019dc:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <main+0x284>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
          Pressure = BMP180_GetPress(0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fcd4 	bl	8001390 <BMP180_GetPress>
 80019e8:	eef0 7a40 	vmov.f32	s15, s0
 80019ec:	4b77      	ldr	r3, [pc, #476]	; (8001bcc <main+0x288>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
          Altitude = BMP180_GetAlt(0);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fefc 	bl	80017f0 <BMP180_GetAlt>
 80019f8:	eef0 7a40 	vmov.f32	s15, s0
 80019fc:	4b74      	ldr	r3, [pc, #464]	; (8001bd0 <main+0x28c>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]

          // Send data over UART using DMA
          char buffer[100];
          sprintf(buffer, "Temperature: %.2f C, Pressure: %.2f Pa, Altitude: %.2f m\n\r", Temperature, Pressure, Altitude);
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <main+0x284>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_f2d>
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	4689      	mov	r9, r1
 8001a10:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <main+0x288>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4b6c      	ldr	r3, [pc, #432]	; (8001bd0 <main+0x28c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd90 	bl	8000548 <__aeabi_f2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	1d38      	adds	r0, r7, #4
 8001a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a32:	e9cd 4500 	strd	r4, r5, [sp]
 8001a36:	4642      	mov	r2, r8
 8001a38:	464b      	mov	r3, r9
 8001a3a:	4966      	ldr	r1, [pc, #408]	; (8001bd4 <main+0x290>)
 8001a3c:	f005 fd18 	bl	8007470 <siprintf>
          HAL_UART_Transmit_DMA(&huart3, (uint8_t*)buffer, strlen(buffer));
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fbc4 	bl	80001d0 <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <main+0x294>)
 8001a52:	f004 fa63 	bl	8005f1c <HAL_UART_Transmit_DMA>
      }

      // Check if display update is scheduled
      if (update_display_flag) {
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <main+0x298>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a5 	beq.w	8001bac <main+0x268>
          update_display_flag = 0; // Reset flag
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <main+0x298>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]

          // Cycle through display screens (Temperature, Pressure, Altitude)
          static uint8_t display_state = 0;
          switch (display_state) {
 8001a68:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <main+0x29c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d06f      	beq.n	8001b50 <main+0x20c>
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	dca7      	bgt.n	80019c4 <main+0x80>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <main+0x13a>
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d03b      	beq.n	8001af4 <main+0x1b0>
 8001a7c:	e097      	b.n	8001bae <main+0x26a>
              case 0: // Temperature
                  SSD1306_GotoXY(35, 0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2023      	movs	r0, #35	; 0x23
 8001a82:	f000 fb9d 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("BMP180", &Font_11x18, 1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	494a      	ldr	r1, [pc, #296]	; (8001bb4 <main+0x270>)
 8001a8a:	484b      	ldr	r0, [pc, #300]	; (8001bb8 <main+0x274>)
 8001a8c:	f000 fc2e 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(0, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 fb94 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("Temperature", &Font_11x18, 1);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4946      	ldr	r1, [pc, #280]	; (8001bb4 <main+0x270>)
 8001a9c:	4851      	ldr	r0, [pc, #324]	; (8001be4 <main+0x2a0>)
 8001a9e:	f000 fc25 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(20, 40);
 8001aa2:	2128      	movs	r1, #40	; 0x28
 8001aa4:	2014      	movs	r0, #20
 8001aa6:	f000 fb8b 	bl	80021c0 <SSD1306_GotoXY>
                  sprintf(Temperature1, "%.2f", Temperature);
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <main+0x284>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	494b      	ldr	r1, [pc, #300]	; (8001be8 <main+0x2a4>)
 8001aba:	484c      	ldr	r0, [pc, #304]	; (8001bec <main+0x2a8>)
 8001abc:	f005 fcd8 	bl	8007470 <siprintf>
                  SSD1306_Puts(Temperature1, &Font_11x18, 1);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	493c      	ldr	r1, [pc, #240]	; (8001bb4 <main+0x270>)
 8001ac4:	4849      	ldr	r0, [pc, #292]	; (8001bec <main+0x2a8>)
 8001ac6:	f000 fc11 	bl	80022ec <SSD1306_Puts>
                  SSD1306_DrawCircle(80, 40, 2, 1);
 8001aca:	2301      	movs	r3, #1
 8001acc:	2202      	movs	r2, #2
 8001ace:	2128      	movs	r1, #40	; 0x28
 8001ad0:	2050      	movs	r0, #80	; 0x50
 8001ad2:	f000 fc30 	bl	8002336 <SSD1306_DrawCircle>
                  SSD1306_GotoXY(85, 40);
 8001ad6:	2128      	movs	r1, #40	; 0x28
 8001ad8:	2055      	movs	r0, #85	; 0x55
 8001ada:	f000 fb71 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("C", &Font_11x18, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <main+0x270>)
 8001ae2:	4843      	ldr	r0, [pc, #268]	; (8001bf0 <main+0x2ac>)
 8001ae4:	f000 fc02 	bl	80022ec <SSD1306_Puts>
                  SSD1306_UpdateScreen();
 8001ae8:	f000 fac4 	bl	8002074 <SSD1306_UpdateScreen>
                  display_state = 1;
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <main+0x29c>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
                  break;
 8001af2:	e05c      	b.n	8001bae <main+0x26a>

              case 1: // Pressure
                  SSD1306_Clear();
 8001af4:	f000 fcf3 	bl	80024de <SSD1306_Clear>
                  SSD1306_GotoXY(20, 0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2014      	movs	r0, #20
 8001afc:	f000 fb60 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("Pressure", &Font_11x18, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	492c      	ldr	r1, [pc, #176]	; (8001bb4 <main+0x270>)
 8001b04:	483b      	ldr	r0, [pc, #236]	; (8001bf4 <main+0x2b0>)
 8001b06:	f000 fbf1 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(10, 40);
 8001b0a:	2128      	movs	r1, #40	; 0x28
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f000 fb57 	bl	80021c0 <SSD1306_GotoXY>
                  sprintf(Pressure1, "%.2f", Pressure);
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <main+0x288>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd16 	bl	8000548 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4931      	ldr	r1, [pc, #196]	; (8001be8 <main+0x2a4>)
 8001b22:	4835      	ldr	r0, [pc, #212]	; (8001bf8 <main+0x2b4>)
 8001b24:	f005 fca4 	bl	8007470 <siprintf>
                  SSD1306_Puts(Pressure1, &Font_11x18, 1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4922      	ldr	r1, [pc, #136]	; (8001bb4 <main+0x270>)
 8001b2c:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <main+0x2b4>)
 8001b2e:	f000 fbdd 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(100, 40);
 8001b32:	2128      	movs	r1, #40	; 0x28
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	f000 fb43 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("Pa", &Font_11x18, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	491d      	ldr	r1, [pc, #116]	; (8001bb4 <main+0x270>)
 8001b3e:	482f      	ldr	r0, [pc, #188]	; (8001bfc <main+0x2b8>)
 8001b40:	f000 fbd4 	bl	80022ec <SSD1306_Puts>
                  SSD1306_UpdateScreen();
 8001b44:	f000 fa96 	bl	8002074 <SSD1306_UpdateScreen>
                  display_state = 2;
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <main+0x29c>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
                  break;
 8001b4e:	e02e      	b.n	8001bae <main+0x26a>

              case 2: // Altitude
                  SSD1306_Clear();
 8001b50:	f000 fcc5 	bl	80024de <SSD1306_Clear>
                  SSD1306_GotoXY(20, 0);
 8001b54:	2100      	movs	r1, #0
 8001b56:	2014      	movs	r0, #20
 8001b58:	f000 fb32 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("Altitude", &Font_11x18, 1);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4915      	ldr	r1, [pc, #84]	; (8001bb4 <main+0x270>)
 8001b60:	4827      	ldr	r0, [pc, #156]	; (8001c00 <main+0x2bc>)
 8001b62:	f000 fbc3 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(15, 40);
 8001b66:	2128      	movs	r1, #40	; 0x28
 8001b68:	200f      	movs	r0, #15
 8001b6a:	f000 fb29 	bl	80021c0 <SSD1306_GotoXY>
                  sprintf(Altitude1, "%.2f", Altitude);
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <main+0x28c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fce8 	bl	8000548 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	491a      	ldr	r1, [pc, #104]	; (8001be8 <main+0x2a4>)
 8001b7e:	4821      	ldr	r0, [pc, #132]	; (8001c04 <main+0x2c0>)
 8001b80:	f005 fc76 	bl	8007470 <siprintf>
                  SSD1306_Puts(Altitude1, &Font_11x18, 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <main+0x270>)
 8001b88:	481e      	ldr	r0, [pc, #120]	; (8001c04 <main+0x2c0>)
 8001b8a:	f000 fbaf 	bl	80022ec <SSD1306_Puts>
                  SSD1306_GotoXY(90, 40);
 8001b8e:	2128      	movs	r1, #40	; 0x28
 8001b90:	205a      	movs	r0, #90	; 0x5a
 8001b92:	f000 fb15 	bl	80021c0 <SSD1306_GotoXY>
                  SSD1306_Puts("m", &Font_11x18, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <main+0x270>)
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <main+0x2c4>)
 8001b9c:	f000 fba6 	bl	80022ec <SSD1306_Puts>
                  SSD1306_UpdateScreen();
 8001ba0:	f000 fa68 	bl	8002074 <SSD1306_UpdateScreen>
                  display_state = 0;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <main+0x29c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
                  break;
 8001baa:	e000      	b.n	8001bae <main+0x26a>
          }
      }
 8001bac:	bf00      	nop
      if (read_sensor_flag) {
 8001bae:	e709      	b.n	80019c4 <main+0x80>
 8001bb0:	20000374 	.word	0x20000374
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	0800a7b4 	.word	0x0800a7b4
 8001bbc:	0800a7bc 	.word	0x0800a7bc
 8001bc0:	0800a7c8 	.word	0x0800a7c8
 8001bc4:	20000454 	.word	0x20000454
 8001bc8:	20000458 	.word	0x20000458
 8001bcc:	2000045c 	.word	0x2000045c
 8001bd0:	20000460 	.word	0x20000460
 8001bd4:	0800a7d0 	.word	0x0800a7d0
 8001bd8:	200003b4 	.word	0x200003b4
 8001bdc:	20000455 	.word	0x20000455
 8001be0:	20000486 	.word	0x20000486
 8001be4:	0800a80c 	.word	0x0800a80c
 8001be8:	0800a818 	.word	0x0800a818
 8001bec:	20000464 	.word	0x20000464
 8001bf0:	0800a820 	.word	0x0800a820
 8001bf4:	0800a824 	.word	0x0800a824
 8001bf8:	20000470 	.word	0x20000470
 8001bfc:	0800a830 	.word	0x0800a830
 8001c00:	0800a834 	.word	0x0800a834
 8001c04:	2000047c 	.word	0x2000047c
 8001c08:	0800a840 	.word	0x0800a840

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	2230      	movs	r2, #48	; 0x30
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 ffb6 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c72:	2302      	movs	r3, #2
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f858 	bl	8004d48 <HAL_RCC_OscConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c9e:	f000 f91d 	bl	8001edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 faaf 	bl	8005224 <HAL_RCC_ClockConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ccc:	f000 f906 	bl	8001edc <Error_Handler>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3750      	adds	r7, #80	; 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <MX_I2C1_Init+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_I2C1_Init+0x58>)
 8001cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d1e:	f001 fe29 	bl	8003974 <HAL_I2C_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d28:	f000 f8d8 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000260 	.word	0x20000260
 8001d34:	40005400 	.word	0x40005400
 8001d38:	00061a80 	.word	0x00061a80

08001d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83999;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d6e:	2263      	movs	r2, #99	; 0x63
 8001d70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d80:	f003 fc70 	bl	8005664 <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d8a:	f000 f8a7 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d9c:	f003 fdb9 	bl	8005912 <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001da6:	f000 f899 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001db8:	f003 ffd2 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001dc2:	f000 f88b 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000374 	.word	0x20000374
 8001dd4:	0001481f 	.word	0x0001481f

08001dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART3_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e10:	f004 f836 	bl	8005e80 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f85f 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200003b4 	.word	0x200003b4
 8001e28:	40004800 	.word	0x40004800

08001e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_DMA_Init+0x5c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <MX_DMA_Init+0x5c>)
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_DMA_Init+0x5c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	200b      	movs	r0, #11
 8001e54:	f001 f83f 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e58:	200b      	movs	r0, #11
 8001e5a:	f001 f858 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200e      	movs	r0, #14
 8001e64:	f001 f837 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e68:	200e      	movs	r0, #14
 8001e6a:	f001 f850 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2011      	movs	r0, #17
 8001e74:	f001 f82f 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e78:	2011      	movs	r0, #17
 8001e7a:	f001 f848 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_GPIO_Init+0x4c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ef2:	f000 fafd 	bl	80024f0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ef6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001efa:	2201      	movs	r2, #1
 8001efc:	2178      	movs	r1, #120	; 0x78
 8001efe:	485b      	ldr	r0, [pc, #364]	; (800206c <SSD1306_Init+0x180>)
 8001f00:	f002 f9fa 	bl	80042f8 <HAL_I2C_IsDeviceReady>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e0a9      	b.n	8002062 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001f0e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f14:	e002      	b.n	8001f1c <SSD1306_Init+0x30>
		p--;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f22:	22ae      	movs	r2, #174	; 0xae
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 fb68 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f000 fb63 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f36:	2210      	movs	r2, #16
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2078      	movs	r0, #120	; 0x78
 8001f3c:	f000 fb5e 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f40:	22b0      	movs	r2, #176	; 0xb0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2078      	movs	r0, #120	; 0x78
 8001f46:	f000 fb59 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f4a:	22c8      	movs	r2, #200	; 0xc8
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f000 fb54 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 fb4f 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f5e:	2210      	movs	r2, #16
 8001f60:	2100      	movs	r1, #0
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 fb4a 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 fb45 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f72:	2281      	movs	r2, #129	; 0x81
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 fb40 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 fb3b 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001f86:	22a1      	movs	r2, #161	; 0xa1
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 fb36 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f90:	22a6      	movs	r2, #166	; 0xa6
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 fb31 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f9a:	22a8      	movs	r2, #168	; 0xa8
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 fb2c 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fa4:	223f      	movs	r2, #63	; 0x3f
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 fb27 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fae:	22a4      	movs	r2, #164	; 0xa4
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 fb22 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fb8:	22d3      	movs	r2, #211	; 0xd3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 fb1d 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 fb18 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fcc:	22d5      	movs	r2, #213	; 0xd5
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 fb13 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001fd6:	22f0      	movs	r2, #240	; 0xf0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 fb0e 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001fe0:	22d9      	movs	r2, #217	; 0xd9
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 fb09 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001fea:	2222      	movs	r2, #34	; 0x22
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 fb04 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ff4:	22da      	movs	r2, #218	; 0xda
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 faff 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ffe:	2212      	movs	r2, #18
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 fafa 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002008:	22db      	movs	r2, #219	; 0xdb
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 faf5 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002012:	2220      	movs	r2, #32
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 faf0 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800201c:	228d      	movs	r2, #141	; 0x8d
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 faeb 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002026:	2214      	movs	r2, #20
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 fae6 	bl	80025fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002030:	22af      	movs	r2, #175	; 0xaf
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 fae1 	bl	80025fc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800203a:	222e      	movs	r2, #46	; 0x2e
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 fadc 	bl	80025fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f843 	bl	80020d0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800204a:	f000 f813 	bl	8002074 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <SSD1306_Init+0x184>)
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SSD1306_Init+0x184>)
 8002056:	2200      	movs	r2, #0
 8002058:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SSD1306_Init+0x184>)
 800205c:	2201      	movs	r2, #1
 800205e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000260 	.word	0x20000260
 8002070:	2000088c 	.word	0x2000088c

08002074 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e01d      	b.n	80020bc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	3b50      	subs	r3, #80	; 0x50
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fab6 	bl	80025fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f000 fab1 	bl	80025fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 faac 	bl	80025fc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <SSD1306_UpdateScreen+0x58>)
 80020aa:	441a      	add	r2, r3
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 fa33 	bl	800251c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	3301      	adds	r3, #1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b07      	cmp	r3, #7
 80020c0:	d9de      	bls.n	8002080 <SSD1306_UpdateScreen+0xc>
	}
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000488 	.word	0x20000488

080020d0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <SSD1306_Fill+0x14>
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <SSD1306_Fill+0x16>
 80020e4:	23ff      	movs	r3, #255	; 0xff
 80020e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ea:	4619      	mov	r1, r3
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <SSD1306_Fill+0x2c>)
 80020ee:	f004 fd4d 	bl	8006b8c <memset>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000488 	.word	0x20000488

08002100 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
 800210a:	460b      	mov	r3, r1
 800210c:	80bb      	strh	r3, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	70fb      	strb	r3, [r7, #3]
	if (
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b7f      	cmp	r3, #127	; 0x7f
 8002116:	d848      	bhi.n	80021aa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	2b3f      	cmp	r3, #63	; 0x3f
 800211c:	d845      	bhi.n	80021aa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <SSD1306_DrawPixel+0xb8>)
 8002120:	791b      	ldrb	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d11a      	bne.n	8002170 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	b298      	uxth	r0, r3
 8002142:	4603      	mov	r3, r0
 8002144:	01db      	lsls	r3, r3, #7
 8002146:	4413      	add	r3, r2
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <SSD1306_DrawPixel+0xbc>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	b25a      	sxtb	r2, r3
 800214e:	88bb      	ldrh	r3, [r7, #4]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	b25b      	sxtb	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b259      	sxtb	r1, r3
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	4603      	mov	r3, r0
 8002164:	01db      	lsls	r3, r3, #7
 8002166:	4413      	add	r3, r2
 8002168:	b2c9      	uxtb	r1, r1
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <SSD1306_DrawPixel+0xbc>)
 800216c:	54d1      	strb	r1, [r2, r3]
 800216e:	e01d      	b.n	80021ac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	88bb      	ldrh	r3, [r7, #4]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	b298      	uxth	r0, r3
 8002178:	4603      	mov	r3, r0
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	4413      	add	r3, r2
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <SSD1306_DrawPixel+0xbc>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	b25a      	sxtb	r2, r3
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	b25b      	sxtb	r3, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	b25b      	sxtb	r3, r3
 8002196:	4013      	ands	r3, r2
 8002198:	b259      	sxtb	r1, r3
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	4603      	mov	r3, r0
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	4413      	add	r3, r2
 80021a2:	b2c9      	uxtb	r1, r1
 80021a4:	4a05      	ldr	r2, [pc, #20]	; (80021bc <SSD1306_DrawPixel+0xbc>)
 80021a6:	54d1      	strb	r1, [r2, r3]
 80021a8:	e000      	b.n	80021ac <SSD1306_DrawPixel+0xac>
		return;
 80021aa:	bf00      	nop
	}
}
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2000088c 	.word	0x2000088c
 80021bc:	20000488 	.word	0x20000488

080021c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <SSD1306_GotoXY+0x28>)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <SSD1306_GotoXY+0x28>)
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	8053      	strh	r3, [r2, #2]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	2000088c 	.word	0x2000088c

080021ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <SSD1306_Putc+0xfc>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
	if (
 8002208:	2b7f      	cmp	r3, #127	; 0x7f
 800220a:	dc07      	bgt.n	800221c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <SSD1306_Putc+0xfc>)
 800220e:	885b      	ldrh	r3, [r3, #2]
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002218:	2b3f      	cmp	r3, #63	; 0x3f
 800221a:	dd01      	ble.n	8002220 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800221c:	2300      	movs	r3, #0
 800221e:	e05e      	b.n	80022de <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e04b      	b.n	80022be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	3b20      	subs	r3, #32
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	7849      	ldrb	r1, [r1, #1]
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4619      	mov	r1, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	440b      	add	r3, r1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e030      	b.n	80022ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <SSD1306_Putc+0xfc>)
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b298      	uxth	r0, r3
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <SSD1306_Putc+0xfc>)
 8002268:	885a      	ldrh	r2, [r3, #2]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4413      	add	r3, r2
 8002270:	b29b      	uxth	r3, r3
 8002272:	79ba      	ldrb	r2, [r7, #6]
 8002274:	4619      	mov	r1, r3
 8002276:	f7ff ff43 	bl	8002100 <SSD1306_DrawPixel>
 800227a:	e014      	b.n	80022a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <SSD1306_Putc+0xfc>)
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b298      	uxth	r0, r3
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <SSD1306_Putc+0xfc>)
 800228a:	885a      	ldrh	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4413      	add	r3, r2
 8002292:	b299      	uxth	r1, r3
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	f7ff ff2d 	bl	8002100 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3301      	adds	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d3c8      	bcc.n	800224a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3301      	adds	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	461a      	mov	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d3ad      	bcc.n	8002226 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <SSD1306_Putc+0xfc>)
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <SSD1306_Putc+0xfc>)
 80022da:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80022dc:	79fb      	ldrb	r3, [r7, #7]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000088c 	.word	0x2000088c

080022ec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80022fa:	e012      	b.n	8002322 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff71 	bl	80021ec <SSD1306_Putc>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d002      	beq.n	800231c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	e008      	b.n	800232e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e8      	bne.n	80022fc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002336:	b590      	push	{r4, r7, lr}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	4604      	mov	r4, r0
 800233e:	4608      	mov	r0, r1
 8002340:	4611      	mov	r1, r2
 8002342:	461a      	mov	r2, r3
 8002344:	4623      	mov	r3, r4
 8002346:	80fb      	strh	r3, [r7, #6]
 8002348:	4603      	mov	r3, r0
 800234a:	80bb      	strh	r3, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	f1c3 0301 	rsb	r3, r3, #1
 800235a:	b29b      	uxth	r3, r3
 800235c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	461a      	mov	r2, r3
 8002366:	03d2      	lsls	r2, r2, #15
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002378:	88f8      	ldrh	r0, [r7, #6]
 800237a:	88ba      	ldrh	r2, [r7, #4]
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	4413      	add	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	787a      	ldrb	r2, [r7, #1]
 8002384:	4619      	mov	r1, r3
 8002386:	f7ff febb 	bl	8002100 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800238a:	88f8      	ldrh	r0, [r7, #6]
 800238c:	88ba      	ldrh	r2, [r7, #4]
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	787a      	ldrb	r2, [r7, #1]
 8002396:	4619      	mov	r1, r3
 8002398:	f7ff feb2 	bl	8002100 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	4413      	add	r3, r2
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	88b9      	ldrh	r1, [r7, #4]
 80023a6:	787a      	ldrb	r2, [r7, #1]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fea9 	bl	8002100 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	88b9      	ldrh	r1, [r7, #4]
 80023b8:	787a      	ldrb	r2, [r7, #1]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fea0 	bl	8002100 <SSD1306_DrawPixel>

    while (x < y) {
 80023c0:	e081      	b.n	80024c6 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80023c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0e      	blt.n	80023e8 <SSD1306_DrawCircle+0xb2>
            y--;
 80023ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80023d6:	8a7b      	ldrh	r3, [r7, #18]
 80023d8:	3302      	adds	r3, #2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80023de:	8afa      	ldrh	r2, [r7, #22]
 80023e0:	8a7b      	ldrh	r3, [r7, #18]
 80023e2:	4413      	add	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80023e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80023f4:	8abb      	ldrh	r3, [r7, #20]
 80023f6:	3302      	adds	r3, #2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80023fc:	8afa      	ldrh	r2, [r7, #22]
 80023fe:	8abb      	ldrh	r3, [r7, #20]
 8002400:	4413      	add	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	8a3b      	ldrh	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	b298      	uxth	r0, r3
 800240e:	88ba      	ldrh	r2, [r7, #4]
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	4413      	add	r3, r2
 8002414:	b29b      	uxth	r3, r3
 8002416:	787a      	ldrb	r2, [r7, #1]
 8002418:	4619      	mov	r1, r3
 800241a:	f7ff fe71 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	8a3b      	ldrh	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b298      	uxth	r0, r3
 8002426:	88ba      	ldrh	r2, [r7, #4]
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	787a      	ldrb	r2, [r7, #1]
 8002430:	4619      	mov	r1, r3
 8002432:	f7ff fe65 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	b298      	uxth	r0, r3
 800243e:	88ba      	ldrh	r2, [r7, #4]
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	787a      	ldrb	r2, [r7, #1]
 8002448:	4619      	mov	r1, r3
 800244a:	f7ff fe59 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	8a3b      	ldrh	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	b298      	uxth	r0, r3
 8002456:	88ba      	ldrh	r2, [r7, #4]
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	b29b      	uxth	r3, r3
 800245e:	787a      	ldrb	r2, [r7, #1]
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff fe4d 	bl	8002100 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	4413      	add	r3, r2
 800246c:	b298      	uxth	r0, r3
 800246e:	88ba      	ldrh	r2, [r7, #4]
 8002470:	8a3b      	ldrh	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	787a      	ldrb	r2, [r7, #1]
 8002478:	4619      	mov	r1, r3
 800247a:	f7ff fe41 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	b298      	uxth	r0, r3
 8002486:	88ba      	ldrh	r2, [r7, #4]
 8002488:	8a3b      	ldrh	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	787a      	ldrb	r2, [r7, #1]
 8002490:	4619      	mov	r1, r3
 8002492:	f7ff fe35 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	4413      	add	r3, r2
 800249c:	b298      	uxth	r0, r3
 800249e:	88ba      	ldrh	r2, [r7, #4]
 80024a0:	8a3b      	ldrh	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	787a      	ldrb	r2, [r7, #1]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7ff fe29 	bl	8002100 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	b298      	uxth	r0, r3
 80024b6:	88ba      	ldrh	r2, [r7, #4]
 80024b8:	8a3b      	ldrh	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	b29b      	uxth	r3, r3
 80024be:	787a      	ldrb	r2, [r7, #1]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7ff fe1d 	bl	8002100 <SSD1306_DrawPixel>
    while (x < y) {
 80024c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80024ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	f6ff af77 	blt.w	80023c2 <SSD1306_DrawCircle+0x8c>
    }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}

080024de <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff fdf4 	bl	80020d0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024e8:	f7ff fdc4 	bl	8002074 <SSD1306_UpdateScreen>
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}


void ssd1306_I2C_Init() {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <ssd1306_I2C_Init+0x28>)
 80024f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024fa:	e002      	b.n	8002502 <ssd1306_I2C_Init+0x12>
		p--;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	0003d090 	.word	0x0003d090

0800251c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b0c5      	sub	sp, #276	; 0x114
 8002520:	af00      	add	r7, sp, #0
 8002522:	4604      	mov	r4, r0
 8002524:	4608      	mov	r0, r1
 8002526:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800252a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800252e:	600a      	str	r2, [r1, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002536:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800253a:	4622      	mov	r2, r4
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002542:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002546:	4602      	mov	r2, r0
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800254e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002552:	460a      	mov	r2, r1
 8002554:	801a      	strh	r2, [r3, #0]
    uint8_t dt[256];
    dt[0] = reg;
 8002556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800255a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800255e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002562:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800256a:	2300      	movs	r3, #0
 800256c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002570:	e015      	b.n	800259e <ssd1306_I2C_WriteMulti+0x82>
        dt[i + 1] = data[i];
 8002572:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002576:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800257a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	441a      	add	r2, r3
 8002582:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002586:	3301      	adds	r3, #1
 8002588:	7811      	ldrb	r1, [r2, #0]
 800258a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800258e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002592:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8002594:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002598:	3301      	adds	r3, #1
 800259a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800259e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025a8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d8df      	bhi.n	8002572 <ssd1306_I2C_WriteMulti+0x56>
    }
    dma_tx_complete = 0; // Reset flag
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <ssd1306_I2C_WriteMulti+0xd8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count + 1);
 80025b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025bc:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b299      	uxth	r1, r3
 80025c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f107 020c 	add.w	r2, r7, #12
 80025d6:	4808      	ldr	r0, [pc, #32]	; (80025f8 <ssd1306_I2C_WriteMulti+0xdc>)
 80025d8:	f001 fb10 	bl	8003bfc <HAL_I2C_Master_Transmit_DMA>
    while (!dma_tx_complete); // Wait for DMA completion
 80025dc:	bf00      	nop
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <ssd1306_I2C_WriteMulti+0xd8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0fa      	beq.n	80025de <ssd1306_I2C_WriteMulti+0xc2>
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	20000888 	.word	0x20000888
 80025f8:	20000260 	.word	0x20000260

080025fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	460b      	mov	r3, r1
 8002608:	71bb      	strb	r3, [r7, #6]
 800260a:	4613      	mov	r3, r2
 800260c:	717b      	strb	r3, [r7, #5]
    uint8_t dt[2];
    dt[0] = reg;
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	733b      	strb	r3, [r7, #12]
    dt[1] = data;
 8002612:	797b      	ldrb	r3, [r7, #5]
 8002614:	737b      	strb	r3, [r7, #13]
    dma_tx_complete = 0; // Reset flag
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <ssd1306_I2C_Write+0x48>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	b299      	uxth	r1, r3
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	2302      	movs	r3, #2
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <ssd1306_I2C_Write+0x4c>)
 8002628:	f001 fae8 	bl	8003bfc <HAL_I2C_Master_Transmit_DMA>
    while (!dma_tx_complete); // Wait for DMA completion
 800262c:	bf00      	nop
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <ssd1306_I2C_Write+0x48>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0fa      	beq.n	800262e <ssd1306_I2C_Write+0x32>
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000888 	.word	0x20000888
 8002648:	20000260 	.word	0x20000260

0800264c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_MspInit+0x4c>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_MspInit+0x4c>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_MspInit+0x4c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268a:	2007      	movs	r0, #7
 800268c:	f000 fc18 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_I2C_MspInit+0x140>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f040 808a 	bne.w	80027d4 <HAL_I2C_MspInit+0x138>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4a45      	ldr	r2, [pc, #276]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	6313      	str	r3, [r2, #48]	; 0x30
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026dc:	23c0      	movs	r3, #192	; 0xc0
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e0:	2312      	movs	r3, #18
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ec:	2304      	movs	r3, #4
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	483b      	ldr	r0, [pc, #236]	; (80027e4 <HAL_I2C_MspInit+0x148>)
 80026f8:	f000 ffa0 	bl	800363c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 8002706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_I2C_MspInit+0x144>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_I2C_MspInit+0x150>)
 800271c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002724:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002738:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800274e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002752:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800275a:	4823      	ldr	r0, [pc, #140]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800275c:	f000 fbf2 	bl	8002f44 <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002766:	f7ff fbb9 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_I2C_MspInit+0x14c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 8002778:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_I2C_MspInit+0x158>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 800277e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002782:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 8002792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002796:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027ba:	f000 fbc3 	bl	8002f44 <HAL_DMA_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80027c4:	f7ff fb8a 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_I2C_MspInit+0x154>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40005400 	.word	0x40005400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020400 	.word	0x40020400
 80027e8:	200002b4 	.word	0x200002b4
 80027ec:	40026010 	.word	0x40026010
 80027f0:	20000314 	.word	0x20000314
 80027f4:	400260a0 	.word	0x400260a0

080027f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d115      	bne.n	8002836 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	201c      	movs	r0, #28
 800282c:	f000 fb53 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002830:	201c      	movs	r0, #28
 8002832:	f000 fb6c 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_UART_MspInit+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d15b      	bne.n	800291e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_UART_MspInit+0xe8>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <HAL_UART_MspInit+0xe8>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_UART_MspInit+0xe8>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_UART_MspInit+0xe8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_UART_MspInit+0xe8>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_UART_MspInit+0xe8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800289e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028b0:	2307      	movs	r3, #7
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	481d      	ldr	r0, [pc, #116]	; (8002930 <HAL_UART_MspInit+0xec>)
 80028bc:	f000 febe 	bl	800363c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_UART_MspInit+0xf4>)
 80028c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_UART_MspInit+0xf0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002902:	480c      	ldr	r0, [pc, #48]	; (8002934 <HAL_UART_MspInit+0xf0>)
 8002904:	f000 fb1e 	bl	8002f44 <HAL_DMA_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800290e:	f7ff fae5 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_UART_MspInit+0xf0>)
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_UART_MspInit+0xf0>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004800 	.word	0x40004800
 800292c:	40023800 	.word	0x40023800
 8002930:	40020400 	.word	0x40020400
 8002934:	200003f4 	.word	0x200003f4
 8002938:	40026058 	.word	0x40026058

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002990:	f000 f982 	bl	8002c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DMA1_Stream0_IRQHandler+0x10>)
 800299e:	f000 fbd7 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200002b4 	.word	0x200002b4

080029ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <DMA1_Stream3_IRQHandler+0x10>)
 80029b2:	f000 fbcd 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200003f4 	.word	0x200003f4

080029c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <DMA1_Stream6_IRQHandler+0x10>)
 80029c6:	f000 fbc3 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000314 	.word	0x20000314

080029d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <TIM2_IRQHandler+0x10>)
 80029da:	f002 fe92 	bl	8005702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000374 	.word	0x20000374

080029e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_kill>:

int _kill(int pid, int sig)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a02:	f004 f899 	bl	8006b38 <__errno>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2216      	movs	r2, #22
 8002a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_exit>:

void _exit (int status)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ffe7 	bl	80029f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a2a:	e7fe      	b.n	8002a2a <_exit+0x12>

08002a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e00a      	b.n	8002a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3e:	f3af 8000 	nop.w
 8002a42:	4601      	mov	r1, r0
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	60ba      	str	r2, [r7, #8]
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dbf0      	blt.n	8002a3e <_read+0x12>
  }

  return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e009      	b.n	8002a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf1      	blt.n	8002a78 <_write+0x12>
  }
  return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_close>:

int _close(int file)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_isatty>:

int _isatty(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f003 fffe 	bl	8006b38 <__errno>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	220c      	movs	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20020000 	.word	0x20020000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	20000894 	.word	0x20000894
 8002b70:	200008b0 	.word	0x200008b0

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SystemInit+0x28>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <SystemInit+0x28>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SystemInit+0x28>)
 8002b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ba6:	e003      	b.n	8002bb0 <LoopCopyDataInit>

08002ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bae:	3104      	adds	r1, #4

08002bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bb8:	d3f6      	bcc.n	8002ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bbc:	e002      	b.n	8002bc4 <LoopFillZerobss>

08002bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bc0:	f842 3b04 	str.w	r3, [r2], #4

08002bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bc8:	d3f9      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bca:	f7ff ffd3 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f003 ffb9 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd2:	f7fe feb7 	bl	8001944 <main>
  bx  lr    
 8002bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bdc:	0800b9e0 	.word	0x0800b9e0
  ldr  r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002be4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002be8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002bec:	200008ac 	.word	0x200008ac

08002bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_Init+0x40>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_Init+0x40>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x40>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 f94f 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fd10 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f967 	bl	8002f2a <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 f92f 	bl	8002ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	20000010 	.word	0x20000010
 8002c94:	2000000c 	.word	0x2000000c

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000010 	.word	0x20000010
 8002cbc:	20000898 	.word	0x20000898

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000898 	.word	0x20000898

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000010 	.word	0x20000010

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff3e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff31 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa2 	bl	8002e7c <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff feb6 	bl	8002cc0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e099      	b.n	8003094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff fe9d 	bl	8002cc0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d908      	bls.n	8002fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e078      	b.n	8003094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e8      	bne.n	8002f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_DMA_Init+0x158>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	d117      	bne.n	8003066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa7b 	bl	8003544 <DMA_CheckFifoParam>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	e016      	b.n	8003094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa32 	bl	80034d8 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f010803f 	.word	0xf010803f

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Start_IT+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e040      	b.n	8003148 <HAL_DMA_Start_IT+0xa8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12f      	bne.n	800313a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f9c4 	bl	800347c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0216 	orr.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800315c:	4b8e      	ldr	r3, [pc, #568]	; (8003398 <HAL_DMA_IRQHandler+0x248>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8e      	ldr	r2, [pc, #568]	; (800339c <HAL_DMA_IRQHandler+0x24c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2208      	movs	r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2208      	movs	r2, #8
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2201      	movs	r2, #1
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2204      	movs	r2, #4
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2210      	movs	r2, #16
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d043      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03c      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2210      	movs	r2, #16
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e01f      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e016      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0208 	bic.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2220      	movs	r2, #32
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808f 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8087 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2220      	movs	r2, #32
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d136      	bne.n	8003368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0216 	bic.w	r2, r2, #22
 8003308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_DMA_IRQHandler+0x1da>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0208 	bic.w	r2, r2, #8
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	223f      	movs	r2, #63	; 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07e      	beq.n	800345c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
        }
        return;
 8003366:	e079      	b.n	800345c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	2b00      	cmp	r3, #0
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e02c      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e01e      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0210 	bic.w	r2, r2, #16
 80033ce:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d032      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d022      	beq.n	800344a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2205      	movs	r2, #5
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	d307      	bcc.n	8003438 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f2      	bne.n	800341c <HAL_DMA_IRQHandler+0x2cc>
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003438:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x30e>
        return;
 800345c:	bf00      	nop
    }
  }
}
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d108      	bne.n	80034bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ba:	e007      	b.n	80034cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	3b10      	subs	r3, #16
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <DMA_CalcBaseAndBitshift+0x64>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <DMA_CalcBaseAndBitshift+0x68>)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d909      	bls.n	800351a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	659a      	str	r2, [r3, #88]	; 0x58
 8003518:	e007      	b.n	800352a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	aaaaaaab 	.word	0xaaaaaaab
 8003540:	0800b5b8 	.word	0x0800b5b8

08003544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11f      	bne.n	800359e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d856      	bhi.n	8003612 <DMA_CheckFifoParam+0xce>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <DMA_CheckFifoParam+0x28>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358f 	.word	0x0800358f
 8003574:	0800357d 	.word	0x0800357d
 8003578:	08003613 	.word	0x08003613
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d046      	beq.n	8003616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358c:	e043      	b.n	8003616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003596:	d140      	bne.n	800361a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359c:	e03d      	b.n	800361a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	d121      	bne.n	80035ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d837      	bhi.n	800361e <DMA_CheckFifoParam+0xda>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <DMA_CheckFifoParam+0x70>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035cb 	.word	0x080035cb
 80035bc:	080035c5 	.word	0x080035c5
 80035c0:	080035dd 	.word	0x080035dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e030      	b.n	800362c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d025      	beq.n	8003622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035da:	e022      	b.n	8003622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e4:	d11f      	bne.n	8003626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ea:	e01c      	b.n	8003626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d903      	bls.n	80035fa <DMA_CheckFifoParam+0xb6>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d003      	beq.n	8003600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035f8:	e018      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      break;
 80035fe:	e015      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e00b      	b.n	800362a <DMA_CheckFifoParam+0xe6>
      break;
 8003612:	bf00      	nop
 8003614:	e00a      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
 8003618:	e008      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
 800361c:	e006      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
 8003620:	e004      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;   
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
    }
  } 
  
  return status; 
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e16b      	b.n	8003930 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003658:	2201      	movs	r2, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	f040 815a 	bne.w	800392a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00b      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368a:	2b11      	cmp	r3, #17
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0xfc>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b12      	cmp	r3, #18
 8003736:	d123      	bne.n	8003780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80b4 	beq.w	800392a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_GPIO_Init+0x30c>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a5f      	ldr	r2, [pc, #380]	; (8003948 <HAL_GPIO_Init+0x30c>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <HAL_GPIO_Init+0x30c>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_GPIO_Init+0x310>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_GPIO_Init+0x314>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <HAL_GPIO_Init+0x226>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_GPIO_Init+0x318>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d025      	beq.n	800385e <HAL_GPIO_Init+0x222>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_GPIO_Init+0x31c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <HAL_GPIO_Init+0x21e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4f      	ldr	r2, [pc, #316]	; (800395c <HAL_GPIO_Init+0x320>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x21a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4e      	ldr	r2, [pc, #312]	; (8003960 <HAL_GPIO_Init+0x324>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x216>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4d      	ldr	r2, [pc, #308]	; (8003964 <HAL_GPIO_Init+0x328>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x212>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_GPIO_Init+0x32c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x20e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4b      	ldr	r2, [pc, #300]	; (800396c <HAL_GPIO_Init+0x330>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x20a>
 8003842:	2307      	movs	r3, #7
 8003844:	e00e      	b.n	8003864 <HAL_GPIO_Init+0x228>
 8003846:	2308      	movs	r3, #8
 8003848:	e00c      	b.n	8003864 <HAL_GPIO_Init+0x228>
 800384a:	2306      	movs	r3, #6
 800384c:	e00a      	b.n	8003864 <HAL_GPIO_Init+0x228>
 800384e:	2305      	movs	r3, #5
 8003850:	e008      	b.n	8003864 <HAL_GPIO_Init+0x228>
 8003852:	2304      	movs	r3, #4
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x228>
 8003856:	2303      	movs	r3, #3
 8003858:	e004      	b.n	8003864 <HAL_GPIO_Init+0x228>
 800385a:	2302      	movs	r3, #2
 800385c:	e002      	b.n	8003864 <HAL_GPIO_Init+0x228>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_GPIO_Init+0x228>
 8003862:	2300      	movs	r3, #0
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	4093      	lsls	r3, r2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003874:	4935      	ldr	r1, [pc, #212]	; (800394c <HAL_GPIO_Init+0x310>)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_GPIO_Init+0x334>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038a6:	4a32      	ldr	r2, [pc, #200]	; (8003970 <HAL_GPIO_Init+0x334>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ac:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_GPIO_Init+0x334>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <HAL_GPIO_Init+0x334>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_GPIO_Init+0x334>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_GPIO_Init+0x334>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_GPIO_Init+0x334>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003924:	4a12      	ldr	r2, [pc, #72]	; (8003970 <HAL_GPIO_Init+0x334>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	f67f ae90 	bls.w	8003658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40013800 	.word	0x40013800
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40021400 	.word	0x40021400
 8003968:	40021800 	.word	0x40021800
 800396c:	40021c00 	.word	0x40021c00
 8003970:	40013c00 	.word	0x40013c00

08003974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e12b      	b.n	8003bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe fe7e 	bl	800269c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d8:	f001 fe1c 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80039dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a81      	ldr	r2, [pc, #516]	; (8003be8 <HAL_I2C_Init+0x274>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d807      	bhi.n	80039f8 <HAL_I2C_Init+0x84>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a80      	ldr	r2, [pc, #512]	; (8003bec <HAL_I2C_Init+0x278>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e006      	b.n	8003a06 <HAL_I2C_Init+0x92>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a7d      	ldr	r2, [pc, #500]	; (8003bf0 <HAL_I2C_Init+0x27c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf94      	ite	ls
 8003a00:	2301      	movls	r3, #1
 8003a02:	2300      	movhi	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0e7      	b.n	8003bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a78      	ldr	r2, [pc, #480]	; (8003bf4 <HAL_I2C_Init+0x280>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0c9b      	lsrs	r3, r3, #18
 8003a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <HAL_I2C_Init+0x274>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d802      	bhi.n	8003a48 <HAL_I2C_Init+0xd4>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3301      	adds	r3, #1
 8003a46:	e009      	b.n	8003a5c <HAL_I2C_Init+0xe8>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	4a69      	ldr	r2, [pc, #420]	; (8003bf8 <HAL_I2C_Init+0x284>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	495c      	ldr	r1, [pc, #368]	; (8003be8 <HAL_I2C_Init+0x274>)
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d819      	bhi.n	8003ab0 <HAL_I2C_Init+0x13c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e59      	subs	r1, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a90:	400b      	ands	r3, r1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_I2C_Init+0x138>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e59      	subs	r1, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aaa:	e051      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e04f      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_I2C_Init+0x168>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e012      	b.n	8003b02 <HAL_I2C_Init+0x18e>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Init+0x196>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e022      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <HAL_I2C_Init+0x1bc>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1e58      	subs	r0, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	440b      	add	r3, r1
 8003b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2e:	e00f      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	0099      	lsls	r1, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6911      	ldr	r1, [r2, #16]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	000186a0 	.word	0x000186a0
 8003bec:	001e847f 	.word	0x001e847f
 8003bf0:	003d08ff 	.word	0x003d08ff
 8003bf4:	431bde83 	.word	0x431bde83
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	460b      	mov	r3, r1
 8003c0a:	817b      	strh	r3, [r7, #10]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	f040 80f4 	bne.w	8003e0a <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	4a7b      	ldr	r2, [pc, #492]	; (8003e18 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0a1a      	lsrs	r2, r3, #8
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0ca      	b.n	8003e0c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d0db      	beq.n	8003c3c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0bc      	b.n	8003e0c <HAL_I2C_Master_Transmit_DMA+0x210>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	893a      	ldrh	r2, [r7, #8]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a49      	ldr	r2, [pc, #292]	; (8003e1c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003cfa:	897a      	ldrh	r2, [r7, #10]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d062      	beq.n	8003dce <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	4a44      	ldr	r2, [pc, #272]	; (8003e20 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	4a43      	ldr	r2, [pc, #268]	; (8003e24 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8003d16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	2200      	movs	r2, #0
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	4619      	mov	r1, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3310      	adds	r3, #16
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	f7ff f9a7 	bl	80030a0 <HAL_DMA_Start_IT>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d124      	bne.n	8003da6 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d92:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	e02f      	b.n	8003e06 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01e      	b.n	8003e0c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e04:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000008 	.word	0x20000008
 8003e18:	14f8b589 	.word	0x14f8b589
 8003e1c:	ffff0000 	.word	0xffff0000
 8003e20:	08004899 	.word	0x08004899
 8003e24:	08004a43 	.word	0x08004a43

08003e28 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e46:	f7fe ff3b 	bl	8002cc0 <HAL_GetTick>
 8003e4a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	f040 80f3 	bne.w	8004040 <HAL_I2C_Mem_Write_DMA+0x218>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e5a:	4b7c      	ldr	r3, [pc, #496]	; (800404c <HAL_I2C_Mem_Write_DMA+0x224>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	08db      	lsrs	r3, r3, #3
 8003e60:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <HAL_I2C_Mem_Write_DMA+0x228>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a1a      	lsrs	r2, r3, #8
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d116      	bne.n	8003eae <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0c9      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d0db      	beq.n	8003e74 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Mem_Write_DMA+0xa2>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0bb      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d007      	beq.n	8003ef0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2221      	movs	r2, #33	; 0x21
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a49      	ldr	r2, [pc, #292]	; (8004054 <HAL_I2C_Mem_Write_DMA+0x22c>)
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d06e      	beq.n	8004018 <HAL_I2C_Mem_Write_DMA+0x1f0>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <HAL_I2C_Mem_Write_DMA+0x230>)
 8003f40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	4a45      	ldr	r2, [pc, #276]	; (800405c <HAL_I2C_Mem_Write_DMA+0x234>)
 8003f48:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2200      	movs	r2, #0
 8003f60:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	4619      	mov	r1, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3310      	adds	r3, #16
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	f7ff f88e 	bl	80030a0 <HAL_DMA_Start_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	76fb      	strb	r3, [r7, #27]

      if (dmaxferstatus == HAL_OK)
 8003f88:	7efb      	ldrb	r3, [r7, #27]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d130      	bne.n	8003ff0 <HAL_I2C_Mem_Write_DMA+0x1c8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003f8e:	88f8      	ldrh	r0, [r7, #6]
 8003f90:	893a      	ldrh	r2, [r7, #8]
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2323      	movs	r3, #35	; 0x23
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb00 	bl	80045a4 <I2C_RequestMemoryWrite>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Mem_Write_DMA+0x186>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e049      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e028      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0210 	orr.w	r2, r3, #16
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e014      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_I2C_Mem_Write_DMA+0x21a>
    }
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000008 	.word	0x20000008
 8004050:	14f8b589 	.word	0x14f8b589
 8004054:	ffff0000 	.word	0xffff0000
 8004058:	08004899 	.word	0x08004899
 800405c:	08004a43 	.word	0x08004a43

08004060 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407a:	f7fe fe21 	bl	8002cc0 <HAL_GetTick>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	f040 8123 	bne.w	80042d8 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004092:	4b94      	ldr	r3, [pc, #592]	; (80042e4 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	08db      	lsrs	r3, r3, #3
 8004098:	4a93      	ldr	r2, [pc, #588]	; (80042e8 <HAL_I2C_Mem_Read_DMA+0x288>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a1a      	lsrs	r2, r3, #8
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d116      	bne.n	80040e6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0f9      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d0db      	beq.n	80040ac <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_I2C_Mem_Read_DMA+0xa2>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0eb      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d007      	beq.n	8004128 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2222      	movs	r2, #34	; 0x22
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a61      	ldr	r2, [pc, #388]	; (80042ec <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8085 	beq.w	800427e <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	4a5d      	ldr	r2, [pc, #372]	; (80042f0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800417a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	4a5c      	ldr	r2, [pc, #368]	; (80042f4 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004182:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2200      	movs	r2, #0
 800419a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3310      	adds	r3, #16
 80041ae:	4619      	mov	r1, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	461a      	mov	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	f7fe ff71 	bl	80030a0 <HAL_DMA_Start_IT>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 80041c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d144      	bne.n	8004256 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80041cc:	88f8      	ldrh	r0, [r7, #6]
 80041ce:	893a      	ldrh	r2, [r7, #8]
 80041d0:	8979      	ldrh	r1, [r7, #10]
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2323      	movs	r3, #35	; 0x23
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	4603      	mov	r3, r0
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa75 	bl	80046cc <I2C_RequestMemoryRead>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e076      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d108      	bne.n	8004206 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e007      	b.n	8004216 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004214:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004242:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	e03e      	b.n	80042d4 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02d      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800427e:	88f8      	ldrh	r0, [r7, #6]
 8004280:	893a      	ldrh	r2, [r7, #8]
 8004282:	8979      	ldrh	r1, [r7, #10]
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	2323      	movs	r3, #35	; 0x23
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fa1c 	bl	80046cc <I2C_RequestMemoryRead>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e01d      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3728      	adds	r7, #40	; 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000008 	.word	0x20000008
 80042e8:	14f8b589 	.word	0x14f8b589
 80042ec:	ffff0000 	.word	0xffff0000
 80042f0:	08004899 	.word	0x08004899
 80042f4:	08004a43 	.word	0x08004a43

080042f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7fe fcda 	bl	8002cc0 <HAL_GetTick>
 800430c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	f040 8110 	bne.w	8004540 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	4988      	ldr	r1, [pc, #544]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fbc6 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	e103      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_I2C_IsDeviceReady+0x50>
 8004344:	2302      	movs	r3, #2
 8004346:	e0fc      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d007      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a70      	ldr	r2, [pc, #448]	; (8004550 <HAL_I2C_IsDeviceReady+0x258>)
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fb84 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0b6      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043e4:	f7fe fc6c 	bl	8002cc0 <HAL_GetTick>
 80043e8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004418:	e025      	b.n	8004466 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fe fc51 	bl	8002cc0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <HAL_I2C_IsDeviceReady+0x138>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22a0      	movs	r2, #160	; 0xa0
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2ba0      	cmp	r3, #160	; 0xa0
 8004470:	d005      	beq.n	800447e <HAL_I2C_IsDeviceReady+0x186>
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_I2C_IsDeviceReady+0x186>
 8004478:	7dbb      	ldrb	r3, [r7, #22]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0cd      	beq.n	800441a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	d129      	bne.n	80044e8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2319      	movs	r3, #25
 80044c0:	2201      	movs	r2, #1
 80044c2:	4922      	ldr	r1, [pc, #136]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 faf9 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e036      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e02c      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004500:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2319      	movs	r3, #25
 8004508:	2201      	movs	r2, #1
 800450a:	4910      	ldr	r1, [pc, #64]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fad5 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e012      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	3301      	adds	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	f4ff af33 	bcc.w	8004392 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	00100002 	.word	0x00100002
 8004550:	ffff0000 	.word	0xffff0000

08004554 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	4608      	mov	r0, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	461a      	mov	r2, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	817b      	strh	r3, [r7, #10]
 80045b6:	460b      	mov	r3, r1
 80045b8:	813b      	strh	r3, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa6e 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e05f      	b.n	80046c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800460e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	492c      	ldr	r1, [pc, #176]	; (80046c8 <I2C_RequestMemoryWrite+0x124>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 faa7 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e04c      	b.n	80046c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	6a39      	ldr	r1, [r7, #32]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fb11 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b04      	cmp	r3, #4
 8004652:	d107      	bne.n	8004664 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e02b      	b.n	80046c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800466e:	893b      	ldrh	r3, [r7, #8]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
 8004678:	e021      	b.n	80046be <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	b29b      	uxth	r3, r3
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	6a39      	ldr	r1, [r7, #32]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 faeb 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	2b04      	cmp	r3, #4
 800469e:	d107      	bne.n	80046b0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e005      	b.n	80046c0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010002 	.word	0x00010002

080046cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2200      	movs	r2, #0
 800470e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f9d2 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0a9      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004746:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	6a3a      	ldr	r2, [r7, #32]
 800474c:	4951      	ldr	r1, [pc, #324]	; (8004894 <I2C_RequestMemoryRead+0x1c8>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa0b 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e096      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	6a39      	ldr	r1, [r7, #32]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fa75 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b04      	cmp	r3, #4
 800478a:	d107      	bne.n	800479c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e075      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047a6:	893b      	ldrh	r3, [r7, #8]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]
 80047b0:	e021      	b.n	80047f6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047b2:	893b      	ldrh	r3, [r7, #8]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	6a39      	ldr	r1, [r7, #32]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fa4f 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00d      	beq.n	80047ec <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d107      	bne.n	80047e8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e04f      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ec:	893b      	ldrh	r3, [r7, #8]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa34 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e034      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2200      	movs	r2, #0
 800483a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f93c 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e013      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004864:	897b      	ldrh	r3, [r7, #10]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	6a3a      	ldr	r2, [r7, #32]
 8004878:	4906      	ldr	r1, [pc, #24]	; (8004894 <I2C_RequestMemoryRead+0x1c8>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f975 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	00010002 	.word	0x00010002

08004898 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048ca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	2200      	movs	r2, #0
 80048ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048f2:	2b21      	cmp	r3, #33	; 0x21
 80048f4:	d007      	beq.n	8004906 <I2C_DMAXferCplt+0x6e>
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80048fc:	2b22      	cmp	r3, #34	; 0x22
 80048fe:	d131      	bne.n	8004964 <I2C_DMAXferCplt+0xcc>
 8004900:	7cbb      	ldrb	r3, [r7, #18]
 8004902:	2b20      	cmp	r3, #32
 8004904:	d12e      	bne.n	8004964 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004914:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b29      	cmp	r3, #41	; 0x29
 8004920:	d10a      	bne.n	8004938 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2221      	movs	r2, #33	; 0x21
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2228      	movs	r2, #40	; 0x28
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004930:	6978      	ldr	r0, [r7, #20]
 8004932:	f7ff fe19 	bl	8004568 <HAL_I2C_SlaveTxCpltCallback>
 8004936:	e00c      	b.n	8004952 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b2a      	cmp	r3, #42	; 0x2a
 800493c:	d109      	bne.n	8004952 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2222      	movs	r2, #34	; 0x22
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2228      	movs	r2, #40	; 0x28
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800494c:	6978      	ldr	r0, [r7, #20]
 800494e:	f7ff fe15 	bl	800457c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004960:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004962:	e06a      	b.n	8004a3a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d064      	beq.n	8004a3a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004998:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a0:	d009      	beq.n	80049b6 <I2C_DMAXferCplt+0x11e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d006      	beq.n	80049b6 <I2C_DMAXferCplt+0x11e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049ae:	d002      	beq.n	80049b6 <I2C_DMAXferCplt+0x11e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d107      	bne.n	80049c6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049d4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7ff fdcb 	bl	8004590 <HAL_I2C_ErrorCallback>
}
 80049fa:	e01e      	b.n	8004a3a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d10a      	bne.n	8004a26 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7fc ff36 	bl	8001890 <HAL_I2C_MemRxCpltCallback>
}
 8004a24:	e009      	b.n	8004a3a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2212      	movs	r2, #18
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a34:	6978      	ldr	r0, [r7, #20]
 8004a36:	f7ff fd8d 	bl	8004554 <HAL_I2C_MasterRxCpltCallback>
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fe fcf7 	bl	8003464 <HAL_DMA_GetError>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d01b      	beq.n	8004ab4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f043 0210 	orr.w	r2, r3, #16
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff fd6e 	bl	8004590 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e025      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe f8f3 	bl	8002cc0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e023      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10d      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	e00c      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d0b6      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b78:	e051      	b.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d123      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e046      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d021      	beq.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fe f871 	bl	8002cc0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e020      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10c      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e00b      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d18d      	bne.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f837 	bl	8004cea <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02d      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d021      	beq.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe f817 	bl	8002cc0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e007      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d1ca      	bne.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d11b      	bne.n	8004d3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e25e      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d075      	beq.n	8004e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d00c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d72:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d112      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d7e:	4b82      	ldr	r3, [pc, #520]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	4b7e      	ldr	r3, [pc, #504]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05b      	beq.n	8004e50 <HAL_RCC_OscConfig+0x108>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d157      	bne.n	8004e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e239      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d106      	bne.n	8004dbc <HAL_RCC_OscConfig+0x74>
 8004dae:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a75      	ldr	r2, [pc, #468]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e01d      	b.n	8004df8 <HAL_RCC_OscConfig+0xb0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x98>
 8004dc6:	4b70      	ldr	r3, [pc, #448]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6f      	ldr	r2, [pc, #444]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6c      	ldr	r2, [pc, #432]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0xb0>
 8004de0:	4b69      	ldr	r3, [pc, #420]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a68      	ldr	r2, [pc, #416]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b66      	ldr	r3, [pc, #408]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a65      	ldr	r2, [pc, #404]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fd ff5e 	bl	8002cc0 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd ff5a 	bl	8002cc0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1fe      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b5b      	ldr	r3, [pc, #364]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0xc0>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fd ff4a 	bl	8002cc0 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd ff46 	bl	8002cc0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e1ea      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0xe8>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d063      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e5e:	4b4a      	ldr	r3, [pc, #296]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d11c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e76:	4b44      	ldr	r3, [pc, #272]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d116      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_RCC_OscConfig+0x152>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e1be      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4937      	ldr	r1, [pc, #220]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	e03a      	b.n	8004f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb8:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x244>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fd feff 	bl	8002cc0 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec6:	f7fd fefb 	bl	8002cc0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e19f      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee4:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4925      	ldr	r1, [pc, #148]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]
 8004ef8:	e015      	b.n	8004f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_RCC_OscConfig+0x244>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fd fede 	bl	8002cc0 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fd feda 	bl	8002cc0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e17e      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d036      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <HAL_RCC_OscConfig+0x248>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd febe 	bl	8002cc0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f48:	f7fd feba 	bl	8002cc0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e15e      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x200>
 8004f66:	e01b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_OscConfig+0x248>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6e:	f7fd fea7 	bl	8002cc0 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f74:	e00e      	b.n	8004f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f76:	f7fd fea3 	bl	8002cc0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d907      	bls.n	8004f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e147      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	42470000 	.word	0x42470000
 8004f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	4b88      	ldr	r3, [pc, #544]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8004f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ea      	bne.n	8004f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8097 	beq.w	80050dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b81      	ldr	r3, [pc, #516]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10f      	bne.n	8004fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	4b7d      	ldr	r3, [pc, #500]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fce:	4b7a      	ldr	r3, [pc, #488]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	4b77      	ldr	r3, [pc, #476]	; (80051bc <HAL_RCC_OscConfig+0x474>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d118      	bne.n	800501c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fea:	4b74      	ldr	r3, [pc, #464]	; (80051bc <HAL_RCC_OscConfig+0x474>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a73      	ldr	r2, [pc, #460]	; (80051bc <HAL_RCC_OscConfig+0x474>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff6:	f7fd fe63 	bl	8002cc0 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fd fe5f 	bl	8002cc0 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e103      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCC_OscConfig+0x474>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d106      	bne.n	8005032 <HAL_RCC_OscConfig+0x2ea>
 8005024:	4b64      	ldr	r3, [pc, #400]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a63      	ldr	r2, [pc, #396]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
 8005030:	e01c      	b.n	800506c <HAL_RCC_OscConfig+0x324>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b05      	cmp	r3, #5
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x30c>
 800503a:	4b5f      	ldr	r3, [pc, #380]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a5e      	ldr	r2, [pc, #376]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
 8005046:	4b5c      	ldr	r3, [pc, #368]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	4a5b      	ldr	r2, [pc, #364]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6713      	str	r3, [r2, #112]	; 0x70
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0x324>
 8005054:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a57      	ldr	r2, [pc, #348]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6713      	str	r3, [r2, #112]	; 0x70
 8005060:	4b55      	ldr	r3, [pc, #340]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a54      	ldr	r2, [pc, #336]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005066:	f023 0304 	bic.w	r3, r3, #4
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fd fe24 	bl	8002cc0 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fd fe20 	bl	8002cc0 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0c2      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	4b49      	ldr	r3, [pc, #292]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ee      	beq.n	800507c <HAL_RCC_OscConfig+0x334>
 800509e:	e014      	b.n	80050ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a0:	f7fd fe0e 	bl	8002cc0 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a6:	e00a      	b.n	80050be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fd fe0a 	bl	8002cc0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e0ac      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050be:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ee      	bne.n	80050a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d0:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	4a38      	ldr	r2, [pc, #224]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8098 	beq.w	8005216 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050e6:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d05c      	beq.n	80051ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d141      	bne.n	800517e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fa:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCC_OscConfig+0x478>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fd fdde 	bl	8002cc0 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005108:	f7fd fdda 	bl	8002cc0 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e07e      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	3b01      	subs	r3, #1
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	491b      	ldr	r1, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x478>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fd fdb3 	bl	8002cc0 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515e:	f7fd fdaf 	bl	8002cc0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e053      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x416>
 800517c:	e04b      	b.n	8005216 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCC_OscConfig+0x478>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fd fd9c 	bl	8002cc0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518c:	f7fd fd98 	bl	8002cc0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03c      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_RCC_OscConfig+0x470>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x444>
 80051aa:	e034      	b.n	8005216 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e02f      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40007000 	.word	0x40007000
 80051c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c4:	4b16      	ldr	r3, [pc, #88]	; (8005220 <HAL_RCC_OscConfig+0x4d8>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d11c      	bne.n	8005212 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d115      	bne.n	8005212 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800

08005224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0cc      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005238:	4b68      	ldr	r3, [pc, #416]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90c      	bls.n	8005260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b65      	ldr	r3, [pc, #404]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b63      	ldr	r3, [pc, #396]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0b8      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d020      	beq.n	80052ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005278:	4b59      	ldr	r3, [pc, #356]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a58      	ldr	r2, [pc, #352]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005290:	4b53      	ldr	r3, [pc, #332]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a52      	ldr	r2, [pc, #328]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800529a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	494d      	ldr	r1, [pc, #308]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d044      	beq.n	8005344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	4b47      	ldr	r3, [pc, #284]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d119      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e07f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d107      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e2:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e06f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f2:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e067      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005302:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 0203 	bic.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4934      	ldr	r1, [pc, #208]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005314:	f7fd fcd4 	bl	8002cc0 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	e00a      	b.n	8005332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531c:	f7fd fcd0 	bl	8002cc0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e04f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 020c 	and.w	r2, r3, #12
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	429a      	cmp	r2, r3
 8005342:	d1eb      	bne.n	800531c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005344:	4b25      	ldr	r3, [pc, #148]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d20c      	bcs.n	800536c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b22      	ldr	r3, [pc, #136]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e032      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005378:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4916      	ldr	r1, [pc, #88]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	490e      	ldr	r1, [pc, #56]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053aa:	f000 f821 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053ae:	4602      	mov	r2, r0
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	490a      	ldr	r1, [pc, #40]	; (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 80053bc:	5ccb      	ldrb	r3, [r1, r3]
 80053be:	fa22 f303 	lsr.w	r3, r2, r3
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <HAL_RCC_ClockConfig+0x1c8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fd fc34 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023c00 	.word	0x40023c00
 80053e0:	40023800 	.word	0x40023800
 80053e4:	0800b5a0 	.word	0x0800b5a0
 80053e8:	20000008 	.word	0x20000008
 80053ec:	2000000c 	.word	0x2000000c

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f4:	b094      	sub	sp, #80	; 0x50
 80053f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	647b      	str	r3, [r7, #68]	; 0x44
 80053fc:	2300      	movs	r3, #0
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005400:	2300      	movs	r3, #0
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005408:	4b79      	ldr	r3, [pc, #484]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b08      	cmp	r3, #8
 8005412:	d00d      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x40>
 8005414:	2b08      	cmp	r3, #8
 8005416:	f200 80e1 	bhi.w	80055dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
 800541e:	2b04      	cmp	r3, #4
 8005420:	d003      	beq.n	800542a <HAL_RCC_GetSysClockFreq+0x3a>
 8005422:	e0db      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005424:	4b73      	ldr	r3, [pc, #460]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005428:	e0db      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542a:	4b73      	ldr	r3, [pc, #460]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800542c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800542e:	e0d8      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005430:	4b6f      	ldr	r3, [pc, #444]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005438:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543a:	4b6d      	ldr	r3, [pc, #436]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d063      	beq.n	800550e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005446:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	099b      	lsrs	r3, r3, #6
 800544c:	2200      	movs	r2, #0
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	0159      	lsls	r1, r3, #5
 8005470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005474:	0150      	lsls	r0, r2, #5
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4621      	mov	r1, r4
 800547c:	1a51      	subs	r1, r2, r1
 800547e:	6139      	str	r1, [r7, #16]
 8005480:	4629      	mov	r1, r5
 8005482:	eb63 0301 	sbc.w	r3, r3, r1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005494:	4659      	mov	r1, fp
 8005496:	018b      	lsls	r3, r1, #6
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800549e:	4651      	mov	r1, sl
 80054a0:	018a      	lsls	r2, r1, #6
 80054a2:	4651      	mov	r1, sl
 80054a4:	ebb2 0801 	subs.w	r8, r2, r1
 80054a8:	4659      	mov	r1, fp
 80054aa:	eb63 0901 	sbc.w	r9, r3, r1
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c2:	4690      	mov	r8, r2
 80054c4:	4699      	mov	r9, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	eb18 0303 	adds.w	r3, r8, r3
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	462b      	mov	r3, r5
 80054d0:	eb49 0303 	adc.w	r3, r9, r3
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054e2:	4629      	mov	r1, r5
 80054e4:	024b      	lsls	r3, r1, #9
 80054e6:	4621      	mov	r1, r4
 80054e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054ec:	4621      	mov	r1, r4
 80054ee:	024a      	lsls	r2, r1, #9
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f6:	2200      	movs	r2, #0
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005500:	f7fb fbc2 	bl	8000c88 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4613      	mov	r3, r2
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	e058      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	2200      	movs	r2, #0
 8005516:	4618      	mov	r0, r3
 8005518:	4611      	mov	r1, r2
 800551a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	2300      	movs	r3, #0
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	f04f 0000 	mov.w	r0, #0
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	0159      	lsls	r1, r3, #5
 8005536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553a:	0150      	lsls	r0, r2, #5
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4641      	mov	r1, r8
 8005542:	ebb2 0a01 	subs.w	sl, r2, r1
 8005546:	4649      	mov	r1, r9
 8005548:	eb63 0b01 	sbc.w	fp, r3, r1
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800555c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005560:	ebb2 040a 	subs.w	r4, r2, sl
 8005564:	eb63 050b 	sbc.w	r5, r3, fp
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	00eb      	lsls	r3, r5, #3
 8005572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005576:	00e2      	lsls	r2, r4, #3
 8005578:	4614      	mov	r4, r2
 800557a:	461d      	mov	r5, r3
 800557c:	4643      	mov	r3, r8
 800557e:	18e3      	adds	r3, r4, r3
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	464b      	mov	r3, r9
 8005584:	eb45 0303 	adc.w	r3, r5, r3
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005596:	4629      	mov	r1, r5
 8005598:	028b      	lsls	r3, r1, #10
 800559a:	4621      	mov	r1, r4
 800559c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055a0:	4621      	mov	r1, r4
 80055a2:	028a      	lsls	r2, r1, #10
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055aa:	2200      	movs	r2, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b4:	f7fb fb68 	bl	8000c88 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4613      	mov	r3, r2
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	3301      	adds	r3, #1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055da:	e002      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3750      	adds	r7, #80	; 0x50
 80055e8:	46bd      	mov	sp, r7
 80055ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	007a1200 	.word	0x007a1200

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000008 	.word	0x20000008

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a9b      	lsrs	r3, r3, #10
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4903      	ldr	r1, [pc, #12]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	0800b5b0 	.word	0x0800b5b0

0800563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005640:	f7ff ffdc 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0b5b      	lsrs	r3, r3, #13
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	0800b5b0 	.word	0x0800b5b0

08005664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e01d      	b.n	80056b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fd f8b4 	bl	80027f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 fa22 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d122      	bne.n	800575e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d11b      	bne.n	800575e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0202 	mvn.w	r2, #2
 800572e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f9b2 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 800574a:	e005      	b.n	8005758 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f9a4 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9b5 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d122      	bne.n	80057b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0204 	mvn.w	r2, #4
 8005782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f988 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 800579e:	e005      	b.n	80057ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f97a 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f98b 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d122      	bne.n	8005806 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d11b      	bne.n	8005806 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f06f 0208 	mvn.w	r2, #8
 80057d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f95e 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80057f2:	e005      	b.n	8005800 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f950 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f961 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b10      	cmp	r3, #16
 8005812:	d122      	bne.n	800585a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d11b      	bne.n	800585a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 0210 	mvn.w	r2, #16
 800582a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2208      	movs	r2, #8
 8005830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f934 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 8005846:	e005      	b.n	8005854 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f926 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f937 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10e      	bne.n	8005886 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d107      	bne.n	8005886 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0201 	mvn.w	r2, #1
 800587e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fc f81b 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d10e      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fadd 	bl	8005e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d10e      	bne.n	80058de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d107      	bne.n	80058de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8fc 	bl	8005ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d10e      	bne.n	800590a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d107      	bne.n	800590a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0220 	mvn.w	r2, #32
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 faa7 	bl	8005e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_ConfigClockSource+0x18>
 8005926:	2302      	movs	r3, #2
 8005928:	e0b3      	b.n	8005a92 <HAL_TIM_ConfigClockSource+0x180>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005948:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005950:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005962:	d03e      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xd0>
 8005964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005968:	f200 8087 	bhi.w	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005970:	f000 8085 	beq.w	8005a7e <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d87f      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d01a      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0xa2>
 800597e:	2b70      	cmp	r3, #112	; 0x70
 8005980:	d87b      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 8005982:	2b60      	cmp	r3, #96	; 0x60
 8005984:	d050      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0x116>
 8005986:	2b60      	cmp	r3, #96	; 0x60
 8005988:	d877      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 800598a:	2b50      	cmp	r3, #80	; 0x50
 800598c:	d03c      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xf6>
 800598e:	2b50      	cmp	r3, #80	; 0x50
 8005990:	d873      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d058      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x136>
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d86f      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 800599a:	2b30      	cmp	r3, #48	; 0x30
 800599c:	d064      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x156>
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	d86b      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d060      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x156>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d867      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d05c      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x156>
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d05a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059b2:	e062      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 f9ac 	bl	8005d20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e04e      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 f995 	bl	8005d20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e03b      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f000 f909 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2150      	movs	r1, #80	; 0x50
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f962 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a26:	e02b      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 f928 	bl	8005c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2160      	movs	r1, #96	; 0x60
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f952 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a46:	e01b      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 f8e9 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f942 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a66:	e00b      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 f939 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a78:	e002      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d00f      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3d      	ldr	r2, [pc, #244]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3c      	ldr	r2, [pc, #240]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3a      	ldr	r2, [pc, #232]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d02b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d027      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d023      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d017      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_Base_SetConfig+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <TIM_Base_SetConfig+0x130>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <TIM_Base_SetConfig+0x134>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <TIM_Base_SetConfig+0x138>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <TIM_Base_SetConfig+0x13c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40010400 	.word	0x40010400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800
 8005c20:	40001800 	.word	0x40001800
 8005c24:	40001c00 	.word	0x40001c00
 8005c28:	40002000 	.word	0x40002000

08005c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 030a 	bic.w	r3, r3, #10
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f023 0210 	bic.w	r2, r3, #16
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f043 0307 	orr.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e05a      	b.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d01d      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10c      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40001800 	.word	0x40001800

08005e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e03f      	b.n	8005f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc fccc 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f969 	bl	800619c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d153      	bne.n	8005fde <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit_DMA+0x26>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e04c      	b.n	8005fe0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit_DMA+0x38>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e045      	b.n	8005fe0 <HAL_UART_Transmit_DMA+0xc4>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2221      	movs	r2, #33	; 0x21
 8005f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_UART_Transmit_DMA+0xcc>)
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_UART_Transmit_DMA+0xd0>)
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_UART_Transmit_DMA+0xd4>)
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	f7fd f874 	bl	80030a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fd8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	08006031 	.word	0x08006031
 8005fec:	08006083 	.word	0x08006083
 8005ff0:	0800609f 	.word	0x0800609f

08005ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d113      	bne.n	8006074 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006060:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006070:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006072:	e002      	b.n	800607a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff ffbd 	bl	8005ff4 <HAL_UART_TxCpltCallback>
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff ffb9 	bl	8006008 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b21      	cmp	r3, #33	; 0x21
 80060d0:	d108      	bne.n	80060e4 <UART_DMAError+0x46>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060de:	68b8      	ldr	r0, [r7, #8]
 80060e0:	f000 f827 	bl	8006132 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b22      	cmp	r3, #34	; 0x22
 8006104:	d108      	bne.n	8006118 <UART_DMAError+0x7a>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006112:	68b8      	ldr	r0, [r7, #8]
 8006114:	f000 f823 	bl	800615e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	f043 0210 	orr.w	r2, r3, #16
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006124:	68b8      	ldr	r0, [r7, #8]
 8006126:	f7ff ff79 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006148:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006174:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061ba:	68d9      	ldr	r1, [r3, #12]
 80061bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	ea40 0301 	orr.w	r3, r0, r1
 80061c6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	431a      	orrs	r2, r3
 80061de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80061ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f6:	f021 010c 	bic.w	r1, r1, #12
 80061fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006204:	430b      	orrs	r3, r1
 8006206:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006208:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006218:	6999      	ldr	r1, [r3, #24]
 800621a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	ea40 0301 	orr.w	r3, r0, r1
 8006224:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006226:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006230:	f040 824a 	bne.w	80066c8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006234:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b96      	ldr	r3, [pc, #600]	; (8006494 <UART_SetConfig+0x2f8>)
 800623c:	429a      	cmp	r2, r3
 800623e:	d006      	beq.n	800624e <UART_SetConfig+0xb2>
 8006240:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b94      	ldr	r3, [pc, #592]	; (8006498 <UART_SetConfig+0x2fc>)
 8006248:	429a      	cmp	r2, r3
 800624a:	f040 8129 	bne.w	80064a0 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800624e:	f7ff f9f5 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 8006252:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006256:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800625a:	2200      	movs	r2, #0
 800625c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006260:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006264:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	1891      	adds	r1, r2, r2
 800626e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006272:	415b      	adcs	r3, r3
 8006274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006278:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800627c:	4621      	mov	r1, r4
 800627e:	1851      	adds	r1, r2, r1
 8006280:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006284:	4629      	mov	r1, r5
 8006286:	414b      	adcs	r3, r1
 8006288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006298:	4649      	mov	r1, r9
 800629a:	00cb      	lsls	r3, r1, #3
 800629c:	4641      	mov	r1, r8
 800629e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a2:	4641      	mov	r1, r8
 80062a4:	00ca      	lsls	r2, r1, #3
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	4622      	mov	r2, r4
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80062b4:	462b      	mov	r3, r5
 80062b6:	460a      	mov	r2, r1
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80062c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80062cc:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80062d0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80062d4:	460b      	mov	r3, r1
 80062d6:	18db      	adds	r3, r3, r3
 80062d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062dc:	4613      	mov	r3, r2
 80062de:	eb42 0303 	adc.w	r3, r2, r3
 80062e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80062ea:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80062ee:	f7fa fccb 	bl	8000c88 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b69      	ldr	r3, [pc, #420]	; (800649c <UART_SetConfig+0x300>)
 80062f8:	fba3 2302 	umull	r2, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	011c      	lsls	r4, r3, #4
 8006300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006304:	2200      	movs	r2, #0
 8006306:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800630a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800630e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006312:	4642      	mov	r2, r8
 8006314:	464b      	mov	r3, r9
 8006316:	1891      	adds	r1, r2, r2
 8006318:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800631c:	415b      	adcs	r3, r3
 800631e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006322:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006326:	4641      	mov	r1, r8
 8006328:	1851      	adds	r1, r2, r1
 800632a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006342:	4659      	mov	r1, fp
 8006344:	00cb      	lsls	r3, r1, #3
 8006346:	4651      	mov	r1, sl
 8006348:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634c:	4651      	mov	r1, sl
 800634e:	00ca      	lsls	r2, r1, #3
 8006350:	4610      	mov	r0, r2
 8006352:	4619      	mov	r1, r3
 8006354:	4603      	mov	r3, r0
 8006356:	4642      	mov	r2, r8
 8006358:	189b      	adds	r3, r3, r2
 800635a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800635e:	464b      	mov	r3, r9
 8006360:	460a      	mov	r2, r1
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800636a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006376:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800637a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800637e:	460b      	mov	r3, r1
 8006380:	18db      	adds	r3, r3, r3
 8006382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006386:	4613      	mov	r3, r2
 8006388:	eb42 0303 	adc.w	r3, r2, r3
 800638c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006390:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006394:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006398:	f7fa fc76 	bl	8000c88 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4611      	mov	r1, r2
 80063a2:	4b3e      	ldr	r3, [pc, #248]	; (800649c <UART_SetConfig+0x300>)
 80063a4:	fba3 2301 	umull	r2, r3, r3, r1
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2264      	movs	r2, #100	; 0x64
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
 80063b0:	1acb      	subs	r3, r1, r3
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063b8:	4b38      	ldr	r3, [pc, #224]	; (800649c <UART_SetConfig+0x300>)
 80063ba:	fba3 2302 	umull	r2, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063c6:	441c      	add	r4, r3
 80063c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80063d2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80063d6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80063da:	4642      	mov	r2, r8
 80063dc:	464b      	mov	r3, r9
 80063de:	1891      	adds	r1, r2, r2
 80063e0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80063e4:	415b      	adcs	r3, r3
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063ea:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80063ee:	4641      	mov	r1, r8
 80063f0:	1851      	adds	r1, r2, r1
 80063f2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80063f6:	4649      	mov	r1, r9
 80063f8:	414b      	adcs	r3, r1
 80063fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800640a:	4659      	mov	r1, fp
 800640c:	00cb      	lsls	r3, r1, #3
 800640e:	4651      	mov	r1, sl
 8006410:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006414:	4651      	mov	r1, sl
 8006416:	00ca      	lsls	r2, r1, #3
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	4603      	mov	r3, r0
 800641e:	4642      	mov	r2, r8
 8006420:	189b      	adds	r3, r3, r2
 8006422:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006426:	464b      	mov	r3, r9
 8006428:	460a      	mov	r2, r1
 800642a:	eb42 0303 	adc.w	r3, r2, r3
 800642e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006432:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800643e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006442:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006446:	460b      	mov	r3, r1
 8006448:	18db      	adds	r3, r3, r3
 800644a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644e:	4613      	mov	r3, r2
 8006450:	eb42 0303 	adc.w	r3, r2, r3
 8006454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006458:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800645c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006460:	f7fa fc12 	bl	8000c88 <__aeabi_uldivmod>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <UART_SetConfig+0x300>)
 800646a:	fba3 1302 	umull	r1, r3, r3, r2
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2164      	movs	r1, #100	; 0x64
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	3332      	adds	r3, #50	; 0x32
 800647c:	4a07      	ldr	r2, [pc, #28]	; (800649c <UART_SetConfig+0x300>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f003 0207 	and.w	r2, r3, #7
 8006488:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4422      	add	r2, r4
 8006490:	609a      	str	r2, [r3, #8]
 8006492:	e349      	b.n	8006b28 <UART_SetConfig+0x98c>
 8006494:	40011000 	.word	0x40011000
 8006498:	40011400 	.word	0x40011400
 800649c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7ff f8b8 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80064a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80064b2:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80064b6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80064ba:	4622      	mov	r2, r4
 80064bc:	462b      	mov	r3, r5
 80064be:	1891      	adds	r1, r2, r2
 80064c0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80064c4:	415b      	adcs	r3, r3
 80064c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80064ce:	4621      	mov	r1, r4
 80064d0:	eb12 0a01 	adds.w	sl, r2, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	eb43 0b01 	adc.w	fp, r3, r1
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ee:	4692      	mov	sl, r2
 80064f0:	469b      	mov	fp, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	eb1a 0303 	adds.w	r3, sl, r3
 80064f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80064fc:	462b      	mov	r3, r5
 80064fe:	eb4b 0303 	adc.w	r3, fp, r3
 8006502:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006506:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006512:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006516:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800651a:	460b      	mov	r3, r1
 800651c:	18db      	adds	r3, r3, r3
 800651e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006530:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006534:	f7fa fba8 	bl	8000c88 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4b61      	ldr	r3, [pc, #388]	; (80066c4 <UART_SetConfig+0x528>)
 800653e:	fba3 2302 	umull	r2, r3, r3, r2
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	011c      	lsls	r4, r3, #4
 8006546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800654a:	2200      	movs	r2, #0
 800654c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006550:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006554:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	1891      	adds	r1, r2, r2
 800655e:	67b9      	str	r1, [r7, #120]	; 0x78
 8006560:	415b      	adcs	r3, r3
 8006562:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006564:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006568:	4641      	mov	r1, r8
 800656a:	1851      	adds	r1, r2, r1
 800656c:	6739      	str	r1, [r7, #112]	; 0x70
 800656e:	4649      	mov	r1, r9
 8006570:	414b      	adcs	r3, r1
 8006572:	677b      	str	r3, [r7, #116]	; 0x74
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006580:	4659      	mov	r1, fp
 8006582:	00cb      	lsls	r3, r1, #3
 8006584:	4651      	mov	r1, sl
 8006586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658a:	4651      	mov	r1, sl
 800658c:	00ca      	lsls	r2, r1, #3
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	4603      	mov	r3, r0
 8006594:	4642      	mov	r2, r8
 8006596:	189b      	adds	r3, r3, r2
 8006598:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800659c:	464b      	mov	r3, r9
 800659e:	460a      	mov	r2, r1
 80065a0:	eb42 0303 	adc.w	r3, r2, r3
 80065a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80065a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80065b4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80065b8:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80065bc:	460b      	mov	r3, r1
 80065be:	18db      	adds	r3, r3, r3
 80065c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c2:	4613      	mov	r3, r2
 80065c4:	eb42 0303 	adc.w	r3, r2, r3
 80065c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80065ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80065d2:	f7fa fb59 	bl	8000c88 <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <UART_SetConfig+0x528>)
 80065de:	fba3 2301 	umull	r2, r3, r3, r1
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	2264      	movs	r2, #100	; 0x64
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	1acb      	subs	r3, r1, r3
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <UART_SetConfig+0x528>)
 80065f4:	fba3 2302 	umull	r2, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006600:	441c      	add	r4, r3
 8006602:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006606:	2200      	movs	r2, #0
 8006608:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800660c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006610:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006614:	4642      	mov	r2, r8
 8006616:	464b      	mov	r3, r9
 8006618:	1891      	adds	r1, r2, r2
 800661a:	6639      	str	r1, [r7, #96]	; 0x60
 800661c:	415b      	adcs	r3, r3
 800661e:	667b      	str	r3, [r7, #100]	; 0x64
 8006620:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006624:	4641      	mov	r1, r8
 8006626:	1851      	adds	r1, r2, r1
 8006628:	65b9      	str	r1, [r7, #88]	; 0x58
 800662a:	4649      	mov	r1, r9
 800662c:	414b      	adcs	r3, r1
 800662e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800663c:	4659      	mov	r1, fp
 800663e:	00cb      	lsls	r3, r1, #3
 8006640:	4651      	mov	r1, sl
 8006642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006646:	4651      	mov	r1, sl
 8006648:	00ca      	lsls	r2, r1, #3
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	4603      	mov	r3, r0
 8006650:	4642      	mov	r2, r8
 8006652:	189b      	adds	r3, r3, r2
 8006654:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006658:	464b      	mov	r3, r9
 800665a:	460a      	mov	r2, r1
 800665c:	eb42 0303 	adc.w	r3, r2, r3
 8006660:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006664:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006670:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006674:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006678:	460b      	mov	r3, r1
 800667a:	18db      	adds	r3, r3, r3
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
 800667e:	4613      	mov	r3, r2
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	657b      	str	r3, [r7, #84]	; 0x54
 8006686:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800668a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800668e:	f7fa fafb 	bl	8000c88 <__aeabi_uldivmod>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <UART_SetConfig+0x528>)
 8006698:	fba3 1302 	umull	r1, r3, r3, r2
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	2164      	movs	r1, #100	; 0x64
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	3332      	adds	r3, #50	; 0x32
 80066aa:	4a06      	ldr	r2, [pc, #24]	; (80066c4 <UART_SetConfig+0x528>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f003 0207 	and.w	r2, r3, #7
 80066b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4422      	add	r2, r4
 80066be:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066c0:	e232      	b.n	8006b28 <UART_SetConfig+0x98c>
 80066c2:	bf00      	nop
 80066c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b8d      	ldr	r3, [pc, #564]	; (8006904 <UART_SetConfig+0x768>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d006      	beq.n	80066e2 <UART_SetConfig+0x546>
 80066d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b8b      	ldr	r3, [pc, #556]	; (8006908 <UART_SetConfig+0x76c>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	f040 8117 	bne.w	8006910 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e2:	f7fe ffab 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 80066e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80066f4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80066f8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80066fc:	4622      	mov	r2, r4
 80066fe:	462b      	mov	r3, r5
 8006700:	1891      	adds	r1, r2, r2
 8006702:	64b9      	str	r1, [r7, #72]	; 0x48
 8006704:	415b      	adcs	r3, r3
 8006706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800670c:	4621      	mov	r1, r4
 800670e:	eb12 0801 	adds.w	r8, r2, r1
 8006712:	4629      	mov	r1, r5
 8006714:	eb43 0901 	adc.w	r9, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006724:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006728:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800672c:	4690      	mov	r8, r2
 800672e:	4699      	mov	r9, r3
 8006730:	4623      	mov	r3, r4
 8006732:	eb18 0303 	adds.w	r3, r8, r3
 8006736:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800673a:	462b      	mov	r3, r5
 800673c:	eb49 0303 	adc.w	r3, r9, r3
 8006740:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006744:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006750:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006760:	4629      	mov	r1, r5
 8006762:	008b      	lsls	r3, r1, #2
 8006764:	4621      	mov	r1, r4
 8006766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676a:	4621      	mov	r1, r4
 800676c:	008a      	lsls	r2, r1, #2
 800676e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006772:	f7fa fa89 	bl	8000c88 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b64      	ldr	r3, [pc, #400]	; (800690c <UART_SetConfig+0x770>)
 800677c:	fba3 2302 	umull	r2, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	011c      	lsls	r4, r3, #4
 8006784:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006788:	2200      	movs	r2, #0
 800678a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800678e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006792:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8006796:	4642      	mov	r2, r8
 8006798:	464b      	mov	r3, r9
 800679a:	1891      	adds	r1, r2, r2
 800679c:	6439      	str	r1, [r7, #64]	; 0x40
 800679e:	415b      	adcs	r3, r3
 80067a0:	647b      	str	r3, [r7, #68]	; 0x44
 80067a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067a6:	4641      	mov	r1, r8
 80067a8:	1851      	adds	r1, r2, r1
 80067aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80067ac:	4649      	mov	r1, r9
 80067ae:	414b      	adcs	r3, r1
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80067be:	4659      	mov	r1, fp
 80067c0:	00cb      	lsls	r3, r1, #3
 80067c2:	4651      	mov	r1, sl
 80067c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c8:	4651      	mov	r1, sl
 80067ca:	00ca      	lsls	r2, r1, #3
 80067cc:	4610      	mov	r0, r2
 80067ce:	4619      	mov	r1, r3
 80067d0:	4603      	mov	r3, r0
 80067d2:	4642      	mov	r2, r8
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80067da:	464b      	mov	r3, r9
 80067dc:	460a      	mov	r2, r1
 80067de:	eb42 0303 	adc.w	r3, r2, r3
 80067e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80067e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80067f2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006802:	4649      	mov	r1, r9
 8006804:	008b      	lsls	r3, r1, #2
 8006806:	4641      	mov	r1, r8
 8006808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680c:	4641      	mov	r1, r8
 800680e:	008a      	lsls	r2, r1, #2
 8006810:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006814:	f7fa fa38 	bl	8000c88 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4b3b      	ldr	r3, [pc, #236]	; (800690c <UART_SetConfig+0x770>)
 800681e:	fba3 1302 	umull	r1, r3, r3, r2
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2164      	movs	r1, #100	; 0x64
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	3332      	adds	r3, #50	; 0x32
 8006830:	4a36      	ldr	r2, [pc, #216]	; (800690c <UART_SetConfig+0x770>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683c:	441c      	add	r4, r3
 800683e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006848:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800684c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	6339      	str	r1, [r7, #48]	; 0x30
 8006858:	415b      	adcs	r3, r3
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
 800685c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	62b9      	str	r1, [r7, #40]	; 0x28
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006894:	464b      	mov	r3, r9
 8006896:	460a      	mov	r2, r1
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80068ac:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80068bc:	4649      	mov	r1, r9
 80068be:	008b      	lsls	r3, r1, #2
 80068c0:	4641      	mov	r1, r8
 80068c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c6:	4641      	mov	r1, r8
 80068c8:	008a      	lsls	r2, r1, #2
 80068ca:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80068ce:	f7fa f9db 	bl	8000c88 <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <UART_SetConfig+0x770>)
 80068d8:	fba3 1302 	umull	r1, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2164      	movs	r1, #100	; 0x64
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	3332      	adds	r3, #50	; 0x32
 80068ea:	4a08      	ldr	r2, [pc, #32]	; (800690c <UART_SetConfig+0x770>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4422      	add	r2, r4
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	e112      	b.n	8006b28 <UART_SetConfig+0x98c>
 8006902:	bf00      	nop
 8006904:	40011000 	.word	0x40011000
 8006908:	40011400 	.word	0x40011400
 800690c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe fe80 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006914:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800691c:	2200      	movs	r2, #0
 800691e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006922:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006926:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800692a:	4642      	mov	r2, r8
 800692c:	464b      	mov	r3, r9
 800692e:	1891      	adds	r1, r2, r2
 8006930:	6239      	str	r1, [r7, #32]
 8006932:	415b      	adcs	r3, r3
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800693a:	4641      	mov	r1, r8
 800693c:	1854      	adds	r4, r2, r1
 800693e:	4649      	mov	r1, r9
 8006940:	eb43 0501 	adc.w	r5, r3, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	00eb      	lsls	r3, r5, #3
 800694e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006952:	00e2      	lsls	r2, r4, #3
 8006954:	4614      	mov	r4, r2
 8006956:	461d      	mov	r5, r3
 8006958:	4643      	mov	r3, r8
 800695a:	18e3      	adds	r3, r4, r3
 800695c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006960:	464b      	mov	r3, r9
 8006962:	eb45 0303 	adc.w	r3, r5, r3
 8006966:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800696a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006976:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006986:	4629      	mov	r1, r5
 8006988:	008b      	lsls	r3, r1, #2
 800698a:	4621      	mov	r1, r4
 800698c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006990:	4621      	mov	r1, r4
 8006992:	008a      	lsls	r2, r1, #2
 8006994:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8006998:	f7fa f976 	bl	8000c88 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <UART_SetConfig+0x998>)
 80069a2:	fba3 2302 	umull	r2, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	011c      	lsls	r4, r3, #4
 80069aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069b4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80069b8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	61b9      	str	r1, [r7, #24]
 80069c4:	415b      	adcs	r3, r3
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6139      	str	r1, [r7, #16]
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a18:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8006a28:	4649      	mov	r1, r9
 8006a2a:	008b      	lsls	r3, r1, #2
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a32:	4641      	mov	r1, r8
 8006a34:	008a      	lsls	r2, r1, #2
 8006a36:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006a3a:	f7fa f925 	bl	8000c88 <__aeabi_uldivmod>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4b3c      	ldr	r3, [pc, #240]	; (8006b34 <UART_SetConfig+0x998>)
 8006a44:	fba3 1302 	umull	r1, r3, r3, r2
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	2164      	movs	r1, #100	; 0x64
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	3332      	adds	r3, #50	; 0x32
 8006a56:	4a37      	ldr	r2, [pc, #220]	; (8006b34 <UART_SetConfig+0x998>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a62:	441c      	add	r4, r3
 8006a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a72:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8006a76:	4642      	mov	r2, r8
 8006a78:	464b      	mov	r3, r9
 8006a7a:	1891      	adds	r1, r2, r2
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	415b      	adcs	r3, r3
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a86:	4641      	mov	r1, r8
 8006a88:	1851      	adds	r1, r2, r1
 8006a8a:	6039      	str	r1, [r7, #0]
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	414b      	adcs	r3, r1
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	00cb      	lsls	r3, r1, #3
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	00ca      	lsls	r2, r1, #3
 8006aac:	4610      	mov	r0, r2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aba:	464b      	mov	r3, r9
 8006abc:	460a      	mov	r2, r1
 8006abe:	eb42 0303 	adc.w	r3, r2, r3
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	008b      	lsls	r3, r1, #2
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aec:	4641      	mov	r1, r8
 8006aee:	008a      	lsls	r2, r1, #2
 8006af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006af4:	f7fa f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <UART_SetConfig+0x998>)
 8006afe:	fba3 1302 	umull	r1, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	2164      	movs	r1, #100	; 0x64
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	3332      	adds	r3, #50	; 0x32
 8006b10:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <UART_SetConfig+0x998>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4422      	add	r2, r4
 8006b24:	609a      	str	r2, [r3, #8]
}
 8006b26:	e7ff      	b.n	8006b28 <UART_SetConfig+0x98c>
 8006b28:	bf00      	nop
 8006b2a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b34:	51eb851f 	.word	0x51eb851f

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000014 	.word	0x20000014

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4d0d      	ldr	r5, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2600      	movs	r6, #0
 8006b50:	42a6      	cmp	r6, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4d0b      	ldr	r5, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f003 fe1c 	bl	800a794 <_init>
 8006b5c:	1b64      	subs	r4, r4, r5
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2600      	movs	r6, #0
 8006b62:	42a6      	cmp	r6, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6c:	4798      	blx	r3
 8006b6e:	3601      	adds	r6, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b76:	4798      	blx	r3
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	0800b9d8 	.word	0x0800b9d8
 8006b80:	0800b9d8 	.word	0x0800b9d8
 8006b84:	0800b9d8 	.word	0x0800b9d8
 8006b88:	0800b9dc 	.word	0x0800b9dc

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__cvt>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	ec55 4b10 	vmov	r4, r5, d0
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	462b      	mov	r3, r5
 8006bac:	bfbb      	ittet	lt
 8006bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bb2:	461d      	movlt	r5, r3
 8006bb4:	2300      	movge	r3, #0
 8006bb6:	232d      	movlt	r3, #45	; 0x2d
 8006bb8:	700b      	strb	r3, [r1, #0]
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	f023 0820 	bic.w	r8, r3, #32
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4622      	movlt	r2, r4
 8006bca:	4614      	movlt	r4, r2
 8006bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd0:	d005      	beq.n	8006bde <__cvt+0x42>
 8006bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd6:	d100      	bne.n	8006bda <__cvt+0x3e>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	2102      	movs	r1, #2
 8006bdc:	e000      	b.n	8006be0 <__cvt+0x44>
 8006bde:	2103      	movs	r1, #3
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	ab02      	add	r3, sp, #8
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	4653      	mov	r3, sl
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f000 fcea 	bl	80075c8 <_dtoa_r>
 8006bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	d102      	bne.n	8006c02 <__cvt+0x66>
 8006bfc:	f019 0f01 	tst.w	r9, #1
 8006c00:	d022      	beq.n	8006c48 <__cvt+0xac>
 8006c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c06:	eb07 0906 	add.w	r9, r7, r6
 8006c0a:	d110      	bne.n	8006c2e <__cvt+0x92>
 8006c0c:	783b      	ldrb	r3, [r7, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d10a      	bne.n	8006c28 <__cvt+0x8c>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c1e:	b918      	cbnz	r0, 8006c28 <__cvt+0x8c>
 8006c20:	f1c6 0601 	rsb	r6, r6, #1
 8006c24:	f8ca 6000 	str.w	r6, [sl]
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	4499      	add	r9, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3a:	b108      	cbz	r0, 8006c40 <__cvt+0xa4>
 8006c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	454b      	cmp	r3, r9
 8006c46:	d307      	bcc.n	8006c58 <__cvt+0xbc>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	4638      	mov	r0, r7
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	b004      	add	sp, #16
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e7f0      	b.n	8006c42 <__cvt+0xa6>

08006c60 <__exponent>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	4603      	mov	r3, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfb8      	it	lt
 8006c68:	4249      	neglt	r1, r1
 8006c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6e:	bfb4      	ite	lt
 8006c70:	222d      	movlt	r2, #45	; 0x2d
 8006c72:	222b      	movge	r2, #43	; 0x2b
 8006c74:	2909      	cmp	r1, #9
 8006c76:	7042      	strb	r2, [r0, #1]
 8006c78:	dd2a      	ble.n	8006cd0 <__exponent+0x70>
 8006c7a:	f10d 0407 	add.w	r4, sp, #7
 8006c7e:	46a4      	mov	ip, r4
 8006c80:	270a      	movs	r7, #10
 8006c82:	46a6      	mov	lr, r4
 8006c84:	460a      	mov	r2, r1
 8006c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8e:	3530      	adds	r5, #48	; 0x30
 8006c90:	2a63      	cmp	r2, #99	; 0x63
 8006c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	dcf1      	bgt.n	8006c82 <__exponent+0x22>
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca8:	1c44      	adds	r4, r0, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	4561      	cmp	r1, ip
 8006cae:	d30a      	bcc.n	8006cc6 <__exponent+0x66>
 8006cb0:	f10d 0209 	add.w	r2, sp, #9
 8006cb4:	eba2 020e 	sub.w	r2, r2, lr
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	bf88      	it	hi
 8006cbc:	2200      	movhi	r2, #0
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1a18      	subs	r0, r3, r0
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cce:	e7ed      	b.n	8006cac <__exponent+0x4c>
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	7083      	strb	r3, [r0, #2]
 8006cd6:	70c1      	strb	r1, [r0, #3]
 8006cd8:	1d03      	adds	r3, r0, #4
 8006cda:	e7f1      	b.n	8006cc0 <__exponent+0x60>

08006cdc <_printf_float>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	; 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f001 fa57 	bl	80081a4 <_localeconv_r>
 8006cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa68 	bl	80001d0 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	; 0x28
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	f8c8 2000 	str.w	r2, [r8]
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <_printf_float+0x2dc>)
 8006d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 fef3 	bl	8000b2c <__aeabi_dcmpun>
 8006d46:	bb88      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4c:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <_printf_float+0x2dc>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	f7f9 fecd 	bl	8000af0 <__aeabi_dcmple>
 8006d56:	bb48      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 febc 	bl	8000adc <__aeabi_dcmplt>
 8006d64:	b110      	cbz	r0, 8006d6c <_printf_float+0x90>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <_printf_float+0x2e0>)
 8006d6e:	4894      	ldr	r0, [pc, #592]	; (8006fc0 <_printf_float+0x2e4>)
 8006d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d74:	bf94      	ite	ls
 8006d76:	4698      	movls	r8, r3
 8006d78:	4680      	movhi	r8, r0
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	f023 0204 	bic.w	r2, r3, #4
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f9d8 	bl	8007148 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f040 8090 	bne.w	8006ebe <_printf_float+0x1e2>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b00d      	add	sp, #52	; 0x34
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 feba 	bl	8000b2c <__aeabi_dcmpun>
 8006db8:	b140      	cbz	r0, 8006dcc <_printf_float+0xf0>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	232d      	movlt	r3, #45	; 0x2d
 8006dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc6:	487f      	ldr	r0, [pc, #508]	; (8006fc4 <_printf_float+0x2e8>)
 8006dc8:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <_printf_float+0x2ec>)
 8006dca:	e7d1      	b.n	8006d70 <_printf_float+0x94>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dd2:	9206      	str	r2, [sp, #24]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	d13f      	bne.n	8006e58 <_printf_float+0x17c>
 8006dd8:	2306      	movs	r3, #6
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dee:	ab09      	add	r3, sp, #36	; 0x24
 8006df0:	ec49 8b10 	vmov	d0, r8, r9
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff fecd 	bl	8006b9c <__cvt>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	2b47      	cmp	r3, #71	; 0x47
 8006e08:	4680      	mov	r8, r0
 8006e0a:	d108      	bne.n	8006e1e <_printf_float+0x142>
 8006e0c:	1cc8      	adds	r0, r1, #3
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x13a>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	dd41      	ble.n	8006e9a <_printf_float+0x1be>
 8006e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e22:	d820      	bhi.n	8006e66 <_printf_float+0x18a>
 8006e24:	3901      	subs	r1, #1
 8006e26:	465a      	mov	r2, fp
 8006e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2e:	f7ff ff17 	bl	8006c60 <__exponent>
 8006e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e34:	1813      	adds	r3, r2, r0
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	dc02      	bgt.n	8006e44 <_printf_float+0x168>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	07d2      	lsls	r2, r2, #31
 8006e42:	d501      	bpl.n	8006e48 <_printf_float+0x16c>
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d09c      	beq.n	8006d8a <_printf_float+0xae>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e798      	b.n	8006d8a <_printf_float+0xae>
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2a47      	cmp	r2, #71	; 0x47
 8006e5c:	d1be      	bne.n	8006ddc <_printf_float+0x100>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bc      	bne.n	8006ddc <_printf_float+0x100>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0xfe>
 8006e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e6a:	d118      	bne.n	8006e9e <_printf_float+0x1c2>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	dd0b      	ble.n	8006e8a <_printf_float+0x1ae>
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	b913      	cbnz	r3, 8006e7c <_printf_float+0x1a0>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e84:	f04f 0900 	mov.w	r9, #0
 8006e88:	e7de      	b.n	8006e48 <_printf_float+0x16c>
 8006e8a:	b913      	cbnz	r3, 8006e92 <_printf_float+0x1b6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d2      	lsls	r2, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x1ba>
 8006e92:	3302      	adds	r3, #2
 8006e94:	e7f4      	b.n	8006e80 <_printf_float+0x1a4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7f2      	b.n	8006e80 <_printf_float+0x1a4>
 8006e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	db05      	blt.n	8006eb0 <_printf_float+0x1d4>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	07d8      	lsls	r0, r3, #31
 8006eaa:	d5ea      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006eac:	1c4b      	adds	r3, r1, #1
 8006eae:	e7e7      	b.n	8006e80 <_printf_float+0x1a4>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfd4      	ite	le
 8006eb4:	f1c1 0202 	rsble	r2, r1, #2
 8006eb8:	2201      	movgt	r2, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	e7e0      	b.n	8006e80 <_printf_float+0x1a4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	055a      	lsls	r2, r3, #21
 8006ec2:	d407      	bmi.n	8006ed4 <_printf_float+0x1f8>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d12c      	bne.n	8006f2c <_printf_float+0x250>
 8006ed2:	e764      	b.n	8006d9e <_printf_float+0xc2>
 8006ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed8:	f240 80e0 	bls.w	800709c <_printf_float+0x3c0>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d034      	beq.n	8006f56 <_printf_float+0x27a>
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <_printf_float+0x2f0>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af51 	beq.w	8006d9e <_printf_float+0xc2>
 8006efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db02      	blt.n	8006f0a <_printf_float+0x22e>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07d8      	lsls	r0, r3, #31
 8006f08:	d510      	bpl.n	8006f2c <_printf_float+0x250>
 8006f0a:	ee18 3a10 	vmov	r3, s16
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af41 	beq.w	8006d9e <_printf_float+0xc2>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	f104 091a 	add.w	r9, r4, #26
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	dc09      	bgt.n	8006f40 <_printf_float+0x264>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	f100 8105 	bmi.w	800713e <_printf_float+0x462>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e730      	b.n	8006da2 <_printf_float+0xc6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	464a      	mov	r2, r9
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af27 	beq.w	8006d9e <_printf_float+0xc2>
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	e7e6      	b.n	8006f24 <_printf_float+0x248>
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc39      	bgt.n	8006fd0 <_printf_float+0x2f4>
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <_printf_float+0x2f0>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af19 	beq.w	8006d9e <_printf_float+0xc2>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d102      	bne.n	8006f7a <_printf_float+0x29e>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5d8      	bpl.n	8006f2c <_printf_float+0x250>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af09 	beq.w	8006d9e <_printf_float+0xc2>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f104 0a1a 	add.w	sl, r4, #26
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	425b      	negs	r3, r3
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	dc01      	bgt.n	8006fa0 <_printf_float+0x2c4>
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	e792      	b.n	8006ec6 <_printf_float+0x1ea>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aef7 	beq.w	8006d9e <_printf_float+0xc2>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7ee      	b.n	8006f94 <_printf_float+0x2b8>
 8006fb6:	bf00      	nop
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	0800b5c4 	.word	0x0800b5c4
 8006fc0:	0800b5c8 	.word	0x0800b5c8
 8006fc4:	0800b5d0 	.word	0x0800b5d0
 8006fc8:	0800b5cc 	.word	0x0800b5cc
 8006fcc:	0800b5d4 	.word	0x0800b5d4
 8006fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa8      	it	ge
 8006fd8:	461a      	movge	r2, r3
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	4691      	mov	r9, r2
 8006fde:	dc37      	bgt.n	8007050 <_printf_float+0x374>
 8006fe0:	f04f 0b00 	mov.w	fp, #0
 8006fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe8:	f104 021a 	add.w	r2, r4, #26
 8006fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	455b      	cmp	r3, fp
 8006ff6:	dc33      	bgt.n	8007060 <_printf_float+0x384>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db3b      	blt.n	8007078 <_printf_float+0x39c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d438      	bmi.n	8007078 <_printf_float+0x39c>
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	9a05      	ldr	r2, [sp, #20]
 800700a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700c:	1a9a      	subs	r2, r3, r2
 800700e:	eba3 0901 	sub.w	r9, r3, r1
 8007012:	4591      	cmp	r9, r2
 8007014:	bfa8      	it	ge
 8007016:	4691      	movge	r9, r2
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	dc35      	bgt.n	800708a <_printf_float+0x3ae>
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	eba3 0309 	sub.w	r3, r3, r9
 8007034:	4543      	cmp	r3, r8
 8007036:	f77f af79 	ble.w	8006f2c <_printf_float+0x250>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f aeaa 	beq.w	8006d9e <_printf_float+0xc2>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7ec      	b.n	800702a <_printf_float+0x34e>
 8007050:	4613      	mov	r3, r2
 8007052:	4631      	mov	r1, r6
 8007054:	4642      	mov	r2, r8
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c0      	bne.n	8006fe0 <_printf_float+0x304>
 800705e:	e69e      	b.n	8006d9e <_printf_float+0xc2>
 8007060:	2301      	movs	r3, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	9205      	str	r2, [sp, #20]
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae97 	beq.w	8006d9e <_printf_float+0xc2>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	e7b9      	b.n	8006fec <_printf_float+0x310>
 8007078:	ee18 3a10 	vmov	r3, s16
 800707c:	4652      	mov	r2, sl
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d1be      	bne.n	8007006 <_printf_float+0x32a>
 8007088:	e689      	b.n	8006d9e <_printf_float+0xc2>
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	464b      	mov	r3, r9
 800708e:	4442      	add	r2, r8
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c1      	bne.n	800701e <_printf_float+0x342>
 800709a:	e680      	b.n	8006d9e <_printf_float+0xc2>
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	2a01      	cmp	r2, #1
 80070a0:	dc01      	bgt.n	80070a6 <_printf_float+0x3ca>
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d538      	bpl.n	8007118 <_printf_float+0x43c>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4642      	mov	r2, r8
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae74 	beq.w	8006d9e <_printf_float+0xc2>
 80070b6:	ee18 3a10 	vmov	r3, s16
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae6b 	beq.w	8006d9e <_printf_float+0xc2>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80070d4:	b9d8      	cbnz	r0, 800710e <_printf_float+0x432>
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	f108 0201 	add.w	r2, r8, #1
 80070dc:	3b01      	subs	r3, #1
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	d10e      	bne.n	8007106 <_printf_float+0x42a>
 80070e8:	e659      	b.n	8006d9e <_printf_float+0xc2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae52 	beq.w	8006d9e <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	4543      	cmp	r3, r8
 8007104:	dcf1      	bgt.n	80070ea <_printf_float+0x40e>
 8007106:	464b      	mov	r3, r9
 8007108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800710c:	e6dc      	b.n	8006ec8 <_printf_float+0x1ec>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e7f2      	b.n	80070fe <_printf_float+0x422>
 8007118:	2301      	movs	r3, #1
 800711a:	4642      	mov	r2, r8
 800711c:	e7df      	b.n	80070de <_printf_float+0x402>
 800711e:	2301      	movs	r3, #1
 8007120:	464a      	mov	r2, r9
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae38 	beq.w	8006d9e <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	4543      	cmp	r3, r8
 800713a:	dcf0      	bgt.n	800711e <_printf_float+0x442>
 800713c:	e6fa      	b.n	8006f34 <_printf_float+0x258>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	f104 0919 	add.w	r9, r4, #25
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x456>

08007148 <_printf_common>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	4616      	mov	r6, r2
 800714e:	4699      	mov	r9, r3
 8007150:	688a      	ldr	r2, [r1, #8]
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007158:	4293      	cmp	r3, r2
 800715a:	bfb8      	it	lt
 800715c:	4613      	movlt	r3, r2
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007164:	4607      	mov	r7, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b10a      	cbz	r2, 800716e <_printf_common+0x26>
 800716a:	3301      	adds	r3, #1
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	6833      	ldrmi	r3, [r6, #0]
 8007176:	3302      	addmi	r3, #2
 8007178:	6033      	strmi	r3, [r6, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d106      	bne.n	8007190 <_printf_common+0x48>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	42ab      	cmp	r3, r5
 800718e:	dc26      	bgt.n	80071de <_printf_common+0x96>
 8007190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007194:	1e13      	subs	r3, r2, #0
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	2301      	movne	r3, #1
 800719c:	0692      	lsls	r2, r2, #26
 800719e:	d42b      	bmi.n	80071f8 <_printf_common+0xb0>
 80071a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a4:	4649      	mov	r1, r9
 80071a6:	4638      	mov	r0, r7
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d01e      	beq.n	80071ec <_printf_common+0xa4>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	f003 0306 	and.w	r3, r3, #6
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	bf08      	it	eq
 80071bc:	1aad      	subeq	r5, r5, r2
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	bf0c      	ite	eq
 80071c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c8:	2500      	movne	r5, #0
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bfc4      	itt	gt
 80071ce:	1a9b      	subgt	r3, r3, r2
 80071d0:	18ed      	addgt	r5, r5, r3
 80071d2:	2600      	movs	r6, #0
 80071d4:	341a      	adds	r4, #26
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	d11a      	bne.n	8007210 <_printf_common+0xc8>
 80071da:	2000      	movs	r0, #0
 80071dc:	e008      	b.n	80071f0 <_printf_common+0xa8>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4649      	mov	r1, r9
 80071e4:	4638      	mov	r0, r7
 80071e6:	47c0      	blx	r8
 80071e8:	3001      	adds	r0, #1
 80071ea:	d103      	bne.n	80071f4 <_printf_common+0xac>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7c6      	b.n	8007186 <_printf_common+0x3e>
 80071f8:	18e1      	adds	r1, r4, r3
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	2030      	movs	r0, #48	; 0x30
 80071fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007202:	4422      	add	r2, r4
 8007204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720c:	3302      	adds	r3, #2
 800720e:	e7c7      	b.n	80071a0 <_printf_common+0x58>
 8007210:	2301      	movs	r3, #1
 8007212:	4622      	mov	r2, r4
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d0e6      	beq.n	80071ec <_printf_common+0xa4>
 800721e:	3601      	adds	r6, #1
 8007220:	e7d9      	b.n	80071d6 <_printf_common+0x8e>
	...

08007224 <_printf_i>:
 8007224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	7e0f      	ldrb	r7, [r1, #24]
 800722a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800722c:	2f78      	cmp	r7, #120	; 0x78
 800722e:	4691      	mov	r9, r2
 8007230:	4680      	mov	r8, r0
 8007232:	460c      	mov	r4, r1
 8007234:	469a      	mov	sl, r3
 8007236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800723a:	d807      	bhi.n	800724c <_printf_i+0x28>
 800723c:	2f62      	cmp	r7, #98	; 0x62
 800723e:	d80a      	bhi.n	8007256 <_printf_i+0x32>
 8007240:	2f00      	cmp	r7, #0
 8007242:	f000 80d8 	beq.w	80073f6 <_printf_i+0x1d2>
 8007246:	2f58      	cmp	r7, #88	; 0x58
 8007248:	f000 80a3 	beq.w	8007392 <_printf_i+0x16e>
 800724c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007254:	e03a      	b.n	80072cc <_printf_i+0xa8>
 8007256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800725a:	2b15      	cmp	r3, #21
 800725c:	d8f6      	bhi.n	800724c <_printf_i+0x28>
 800725e:	a101      	add	r1, pc, #4	; (adr r1, 8007264 <_printf_i+0x40>)
 8007260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d1 	.word	0x080072d1
 800726c:	0800724d 	.word	0x0800724d
 8007270:	0800724d 	.word	0x0800724d
 8007274:	0800724d 	.word	0x0800724d
 8007278:	0800724d 	.word	0x0800724d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800724d 	.word	0x0800724d
 8007284:	0800724d 	.word	0x0800724d
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007301 	.word	0x08007301
 8007298:	080073bf 	.word	0x080073bf
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073ff 	.word	0x080073ff
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	08007301 	.word	0x08007301
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	080073c7 	.word	0x080073c7
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0a3      	b.n	8007418 <_printf_i+0x1f4>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	6829      	ldr	r1, [r5, #0]
 80072d4:	0606      	lsls	r6, r0, #24
 80072d6:	f101 0304 	add.w	r3, r1, #4
 80072da:	d50a      	bpl.n	80072f2 <_printf_i+0xce>
 80072dc:	680e      	ldr	r6, [r1, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	da03      	bge.n	80072ec <_printf_i+0xc8>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	4276      	negs	r6, r6
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_printf_i+0x244>)
 80072ee:	230a      	movs	r3, #10
 80072f0:	e019      	b.n	8007326 <_printf_i+0x102>
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072fa:	bf18      	it	ne
 80072fc:	b236      	sxthne	r6, r6
 80072fe:	e7ef      	b.n	80072e0 <_printf_i+0xbc>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	6029      	str	r1, [r5, #0]
 8007308:	0601      	lsls	r1, r0, #24
 800730a:	d501      	bpl.n	8007310 <_printf_i+0xec>
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0xf2>
 8007310:	0646      	lsls	r6, r0, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0xe8>
 8007314:	881e      	ldrh	r6, [r3, #0]
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <_printf_i+0x244>)
 8007318:	2f6f      	cmp	r7, #111	; 0x6f
 800731a:	bf0c      	ite	eq
 800731c:	2308      	moveq	r3, #8
 800731e:	230a      	movne	r3, #10
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007326:	6865      	ldr	r5, [r4, #4]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	2d00      	cmp	r5, #0
 800732c:	bfa2      	ittt	ge
 800732e:	6821      	ldrge	r1, [r4, #0]
 8007330:	f021 0104 	bicge.w	r1, r1, #4
 8007334:	6021      	strge	r1, [r4, #0]
 8007336:	b90e      	cbnz	r6, 800733c <_printf_i+0x118>
 8007338:	2d00      	cmp	r5, #0
 800733a:	d04d      	beq.n	80073d8 <_printf_i+0x1b4>
 800733c:	4615      	mov	r5, r2
 800733e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007342:	fb03 6711 	mls	r7, r3, r1, r6
 8007346:	5dc7      	ldrb	r7, [r0, r7]
 8007348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800734c:	4637      	mov	r7, r6
 800734e:	42bb      	cmp	r3, r7
 8007350:	460e      	mov	r6, r1
 8007352:	d9f4      	bls.n	800733e <_printf_i+0x11a>
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10b      	bne.n	8007370 <_printf_i+0x14c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07de      	lsls	r6, r3, #31
 800735c:	d508      	bpl.n	8007370 <_printf_i+0x14c>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4299      	cmp	r1, r3
 8007364:	bfde      	ittt	le
 8007366:	2330      	movle	r3, #48	; 0x30
 8007368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800736c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007370:	1b52      	subs	r2, r2, r5
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	f8cd a000 	str.w	sl, [sp]
 8007378:	464b      	mov	r3, r9
 800737a:	aa03      	add	r2, sp, #12
 800737c:	4621      	mov	r1, r4
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff fee2 	bl	8007148 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	d14c      	bne.n	8007422 <_printf_i+0x1fe>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b004      	add	sp, #16
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4835      	ldr	r0, [pc, #212]	; (8007468 <_printf_i+0x244>)
 8007394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f851 6b04 	ldr.w	r6, [r1], #4
 80073a0:	6029      	str	r1, [r5, #0]
 80073a2:	061d      	lsls	r5, r3, #24
 80073a4:	d514      	bpl.n	80073d0 <_printf_i+0x1ac>
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	bf44      	itt	mi
 80073aa:	f043 0320 	orrmi.w	r3, r3, #32
 80073ae:	6023      	strmi	r3, [r4, #0]
 80073b0:	b91e      	cbnz	r6, 80073ba <_printf_i+0x196>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f023 0320 	bic.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2310      	movs	r3, #16
 80073bc:	e7b0      	b.n	8007320 <_printf_i+0xfc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2378      	movs	r3, #120	; 0x78
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_printf_i+0x248>)
 80073ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ce:	e7e3      	b.n	8007398 <_printf_i+0x174>
 80073d0:	0659      	lsls	r1, r3, #25
 80073d2:	bf48      	it	mi
 80073d4:	b2b6      	uxthmi	r6, r6
 80073d6:	e7e6      	b.n	80073a6 <_printf_i+0x182>
 80073d8:	4615      	mov	r5, r2
 80073da:	e7bb      	b.n	8007354 <_printf_i+0x130>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	6826      	ldr	r6, [r4, #0]
 80073e0:	6961      	ldr	r1, [r4, #20]
 80073e2:	1d18      	adds	r0, r3, #4
 80073e4:	6028      	str	r0, [r5, #0]
 80073e6:	0635      	lsls	r5, r6, #24
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x1cc>
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1d2>
 80073f0:	0670      	lsls	r0, r6, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x1c8>
 80073f4:	8019      	strh	r1, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	4615      	mov	r5, r2
 80073fc:	e7ba      	b.n	8007374 <_printf_i+0x150>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	2100      	movs	r1, #0
 800740a:	4628      	mov	r0, r5
 800740c:	f7f8 fee8 	bl	80001e0 <memchr>
 8007410:	b108      	cbz	r0, 8007416 <_printf_i+0x1f2>
 8007412:	1b40      	subs	r0, r0, r5
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	e7a8      	b.n	8007374 <_printf_i+0x150>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	462a      	mov	r2, r5
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d0ab      	beq.n	8007388 <_printf_i+0x164>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	079b      	lsls	r3, r3, #30
 8007434:	d413      	bmi.n	800745e <_printf_i+0x23a>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	4298      	cmp	r0, r3
 800743c:	bfb8      	it	lt
 800743e:	4618      	movlt	r0, r3
 8007440:	e7a4      	b.n	800738c <_printf_i+0x168>
 8007442:	2301      	movs	r3, #1
 8007444:	4632      	mov	r2, r6
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	47d0      	blx	sl
 800744c:	3001      	adds	r0, #1
 800744e:	d09b      	beq.n	8007388 <_printf_i+0x164>
 8007450:	3501      	adds	r5, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	9903      	ldr	r1, [sp, #12]
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	42ab      	cmp	r3, r5
 800745a:	dcf2      	bgt.n	8007442 <_printf_i+0x21e>
 800745c:	e7eb      	b.n	8007436 <_printf_i+0x212>
 800745e:	2500      	movs	r5, #0
 8007460:	f104 0619 	add.w	r6, r4, #25
 8007464:	e7f5      	b.n	8007452 <_printf_i+0x22e>
 8007466:	bf00      	nop
 8007468:	0800b5d6 	.word	0x0800b5d6
 800746c:	0800b5e7 	.word	0x0800b5e7

08007470 <siprintf>:
 8007470:	b40e      	push	{r1, r2, r3}
 8007472:	b500      	push	{lr}
 8007474:	b09c      	sub	sp, #112	; 0x70
 8007476:	ab1d      	add	r3, sp, #116	; 0x74
 8007478:	9002      	str	r0, [sp, #8]
 800747a:	9006      	str	r0, [sp, #24]
 800747c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007480:	4809      	ldr	r0, [pc, #36]	; (80074a8 <siprintf+0x38>)
 8007482:	9107      	str	r1, [sp, #28]
 8007484:	9104      	str	r1, [sp, #16]
 8007486:	4909      	ldr	r1, [pc, #36]	; (80074ac <siprintf+0x3c>)
 8007488:	f853 2b04 	ldr.w	r2, [r3], #4
 800748c:	9105      	str	r1, [sp, #20]
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	a902      	add	r1, sp, #8
 8007494:	f001 fb76 	bl	8008b84 <_svfiprintf_r>
 8007498:	9b02      	ldr	r3, [sp, #8]
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	b01c      	add	sp, #112	; 0x70
 80074a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a4:	b003      	add	sp, #12
 80074a6:	4770      	bx	lr
 80074a8:	20000014 	.word	0x20000014
 80074ac:	ffff0208 	.word	0xffff0208

080074b0 <quorem>:
 80074b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	6903      	ldr	r3, [r0, #16]
 80074b6:	690c      	ldr	r4, [r1, #16]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	4607      	mov	r7, r0
 80074bc:	f2c0 8081 	blt.w	80075c2 <quorem+0x112>
 80074c0:	3c01      	subs	r4, #1
 80074c2:	f101 0814 	add.w	r8, r1, #20
 80074c6:	f100 0514 	add.w	r5, r0, #20
 80074ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074d8:	3301      	adds	r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074e8:	d331      	bcc.n	800754e <quorem+0x9e>
 80074ea:	f04f 0e00 	mov.w	lr, #0
 80074ee:	4640      	mov	r0, r8
 80074f0:	46ac      	mov	ip, r5
 80074f2:	46f2      	mov	sl, lr
 80074f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074f8:	b293      	uxth	r3, r2
 80074fa:	fb06 e303 	mla	r3, r6, r3, lr
 80074fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007502:	b29b      	uxth	r3, r3
 8007504:	ebaa 0303 	sub.w	r3, sl, r3
 8007508:	f8dc a000 	ldr.w	sl, [ip]
 800750c:	0c12      	lsrs	r2, r2, #16
 800750e:	fa13 f38a 	uxtah	r3, r3, sl
 8007512:	fb06 e202 	mla	r2, r6, r2, lr
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	9b00      	ldr	r3, [sp, #0]
 800751a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800751e:	b292      	uxth	r2, r2
 8007520:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007528:	f8bd 3000 	ldrh.w	r3, [sp]
 800752c:	4581      	cmp	r9, r0
 800752e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007532:	f84c 3b04 	str.w	r3, [ip], #4
 8007536:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800753a:	d2db      	bcs.n	80074f4 <quorem+0x44>
 800753c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007540:	b92b      	cbnz	r3, 800754e <quorem+0x9e>
 8007542:	9b01      	ldr	r3, [sp, #4]
 8007544:	3b04      	subs	r3, #4
 8007546:	429d      	cmp	r5, r3
 8007548:	461a      	mov	r2, r3
 800754a:	d32e      	bcc.n	80075aa <quorem+0xfa>
 800754c:	613c      	str	r4, [r7, #16]
 800754e:	4638      	mov	r0, r7
 8007550:	f001 f8c4 	bl	80086dc <__mcmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	db24      	blt.n	80075a2 <quorem+0xf2>
 8007558:	3601      	adds	r6, #1
 800755a:	4628      	mov	r0, r5
 800755c:	f04f 0c00 	mov.w	ip, #0
 8007560:	f858 2b04 	ldr.w	r2, [r8], #4
 8007564:	f8d0 e000 	ldr.w	lr, [r0]
 8007568:	b293      	uxth	r3, r2
 800756a:	ebac 0303 	sub.w	r3, ip, r3
 800756e:	0c12      	lsrs	r2, r2, #16
 8007570:	fa13 f38e 	uxtah	r3, r3, lr
 8007574:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007582:	45c1      	cmp	r9, r8
 8007584:	f840 3b04 	str.w	r3, [r0], #4
 8007588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800758c:	d2e8      	bcs.n	8007560 <quorem+0xb0>
 800758e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007596:	b922      	cbnz	r2, 80075a2 <quorem+0xf2>
 8007598:	3b04      	subs	r3, #4
 800759a:	429d      	cmp	r5, r3
 800759c:	461a      	mov	r2, r3
 800759e:	d30a      	bcc.n	80075b6 <quorem+0x106>
 80075a0:	613c      	str	r4, [r7, #16]
 80075a2:	4630      	mov	r0, r6
 80075a4:	b003      	add	sp, #12
 80075a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	3b04      	subs	r3, #4
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	d1cc      	bne.n	800754c <quorem+0x9c>
 80075b2:	3c01      	subs	r4, #1
 80075b4:	e7c7      	b.n	8007546 <quorem+0x96>
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	3b04      	subs	r3, #4
 80075ba:	2a00      	cmp	r2, #0
 80075bc:	d1f0      	bne.n	80075a0 <quorem+0xf0>
 80075be:	3c01      	subs	r4, #1
 80075c0:	e7eb      	b.n	800759a <quorem+0xea>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e7ee      	b.n	80075a4 <quorem+0xf4>
	...

080075c8 <_dtoa_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	ed2d 8b04 	vpush	{d8-d9}
 80075d0:	ec57 6b10 	vmov	r6, r7, d0
 80075d4:	b093      	sub	sp, #76	; 0x4c
 80075d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075dc:	9106      	str	r1, [sp, #24]
 80075de:	ee10 aa10 	vmov	sl, s0
 80075e2:	4604      	mov	r4, r0
 80075e4:	9209      	str	r2, [sp, #36]	; 0x24
 80075e6:	930c      	str	r3, [sp, #48]	; 0x30
 80075e8:	46bb      	mov	fp, r7
 80075ea:	b975      	cbnz	r5, 800760a <_dtoa_r+0x42>
 80075ec:	2010      	movs	r0, #16
 80075ee:	f000 fddd 	bl	80081ac <malloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	6260      	str	r0, [r4, #36]	; 0x24
 80075f6:	b920      	cbnz	r0, 8007602 <_dtoa_r+0x3a>
 80075f8:	4ba7      	ldr	r3, [pc, #668]	; (8007898 <_dtoa_r+0x2d0>)
 80075fa:	21ea      	movs	r1, #234	; 0xea
 80075fc:	48a7      	ldr	r0, [pc, #668]	; (800789c <_dtoa_r+0x2d4>)
 80075fe:	f001 fbd1 	bl	8008da4 <__assert_func>
 8007602:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007606:	6005      	str	r5, [r0, #0]
 8007608:	60c5      	str	r5, [r0, #12]
 800760a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	b151      	cbz	r1, 8007626 <_dtoa_r+0x5e>
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	604a      	str	r2, [r1, #4]
 8007614:	2301      	movs	r3, #1
 8007616:	4093      	lsls	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fe1c 	bl	8008258 <_Bfree>
 8007620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	1e3b      	subs	r3, r7, #0
 8007628:	bfaa      	itet	ge
 800762a:	2300      	movge	r3, #0
 800762c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007630:	f8c8 3000 	strge.w	r3, [r8]
 8007634:	4b9a      	ldr	r3, [pc, #616]	; (80078a0 <_dtoa_r+0x2d8>)
 8007636:	bfbc      	itt	lt
 8007638:	2201      	movlt	r2, #1
 800763a:	f8c8 2000 	strlt.w	r2, [r8]
 800763e:	ea33 030b 	bics.w	r3, r3, fp
 8007642:	d11b      	bne.n	800767c <_dtoa_r+0xb4>
 8007644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007646:	f242 730f 	movw	r3, #9999	; 0x270f
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007650:	4333      	orrs	r3, r6
 8007652:	f000 8592 	beq.w	800817a <_dtoa_r+0xbb2>
 8007656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007658:	b963      	cbnz	r3, 8007674 <_dtoa_r+0xac>
 800765a:	4b92      	ldr	r3, [pc, #584]	; (80078a4 <_dtoa_r+0x2dc>)
 800765c:	e022      	b.n	80076a4 <_dtoa_r+0xdc>
 800765e:	4b92      	ldr	r3, [pc, #584]	; (80078a8 <_dtoa_r+0x2e0>)
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	3308      	adds	r3, #8
 8007664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	9801      	ldr	r0, [sp, #4]
 800766a:	b013      	add	sp, #76	; 0x4c
 800766c:	ecbd 8b04 	vpop	{d8-d9}
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	4b8b      	ldr	r3, [pc, #556]	; (80078a4 <_dtoa_r+0x2dc>)
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	3303      	adds	r3, #3
 800767a:	e7f3      	b.n	8007664 <_dtoa_r+0x9c>
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	4650      	mov	r0, sl
 8007682:	4659      	mov	r1, fp
 8007684:	f7f9 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007688:	ec4b ab19 	vmov	d9, sl, fp
 800768c:	4680      	mov	r8, r0
 800768e:	b158      	cbz	r0, 80076a8 <_dtoa_r+0xe0>
 8007690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007692:	2301      	movs	r3, #1
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 856b 	beq.w	8008174 <_dtoa_r+0xbac>
 800769e:	4883      	ldr	r0, [pc, #524]	; (80078ac <_dtoa_r+0x2e4>)
 80076a0:	6018      	str	r0, [r3, #0]
 80076a2:	1e43      	subs	r3, r0, #1
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	e7df      	b.n	8007668 <_dtoa_r+0xa0>
 80076a8:	ec4b ab10 	vmov	d0, sl, fp
 80076ac:	aa10      	add	r2, sp, #64	; 0x40
 80076ae:	a911      	add	r1, sp, #68	; 0x44
 80076b0:	4620      	mov	r0, r4
 80076b2:	f001 f8b9 	bl	8008828 <__d2b>
 80076b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076ba:	ee08 0a10 	vmov	s16, r0
 80076be:	2d00      	cmp	r5, #0
 80076c0:	f000 8084 	beq.w	80077cc <_dtoa_r+0x204>
 80076c4:	ee19 3a90 	vmov	r3, s19
 80076c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076d0:	4656      	mov	r6, sl
 80076d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80076de:	4b74      	ldr	r3, [pc, #464]	; (80078b0 <_dtoa_r+0x2e8>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	4630      	mov	r0, r6
 80076e4:	4639      	mov	r1, r7
 80076e6:	f7f8 fdcf 	bl	8000288 <__aeabi_dsub>
 80076ea:	a365      	add	r3, pc, #404	; (adr r3, 8007880 <_dtoa_r+0x2b8>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f7f8 ff82 	bl	80005f8 <__aeabi_dmul>
 80076f4:	a364      	add	r3, pc, #400	; (adr r3, 8007888 <_dtoa_r+0x2c0>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f8 fdc7 	bl	800028c <__adddf3>
 80076fe:	4606      	mov	r6, r0
 8007700:	4628      	mov	r0, r5
 8007702:	460f      	mov	r7, r1
 8007704:	f7f8 ff0e 	bl	8000524 <__aeabi_i2d>
 8007708:	a361      	add	r3, pc, #388	; (adr r3, 8007890 <_dtoa_r+0x2c8>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f8 fdb7 	bl	800028c <__adddf3>
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	f7f9 fa19 	bl	8000b58 <__aeabi_d2iz>
 8007726:	2200      	movs	r2, #0
 8007728:	9000      	str	r0, [sp, #0]
 800772a:	2300      	movs	r3, #0
 800772c:	4630      	mov	r0, r6
 800772e:	4639      	mov	r1, r7
 8007730:	f7f9 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8007734:	b150      	cbz	r0, 800774c <_dtoa_r+0x184>
 8007736:	9800      	ldr	r0, [sp, #0]
 8007738:	f7f8 fef4 	bl	8000524 <__aeabi_i2d>
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	f7f9 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007744:	b910      	cbnz	r0, 800774c <_dtoa_r+0x184>
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	3b01      	subs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	2b16      	cmp	r3, #22
 8007750:	d85a      	bhi.n	8007808 <_dtoa_r+0x240>
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	4b57      	ldr	r3, [pc, #348]	; (80078b4 <_dtoa_r+0x2ec>)
 8007756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	ec51 0b19 	vmov	r0, r1, d9
 8007762:	f7f9 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8007766:	2800      	cmp	r0, #0
 8007768:	d050      	beq.n	800780c <_dtoa_r+0x244>
 800776a:	9b00      	ldr	r3, [sp, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2300      	movs	r3, #0
 8007772:	930b      	str	r3, [sp, #44]	; 0x2c
 8007774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007776:	1b5d      	subs	r5, r3, r5
 8007778:	1e6b      	subs	r3, r5, #1
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	bf45      	ittet	mi
 800777e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007782:	9304      	strmi	r3, [sp, #16]
 8007784:	2300      	movpl	r3, #0
 8007786:	2300      	movmi	r3, #0
 8007788:	bf4c      	ite	mi
 800778a:	9305      	strmi	r3, [sp, #20]
 800778c:	9304      	strpl	r3, [sp, #16]
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	db3d      	blt.n	8007810 <_dtoa_r+0x248>
 8007794:	9b05      	ldr	r3, [sp, #20]
 8007796:	9a00      	ldr	r2, [sp, #0]
 8007798:	920a      	str	r2, [sp, #40]	; 0x28
 800779a:	4413      	add	r3, r2
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	2300      	movs	r3, #0
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	9b06      	ldr	r3, [sp, #24]
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	f200 8089 	bhi.w	80078bc <_dtoa_r+0x2f4>
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	bfc4      	itt	gt
 80077ae:	3b04      	subgt	r3, #4
 80077b0:	9306      	strgt	r3, [sp, #24]
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	f1a3 0302 	sub.w	r3, r3, #2
 80077b8:	bfcc      	ite	gt
 80077ba:	2500      	movgt	r5, #0
 80077bc:	2501      	movle	r5, #1
 80077be:	2b03      	cmp	r3, #3
 80077c0:	f200 8087 	bhi.w	80078d2 <_dtoa_r+0x30a>
 80077c4:	e8df f003 	tbb	[pc, r3]
 80077c8:	59383a2d 	.word	0x59383a2d
 80077cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077d0:	441d      	add	r5, r3
 80077d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	bfc1      	itttt	gt
 80077da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077ea:	bfda      	itte	le
 80077ec:	f1c3 0320 	rsble	r3, r3, #32
 80077f0:	fa06 f003 	lslle.w	r0, r6, r3
 80077f4:	4318      	orrgt	r0, r3
 80077f6:	f7f8 fe85 	bl	8000504 <__aeabi_ui2d>
 80077fa:	2301      	movs	r3, #1
 80077fc:	4606      	mov	r6, r0
 80077fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007802:	3d01      	subs	r5, #1
 8007804:	930e      	str	r3, [sp, #56]	; 0x38
 8007806:	e76a      	b.n	80076de <_dtoa_r+0x116>
 8007808:	2301      	movs	r3, #1
 800780a:	e7b2      	b.n	8007772 <_dtoa_r+0x1aa>
 800780c:	900b      	str	r0, [sp, #44]	; 0x2c
 800780e:	e7b1      	b.n	8007774 <_dtoa_r+0x1ac>
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	9a00      	ldr	r2, [sp, #0]
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	4253      	negs	r3, r2
 800781a:	9307      	str	r3, [sp, #28]
 800781c:	2300      	movs	r3, #0
 800781e:	930a      	str	r3, [sp, #40]	; 0x28
 8007820:	e7bf      	b.n	80077a2 <_dtoa_r+0x1da>
 8007822:	2300      	movs	r3, #0
 8007824:	9308      	str	r3, [sp, #32]
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	dc55      	bgt.n	80078d8 <_dtoa_r+0x310>
 800782c:	2301      	movs	r3, #1
 800782e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007832:	461a      	mov	r2, r3
 8007834:	9209      	str	r2, [sp, #36]	; 0x24
 8007836:	e00c      	b.n	8007852 <_dtoa_r+0x28a>
 8007838:	2301      	movs	r3, #1
 800783a:	e7f3      	b.n	8007824 <_dtoa_r+0x25c>
 800783c:	2300      	movs	r3, #0
 800783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	9b00      	ldr	r3, [sp, #0]
 8007844:	4413      	add	r3, r2
 8007846:	9302      	str	r3, [sp, #8]
 8007848:	3301      	adds	r3, #1
 800784a:	2b01      	cmp	r3, #1
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	bfb8      	it	lt
 8007850:	2301      	movlt	r3, #1
 8007852:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007854:	2200      	movs	r2, #0
 8007856:	6042      	str	r2, [r0, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	f102 0614 	add.w	r6, r2, #20
 800785e:	429e      	cmp	r6, r3
 8007860:	6841      	ldr	r1, [r0, #4]
 8007862:	d93d      	bls.n	80078e0 <_dtoa_r+0x318>
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fcb7 	bl	80081d8 <_Balloc>
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	2800      	cmp	r0, #0
 800786e:	d13b      	bne.n	80078e8 <_dtoa_r+0x320>
 8007870:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <_dtoa_r+0x2f0>)
 8007872:	4602      	mov	r2, r0
 8007874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007878:	e6c0      	b.n	80075fc <_dtoa_r+0x34>
 800787a:	2301      	movs	r3, #1
 800787c:	e7df      	b.n	800783e <_dtoa_r+0x276>
 800787e:	bf00      	nop
 8007880:	636f4361 	.word	0x636f4361
 8007884:	3fd287a7 	.word	0x3fd287a7
 8007888:	8b60c8b3 	.word	0x8b60c8b3
 800788c:	3fc68a28 	.word	0x3fc68a28
 8007890:	509f79fb 	.word	0x509f79fb
 8007894:	3fd34413 	.word	0x3fd34413
 8007898:	0800b605 	.word	0x0800b605
 800789c:	0800b61c 	.word	0x0800b61c
 80078a0:	7ff00000 	.word	0x7ff00000
 80078a4:	0800b601 	.word	0x0800b601
 80078a8:	0800b5f8 	.word	0x0800b5f8
 80078ac:	0800b5d5 	.word	0x0800b5d5
 80078b0:	3ff80000 	.word	0x3ff80000
 80078b4:	0800b710 	.word	0x0800b710
 80078b8:	0800b677 	.word	0x0800b677
 80078bc:	2501      	movs	r5, #1
 80078be:	2300      	movs	r3, #0
 80078c0:	9306      	str	r3, [sp, #24]
 80078c2:	9508      	str	r5, [sp, #32]
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
 80078c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2312      	movs	r3, #18
 80078d0:	e7b0      	b.n	8007834 <_dtoa_r+0x26c>
 80078d2:	2301      	movs	r3, #1
 80078d4:	9308      	str	r3, [sp, #32]
 80078d6:	e7f5      	b.n	80078c4 <_dtoa_r+0x2fc>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078de:	e7b8      	b.n	8007852 <_dtoa_r+0x28a>
 80078e0:	3101      	adds	r1, #1
 80078e2:	6041      	str	r1, [r0, #4]
 80078e4:	0052      	lsls	r2, r2, #1
 80078e6:	e7b8      	b.n	800785a <_dtoa_r+0x292>
 80078e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ea:	9a01      	ldr	r2, [sp, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	9b03      	ldr	r3, [sp, #12]
 80078f0:	2b0e      	cmp	r3, #14
 80078f2:	f200 809d 	bhi.w	8007a30 <_dtoa_r+0x468>
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f000 809a 	beq.w	8007a30 <_dtoa_r+0x468>
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dd32      	ble.n	8007968 <_dtoa_r+0x3a0>
 8007902:	4ab7      	ldr	r2, [pc, #732]	; (8007be0 <_dtoa_r+0x618>)
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800790c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007910:	9b00      	ldr	r3, [sp, #0]
 8007912:	05d8      	lsls	r0, r3, #23
 8007914:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007918:	d516      	bpl.n	8007948 <_dtoa_r+0x380>
 800791a:	4bb2      	ldr	r3, [pc, #712]	; (8007be4 <_dtoa_r+0x61c>)
 800791c:	ec51 0b19 	vmov	r0, r1, d9
 8007920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007924:	f7f8 ff92 	bl	800084c <__aeabi_ddiv>
 8007928:	f007 070f 	and.w	r7, r7, #15
 800792c:	4682      	mov	sl, r0
 800792e:	468b      	mov	fp, r1
 8007930:	2503      	movs	r5, #3
 8007932:	4eac      	ldr	r6, [pc, #688]	; (8007be4 <_dtoa_r+0x61c>)
 8007934:	b957      	cbnz	r7, 800794c <_dtoa_r+0x384>
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	4650      	mov	r0, sl
 800793c:	4659      	mov	r1, fp
 800793e:	f7f8 ff85 	bl	800084c <__aeabi_ddiv>
 8007942:	4682      	mov	sl, r0
 8007944:	468b      	mov	fp, r1
 8007946:	e028      	b.n	800799a <_dtoa_r+0x3d2>
 8007948:	2502      	movs	r5, #2
 800794a:	e7f2      	b.n	8007932 <_dtoa_r+0x36a>
 800794c:	07f9      	lsls	r1, r7, #31
 800794e:	d508      	bpl.n	8007962 <_dtoa_r+0x39a>
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007958:	f7f8 fe4e 	bl	80005f8 <__aeabi_dmul>
 800795c:	3501      	adds	r5, #1
 800795e:	4680      	mov	r8, r0
 8007960:	4689      	mov	r9, r1
 8007962:	107f      	asrs	r7, r7, #1
 8007964:	3608      	adds	r6, #8
 8007966:	e7e5      	b.n	8007934 <_dtoa_r+0x36c>
 8007968:	f000 809b 	beq.w	8007aa2 <_dtoa_r+0x4da>
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	4f9d      	ldr	r7, [pc, #628]	; (8007be4 <_dtoa_r+0x61c>)
 8007970:	425e      	negs	r6, r3
 8007972:	4b9b      	ldr	r3, [pc, #620]	; (8007be0 <_dtoa_r+0x618>)
 8007974:	f006 020f 	and.w	r2, r6, #15
 8007978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	ec51 0b19 	vmov	r0, r1, d9
 8007984:	f7f8 fe38 	bl	80005f8 <__aeabi_dmul>
 8007988:	1136      	asrs	r6, r6, #4
 800798a:	4682      	mov	sl, r0
 800798c:	468b      	mov	fp, r1
 800798e:	2300      	movs	r3, #0
 8007990:	2502      	movs	r5, #2
 8007992:	2e00      	cmp	r6, #0
 8007994:	d17a      	bne.n	8007a8c <_dtoa_r+0x4c4>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1d3      	bne.n	8007942 <_dtoa_r+0x37a>
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8082 	beq.w	8007aa6 <_dtoa_r+0x4de>
 80079a2:	4b91      	ldr	r3, [pc, #580]	; (8007be8 <_dtoa_r+0x620>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	f7f9 f897 	bl	8000adc <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d079      	beq.n	8007aa6 <_dtoa_r+0x4de>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d076      	beq.n	8007aa6 <_dtoa_r+0x4de>
 80079b8:	9b02      	ldr	r3, [sp, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd36      	ble.n	8007a2c <_dtoa_r+0x464>
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	4650      	mov	r0, sl
 80079c2:	4659      	mov	r1, fp
 80079c4:	1e5f      	subs	r7, r3, #1
 80079c6:	2200      	movs	r2, #0
 80079c8:	4b88      	ldr	r3, [pc, #544]	; (8007bec <_dtoa_r+0x624>)
 80079ca:	f7f8 fe15 	bl	80005f8 <__aeabi_dmul>
 80079ce:	9e02      	ldr	r6, [sp, #8]
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	3501      	adds	r5, #1
 80079d6:	4628      	mov	r0, r5
 80079d8:	f7f8 fda4 	bl	8000524 <__aeabi_i2d>
 80079dc:	4652      	mov	r2, sl
 80079de:	465b      	mov	r3, fp
 80079e0:	f7f8 fe0a 	bl	80005f8 <__aeabi_dmul>
 80079e4:	4b82      	ldr	r3, [pc, #520]	; (8007bf0 <_dtoa_r+0x628>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	f7f8 fc50 	bl	800028c <__adddf3>
 80079ec:	46d0      	mov	r8, sl
 80079ee:	46d9      	mov	r9, fp
 80079f0:	4682      	mov	sl, r0
 80079f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	d158      	bne.n	8007aac <_dtoa_r+0x4e4>
 80079fa:	4b7e      	ldr	r3, [pc, #504]	; (8007bf4 <_dtoa_r+0x62c>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	4640      	mov	r0, r8
 8007a00:	4649      	mov	r1, r9
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	4652      	mov	r2, sl
 8007a08:	465b      	mov	r3, fp
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	f7f9 f883 	bl	8000b18 <__aeabi_dcmpgt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f040 8295 	bne.w	8007f42 <_dtoa_r+0x97a>
 8007a18:	4652      	mov	r2, sl
 8007a1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a1e:	4640      	mov	r0, r8
 8007a20:	4649      	mov	r1, r9
 8007a22:	f7f9 f85b 	bl	8000adc <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f040 8289 	bne.w	8007f3e <_dtoa_r+0x976>
 8007a2c:	ec5b ab19 	vmov	sl, fp, d9
 8007a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f2c0 8148 	blt.w	8007cc8 <_dtoa_r+0x700>
 8007a38:	9a00      	ldr	r2, [sp, #0]
 8007a3a:	2a0e      	cmp	r2, #14
 8007a3c:	f300 8144 	bgt.w	8007cc8 <_dtoa_r+0x700>
 8007a40:	4b67      	ldr	r3, [pc, #412]	; (8007be0 <_dtoa_r+0x618>)
 8007a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f280 80d5 	bge.w	8007bfc <_dtoa_r+0x634>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f300 80d1 	bgt.w	8007bfc <_dtoa_r+0x634>
 8007a5a:	f040 826f 	bne.w	8007f3c <_dtoa_r+0x974>
 8007a5e:	4b65      	ldr	r3, [pc, #404]	; (8007bf4 <_dtoa_r+0x62c>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	f7f8 fdc7 	bl	80005f8 <__aeabi_dmul>
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	f7f9 f849 	bl	8000b04 <__aeabi_dcmpge>
 8007a72:	9e03      	ldr	r6, [sp, #12]
 8007a74:	4637      	mov	r7, r6
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f040 8245 	bne.w	8007f06 <_dtoa_r+0x93e>
 8007a7c:	9d01      	ldr	r5, [sp, #4]
 8007a7e:	2331      	movs	r3, #49	; 0x31
 8007a80:	f805 3b01 	strb.w	r3, [r5], #1
 8007a84:	9b00      	ldr	r3, [sp, #0]
 8007a86:	3301      	adds	r3, #1
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	e240      	b.n	8007f0e <_dtoa_r+0x946>
 8007a8c:	07f2      	lsls	r2, r6, #31
 8007a8e:	d505      	bpl.n	8007a9c <_dtoa_r+0x4d4>
 8007a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a94:	f7f8 fdb0 	bl	80005f8 <__aeabi_dmul>
 8007a98:	3501      	adds	r5, #1
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	1076      	asrs	r6, r6, #1
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	e777      	b.n	8007992 <_dtoa_r+0x3ca>
 8007aa2:	2502      	movs	r5, #2
 8007aa4:	e779      	b.n	800799a <_dtoa_r+0x3d2>
 8007aa6:	9f00      	ldr	r7, [sp, #0]
 8007aa8:	9e03      	ldr	r6, [sp, #12]
 8007aaa:	e794      	b.n	80079d6 <_dtoa_r+0x40e>
 8007aac:	9901      	ldr	r1, [sp, #4]
 8007aae:	4b4c      	ldr	r3, [pc, #304]	; (8007be0 <_dtoa_r+0x618>)
 8007ab0:	4431      	add	r1, r6
 8007ab2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ab4:	9908      	ldr	r1, [sp, #32]
 8007ab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d043      	beq.n	8007b4a <_dtoa_r+0x582>
 8007ac2:	494d      	ldr	r1, [pc, #308]	; (8007bf8 <_dtoa_r+0x630>)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7f8 fec1 	bl	800084c <__aeabi_ddiv>
 8007aca:	4652      	mov	r2, sl
 8007acc:	465b      	mov	r3, fp
 8007ace:	f7f8 fbdb 	bl	8000288 <__aeabi_dsub>
 8007ad2:	9d01      	ldr	r5, [sp, #4]
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	468b      	mov	fp, r1
 8007ad8:	4649      	mov	r1, r9
 8007ada:	4640      	mov	r0, r8
 8007adc:	f7f9 f83c 	bl	8000b58 <__aeabi_d2iz>
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	f7f8 fd1f 	bl	8000524 <__aeabi_i2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	f7f8 fbcb 	bl	8000288 <__aeabi_dsub>
 8007af2:	3630      	adds	r6, #48	; 0x30
 8007af4:	f805 6b01 	strb.w	r6, [r5], #1
 8007af8:	4652      	mov	r2, sl
 8007afa:	465b      	mov	r3, fp
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	f7f8 ffec 	bl	8000adc <__aeabi_dcmplt>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d163      	bne.n	8007bd0 <_dtoa_r+0x608>
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	4936      	ldr	r1, [pc, #216]	; (8007be8 <_dtoa_r+0x620>)
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f7f8 fbba 	bl	8000288 <__aeabi_dsub>
 8007b14:	4652      	mov	r2, sl
 8007b16:	465b      	mov	r3, fp
 8007b18:	f7f8 ffe0 	bl	8000adc <__aeabi_dcmplt>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f040 80b5 	bne.w	8007c8c <_dtoa_r+0x6c4>
 8007b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b24:	429d      	cmp	r5, r3
 8007b26:	d081      	beq.n	8007a2c <_dtoa_r+0x464>
 8007b28:	4b30      	ldr	r3, [pc, #192]	; (8007bec <_dtoa_r+0x624>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <_dtoa_r+0x624>)
 8007b36:	4682      	mov	sl, r0
 8007b38:	468b      	mov	fp, r1
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	4680      	mov	r8, r0
 8007b46:	4689      	mov	r9, r1
 8007b48:	e7c6      	b.n	8007ad8 <_dtoa_r+0x510>
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b54:	9d01      	ldr	r5, [sp, #4]
 8007b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b58:	4682      	mov	sl, r0
 8007b5a:	468b      	mov	fp, r1
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4640      	mov	r0, r8
 8007b60:	f7f8 fffa 	bl	8000b58 <__aeabi_d2iz>
 8007b64:	4606      	mov	r6, r0
 8007b66:	f7f8 fcdd 	bl	8000524 <__aeabi_i2d>
 8007b6a:	3630      	adds	r6, #48	; 0x30
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4640      	mov	r0, r8
 8007b72:	4649      	mov	r1, r9
 8007b74:	f7f8 fb88 	bl	8000288 <__aeabi_dsub>
 8007b78:	f805 6b01 	strb.w	r6, [r5], #1
 8007b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	4680      	mov	r8, r0
 8007b82:	4689      	mov	r9, r1
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	d124      	bne.n	8007bd4 <_dtoa_r+0x60c>
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <_dtoa_r+0x630>)
 8007b8c:	4650      	mov	r0, sl
 8007b8e:	4659      	mov	r1, fp
 8007b90:	f7f8 fb7c 	bl	800028c <__adddf3>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d173      	bne.n	8007c8c <_dtoa_r+0x6c4>
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	465b      	mov	r3, fp
 8007ba8:	4913      	ldr	r1, [pc, #76]	; (8007bf8 <_dtoa_r+0x630>)
 8007baa:	2000      	movs	r0, #0
 8007bac:	f7f8 fb6c 	bl	8000288 <__aeabi_dsub>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f7f8 ff90 	bl	8000adc <__aeabi_dcmplt>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	f43f af35 	beq.w	8007a2c <_dtoa_r+0x464>
 8007bc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bc4:	1e6b      	subs	r3, r5, #1
 8007bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bcc:	2b30      	cmp	r3, #48	; 0x30
 8007bce:	d0f8      	beq.n	8007bc2 <_dtoa_r+0x5fa>
 8007bd0:	9700      	str	r7, [sp, #0]
 8007bd2:	e049      	b.n	8007c68 <_dtoa_r+0x6a0>
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <_dtoa_r+0x624>)
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	e7bd      	b.n	8007b5c <_dtoa_r+0x594>
 8007be0:	0800b710 	.word	0x0800b710
 8007be4:	0800b6e8 	.word	0x0800b6e8
 8007be8:	3ff00000 	.word	0x3ff00000
 8007bec:	40240000 	.word	0x40240000
 8007bf0:	401c0000 	.word	0x401c0000
 8007bf4:	40140000 	.word	0x40140000
 8007bf8:	3fe00000 	.word	0x3fe00000
 8007bfc:	9d01      	ldr	r5, [sp, #4]
 8007bfe:	4656      	mov	r6, sl
 8007c00:	465f      	mov	r7, fp
 8007c02:	4642      	mov	r2, r8
 8007c04:	464b      	mov	r3, r9
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fe1f 	bl	800084c <__aeabi_ddiv>
 8007c0e:	f7f8 ffa3 	bl	8000b58 <__aeabi_d2iz>
 8007c12:	4682      	mov	sl, r0
 8007c14:	f7f8 fc86 	bl	8000524 <__aeabi_i2d>
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	f7f8 fcec 	bl	80005f8 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c2c:	f7f8 fb2c 	bl	8000288 <__aeabi_dsub>
 8007c30:	f805 6b01 	strb.w	r6, [r5], #1
 8007c34:	9e01      	ldr	r6, [sp, #4]
 8007c36:	9f03      	ldr	r7, [sp, #12]
 8007c38:	1bae      	subs	r6, r5, r6
 8007c3a:	42b7      	cmp	r7, r6
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	d135      	bne.n	8007cae <_dtoa_r+0x6e6>
 8007c42:	f7f8 fb23 	bl	800028c <__adddf3>
 8007c46:	4642      	mov	r2, r8
 8007c48:	464b      	mov	r3, r9
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	f7f8 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 8007c52:	b9d0      	cbnz	r0, 8007c8a <_dtoa_r+0x6c2>
 8007c54:	4642      	mov	r2, r8
 8007c56:	464b      	mov	r3, r9
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c60:	b110      	cbz	r0, 8007c68 <_dtoa_r+0x6a0>
 8007c62:	f01a 0f01 	tst.w	sl, #1
 8007c66:	d110      	bne.n	8007c8a <_dtoa_r+0x6c2>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	ee18 1a10 	vmov	r1, s16
 8007c6e:	f000 faf3 	bl	8008258 <_Bfree>
 8007c72:	2300      	movs	r3, #0
 8007c74:	9800      	ldr	r0, [sp, #0]
 8007c76:	702b      	strb	r3, [r5, #0]
 8007c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	6018      	str	r0, [r3, #0]
 8007c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f43f acf1 	beq.w	8007668 <_dtoa_r+0xa0>
 8007c86:	601d      	str	r5, [r3, #0]
 8007c88:	e4ee      	b.n	8007668 <_dtoa_r+0xa0>
 8007c8a:	9f00      	ldr	r7, [sp, #0]
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	461d      	mov	r5, r3
 8007c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c94:	2a39      	cmp	r2, #57	; 0x39
 8007c96:	d106      	bne.n	8007ca6 <_dtoa_r+0x6de>
 8007c98:	9a01      	ldr	r2, [sp, #4]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d1f7      	bne.n	8007c8e <_dtoa_r+0x6c6>
 8007c9e:	9901      	ldr	r1, [sp, #4]
 8007ca0:	2230      	movs	r2, #48	; 0x30
 8007ca2:	3701      	adds	r7, #1
 8007ca4:	700a      	strb	r2, [r1, #0]
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	3201      	adds	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e790      	b.n	8007bd0 <_dtoa_r+0x608>
 8007cae:	4ba6      	ldr	r3, [pc, #664]	; (8007f48 <_dtoa_r+0x980>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	f7f8 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d09d      	beq.n	8007c02 <_dtoa_r+0x63a>
 8007cc6:	e7cf      	b.n	8007c68 <_dtoa_r+0x6a0>
 8007cc8:	9a08      	ldr	r2, [sp, #32]
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	f000 80d7 	beq.w	8007e7e <_dtoa_r+0x8b6>
 8007cd0:	9a06      	ldr	r2, [sp, #24]
 8007cd2:	2a01      	cmp	r2, #1
 8007cd4:	f300 80ba 	bgt.w	8007e4c <_dtoa_r+0x884>
 8007cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	f000 80b2 	beq.w	8007e44 <_dtoa_r+0x87c>
 8007ce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ce4:	9e07      	ldr	r6, [sp, #28]
 8007ce6:	9d04      	ldr	r5, [sp, #16]
 8007ce8:	9a04      	ldr	r2, [sp, #16]
 8007cea:	441a      	add	r2, r3
 8007cec:	9204      	str	r2, [sp, #16]
 8007cee:	9a05      	ldr	r2, [sp, #20]
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	441a      	add	r2, r3
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	9205      	str	r2, [sp, #20]
 8007cf8:	f000 fb66 	bl	80083c8 <__i2b>
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	dd0c      	ble.n	8007d1c <_dtoa_r+0x754>
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd09      	ble.n	8007d1c <_dtoa_r+0x754>
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	9a04      	ldr	r2, [sp, #16]
 8007d0c:	bfa8      	it	ge
 8007d0e:	462b      	movge	r3, r5
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	9204      	str	r2, [sp, #16]
 8007d14:	9a05      	ldr	r2, [sp, #20]
 8007d16:	1aed      	subs	r5, r5, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	b31b      	cbz	r3, 8007d68 <_dtoa_r+0x7a0>
 8007d20:	9b08      	ldr	r3, [sp, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80af 	beq.w	8007e86 <_dtoa_r+0x8be>
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	dd13      	ble.n	8007d54 <_dtoa_r+0x78c>
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fc09 	bl	8008548 <__pow5mult>
 8007d36:	ee18 2a10 	vmov	r2, s16
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fb58 	bl	80083f4 <__multiply>
 8007d44:	ee18 1a10 	vmov	r1, s16
 8007d48:	4680      	mov	r8, r0
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 fa84 	bl	8008258 <_Bfree>
 8007d50:	ee08 8a10 	vmov	s16, r8
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	1b9a      	subs	r2, r3, r6
 8007d58:	d006      	beq.n	8007d68 <_dtoa_r+0x7a0>
 8007d5a:	ee18 1a10 	vmov	r1, s16
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 fbf2 	bl	8008548 <__pow5mult>
 8007d64:	ee08 0a10 	vmov	s16, r0
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fb2c 	bl	80083c8 <__i2b>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	f340 8088 	ble.w	8007e8a <_dtoa_r+0x8c2>
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fbe2 	bl	8008548 <__pow5mult>
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	4606      	mov	r6, r0
 8007d8a:	f340 8081 	ble.w	8007e90 <_dtoa_r+0x8c8>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	6933      	ldr	r3, [r6, #16]
 8007d94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d98:	6918      	ldr	r0, [r3, #16]
 8007d9a:	f000 fac5 	bl	8008328 <__hi0bits>
 8007d9e:	f1c0 0020 	rsb	r0, r0, #32
 8007da2:	9b05      	ldr	r3, [sp, #20]
 8007da4:	4418      	add	r0, r3
 8007da6:	f010 001f 	ands.w	r0, r0, #31
 8007daa:	f000 8092 	beq.w	8007ed2 <_dtoa_r+0x90a>
 8007dae:	f1c0 0320 	rsb	r3, r0, #32
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	f340 808a 	ble.w	8007ecc <_dtoa_r+0x904>
 8007db8:	f1c0 001c 	rsb	r0, r0, #28
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	4403      	add	r3, r0
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	4403      	add	r3, r0
 8007dc6:	4405      	add	r5, r0
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd07      	ble.n	8007de0 <_dtoa_r+0x818>
 8007dd0:	ee18 1a10 	vmov	r1, s16
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 fc10 	bl	80085fc <__lshift>
 8007ddc:	ee08 0a10 	vmov	s16, r0
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dd05      	ble.n	8007df2 <_dtoa_r+0x82a>
 8007de6:	4631      	mov	r1, r6
 8007de8:	461a      	mov	r2, r3
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fc06 	bl	80085fc <__lshift>
 8007df0:	4606      	mov	r6, r0
 8007df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d06e      	beq.n	8007ed6 <_dtoa_r+0x90e>
 8007df8:	ee18 0a10 	vmov	r0, s16
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	f000 fc6d 	bl	80086dc <__mcmp>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	da67      	bge.n	8007ed6 <_dtoa_r+0x90e>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	ee18 1a10 	vmov	r1, s16
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	220a      	movs	r2, #10
 8007e12:	2300      	movs	r3, #0
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fa41 	bl	800829c <__multadd>
 8007e1a:	9b08      	ldr	r3, [sp, #32]
 8007e1c:	ee08 0a10 	vmov	s16, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 81b1 	beq.w	8008188 <_dtoa_r+0xbc0>
 8007e26:	2300      	movs	r3, #0
 8007e28:	4639      	mov	r1, r7
 8007e2a:	220a      	movs	r2, #10
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 fa35 	bl	800829c <__multadd>
 8007e32:	9b02      	ldr	r3, [sp, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	4607      	mov	r7, r0
 8007e38:	f300 808e 	bgt.w	8007f58 <_dtoa_r+0x990>
 8007e3c:	9b06      	ldr	r3, [sp, #24]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	dc51      	bgt.n	8007ee6 <_dtoa_r+0x91e>
 8007e42:	e089      	b.n	8007f58 <_dtoa_r+0x990>
 8007e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e4a:	e74b      	b.n	8007ce4 <_dtoa_r+0x71c>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	1e5e      	subs	r6, r3, #1
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	42b3      	cmp	r3, r6
 8007e54:	bfbf      	itttt	lt
 8007e56:	9b07      	ldrlt	r3, [sp, #28]
 8007e58:	9607      	strlt	r6, [sp, #28]
 8007e5a:	1af2      	sublt	r2, r6, r3
 8007e5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e5e:	bfb6      	itet	lt
 8007e60:	189b      	addlt	r3, r3, r2
 8007e62:	1b9e      	subge	r6, r3, r6
 8007e64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	bfb8      	it	lt
 8007e6a:	2600      	movlt	r6, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfb7      	itett	lt
 8007e70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e78:	1a9d      	sublt	r5, r3, r2
 8007e7a:	2300      	movlt	r3, #0
 8007e7c:	e734      	b.n	8007ce8 <_dtoa_r+0x720>
 8007e7e:	9e07      	ldr	r6, [sp, #28]
 8007e80:	9d04      	ldr	r5, [sp, #16]
 8007e82:	9f08      	ldr	r7, [sp, #32]
 8007e84:	e73b      	b.n	8007cfe <_dtoa_r+0x736>
 8007e86:	9a07      	ldr	r2, [sp, #28]
 8007e88:	e767      	b.n	8007d5a <_dtoa_r+0x792>
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	dc18      	bgt.n	8007ec2 <_dtoa_r+0x8fa>
 8007e90:	f1ba 0f00 	cmp.w	sl, #0
 8007e94:	d115      	bne.n	8007ec2 <_dtoa_r+0x8fa>
 8007e96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e9a:	b993      	cbnz	r3, 8007ec2 <_dtoa_r+0x8fa>
 8007e9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	051b      	lsls	r3, r3, #20
 8007ea4:	b183      	cbz	r3, 8007ec8 <_dtoa_r+0x900>
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	9b05      	ldr	r3, [sp, #20]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	f04f 0801 	mov.w	r8, #1
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f47f af6a 	bne.w	8007d92 <_dtoa_r+0x7ca>
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	e76f      	b.n	8007da2 <_dtoa_r+0x7da>
 8007ec2:	f04f 0800 	mov.w	r8, #0
 8007ec6:	e7f6      	b.n	8007eb6 <_dtoa_r+0x8ee>
 8007ec8:	4698      	mov	r8, r3
 8007eca:	e7f4      	b.n	8007eb6 <_dtoa_r+0x8ee>
 8007ecc:	f43f af7d 	beq.w	8007dca <_dtoa_r+0x802>
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	301c      	adds	r0, #28
 8007ed4:	e772      	b.n	8007dbc <_dtoa_r+0x7f4>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc37      	bgt.n	8007f4c <_dtoa_r+0x984>
 8007edc:	9b06      	ldr	r3, [sp, #24]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	dd34      	ble.n	8007f4c <_dtoa_r+0x984>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	9302      	str	r3, [sp, #8]
 8007ee6:	9b02      	ldr	r3, [sp, #8]
 8007ee8:	b96b      	cbnz	r3, 8007f06 <_dtoa_r+0x93e>
 8007eea:	4631      	mov	r1, r6
 8007eec:	2205      	movs	r2, #5
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f9d4 	bl	800829c <__multadd>
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	ee18 0a10 	vmov	r0, s16
 8007efc:	f000 fbee 	bl	80086dc <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f73f adbb 	bgt.w	8007a7c <_dtoa_r+0x4b4>
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	9d01      	ldr	r5, [sp, #4]
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	4631      	mov	r1, r6
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 f99f 	bl	8008258 <_Bfree>
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	f43f aea4 	beq.w	8007c68 <_dtoa_r+0x6a0>
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	d005      	beq.n	8007f32 <_dtoa_r+0x96a>
 8007f26:	45b8      	cmp	r8, r7
 8007f28:	d003      	beq.n	8007f32 <_dtoa_r+0x96a>
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f993 	bl	8008258 <_Bfree>
 8007f32:	4639      	mov	r1, r7
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 f98f 	bl	8008258 <_Bfree>
 8007f3a:	e695      	b.n	8007c68 <_dtoa_r+0x6a0>
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	4637      	mov	r7, r6
 8007f40:	e7e1      	b.n	8007f06 <_dtoa_r+0x93e>
 8007f42:	9700      	str	r7, [sp, #0]
 8007f44:	4637      	mov	r7, r6
 8007f46:	e599      	b.n	8007a7c <_dtoa_r+0x4b4>
 8007f48:	40240000 	.word	0x40240000
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80ca 	beq.w	80080e8 <_dtoa_r+0xb20>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	9302      	str	r3, [sp, #8]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	dd05      	ble.n	8007f68 <_dtoa_r+0x9a0>
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	462a      	mov	r2, r5
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fb4b 	bl	80085fc <__lshift>
 8007f66:	4607      	mov	r7, r0
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	d05b      	beq.n	8008026 <_dtoa_r+0xa5e>
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 f931 	bl	80081d8 <_Balloc>
 8007f76:	4605      	mov	r5, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <_dtoa_r+0x9be>
 8007f7a:	4b87      	ldr	r3, [pc, #540]	; (8008198 <_dtoa_r+0xbd0>)
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f82:	f7ff bb3b 	b.w	80075fc <_dtoa_r+0x34>
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	3202      	adds	r2, #2
 8007f8a:	0092      	lsls	r2, r2, #2
 8007f8c:	f107 010c 	add.w	r1, r7, #12
 8007f90:	300c      	adds	r0, #12
 8007f92:	f000 f913 	bl	80081bc <memcpy>
 8007f96:	2201      	movs	r2, #1
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fb2e 	bl	80085fc <__lshift>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	f103 0901 	add.w	r9, r3, #1
 8007fa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007faa:	4413      	add	r3, r2
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	f00a 0301 	and.w	r3, sl, #1
 8007fb2:	46b8      	mov	r8, r7
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	4631      	mov	r1, r6
 8007fba:	ee18 0a10 	vmov	r0, s16
 8007fbe:	f7ff fa77 	bl	80074b0 <quorem>
 8007fc2:	4641      	mov	r1, r8
 8007fc4:	9002      	str	r0, [sp, #8]
 8007fc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fca:	ee18 0a10 	vmov	r0, s16
 8007fce:	f000 fb85 	bl	80086dc <__mcmp>
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	9003      	str	r0, [sp, #12]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fb9b 	bl	8008714 <__mdiff>
 8007fde:	68c2      	ldr	r2, [r0, #12]
 8007fe0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	bb02      	cbnz	r2, 800802a <_dtoa_r+0xa62>
 8007fe8:	4601      	mov	r1, r0
 8007fea:	ee18 0a10 	vmov	r0, s16
 8007fee:	f000 fb75 	bl	80086dc <__mcmp>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	9207      	str	r2, [sp, #28]
 8007ffa:	f000 f92d 	bl	8008258 <_Bfree>
 8007ffe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008002:	ea43 0102 	orr.w	r1, r3, r2
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	430b      	orrs	r3, r1
 800800a:	464d      	mov	r5, r9
 800800c:	d10f      	bne.n	800802e <_dtoa_r+0xa66>
 800800e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008012:	d02a      	beq.n	800806a <_dtoa_r+0xaa2>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd02      	ble.n	8008020 <_dtoa_r+0xa58>
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008020:	f88b a000 	strb.w	sl, [fp]
 8008024:	e775      	b.n	8007f12 <_dtoa_r+0x94a>
 8008026:	4638      	mov	r0, r7
 8008028:	e7ba      	b.n	8007fa0 <_dtoa_r+0x9d8>
 800802a:	2201      	movs	r2, #1
 800802c:	e7e2      	b.n	8007ff4 <_dtoa_r+0xa2c>
 800802e:	9b03      	ldr	r3, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	db04      	blt.n	800803e <_dtoa_r+0xa76>
 8008034:	9906      	ldr	r1, [sp, #24]
 8008036:	430b      	orrs	r3, r1
 8008038:	9904      	ldr	r1, [sp, #16]
 800803a:	430b      	orrs	r3, r1
 800803c:	d122      	bne.n	8008084 <_dtoa_r+0xabc>
 800803e:	2a00      	cmp	r2, #0
 8008040:	ddee      	ble.n	8008020 <_dtoa_r+0xa58>
 8008042:	ee18 1a10 	vmov	r1, s16
 8008046:	2201      	movs	r2, #1
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fad7 	bl	80085fc <__lshift>
 800804e:	4631      	mov	r1, r6
 8008050:	ee08 0a10 	vmov	s16, r0
 8008054:	f000 fb42 	bl	80086dc <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	dc03      	bgt.n	8008064 <_dtoa_r+0xa9c>
 800805c:	d1e0      	bne.n	8008020 <_dtoa_r+0xa58>
 800805e:	f01a 0f01 	tst.w	sl, #1
 8008062:	d0dd      	beq.n	8008020 <_dtoa_r+0xa58>
 8008064:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008068:	d1d7      	bne.n	800801a <_dtoa_r+0xa52>
 800806a:	2339      	movs	r3, #57	; 0x39
 800806c:	f88b 3000 	strb.w	r3, [fp]
 8008070:	462b      	mov	r3, r5
 8008072:	461d      	mov	r5, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800807a:	2a39      	cmp	r2, #57	; 0x39
 800807c:	d071      	beq.n	8008162 <_dtoa_r+0xb9a>
 800807e:	3201      	adds	r2, #1
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	e746      	b.n	8007f12 <_dtoa_r+0x94a>
 8008084:	2a00      	cmp	r2, #0
 8008086:	dd07      	ble.n	8008098 <_dtoa_r+0xad0>
 8008088:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800808c:	d0ed      	beq.n	800806a <_dtoa_r+0xaa2>
 800808e:	f10a 0301 	add.w	r3, sl, #1
 8008092:	f88b 3000 	strb.w	r3, [fp]
 8008096:	e73c      	b.n	8007f12 <_dtoa_r+0x94a>
 8008098:	9b05      	ldr	r3, [sp, #20]
 800809a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800809e:	4599      	cmp	r9, r3
 80080a0:	d047      	beq.n	8008132 <_dtoa_r+0xb6a>
 80080a2:	ee18 1a10 	vmov	r1, s16
 80080a6:	2300      	movs	r3, #0
 80080a8:	220a      	movs	r2, #10
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f8f6 	bl	800829c <__multadd>
 80080b0:	45b8      	cmp	r8, r7
 80080b2:	ee08 0a10 	vmov	s16, r0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	f04f 020a 	mov.w	r2, #10
 80080be:	4641      	mov	r1, r8
 80080c0:	4620      	mov	r0, r4
 80080c2:	d106      	bne.n	80080d2 <_dtoa_r+0xb0a>
 80080c4:	f000 f8ea 	bl	800829c <__multadd>
 80080c8:	4680      	mov	r8, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	f109 0901 	add.w	r9, r9, #1
 80080d0:	e772      	b.n	8007fb8 <_dtoa_r+0x9f0>
 80080d2:	f000 f8e3 	bl	800829c <__multadd>
 80080d6:	4639      	mov	r1, r7
 80080d8:	4680      	mov	r8, r0
 80080da:	2300      	movs	r3, #0
 80080dc:	220a      	movs	r2, #10
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f8dc 	bl	800829c <__multadd>
 80080e4:	4607      	mov	r7, r0
 80080e6:	e7f1      	b.n	80080cc <_dtoa_r+0xb04>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	9d01      	ldr	r5, [sp, #4]
 80080ee:	ee18 0a10 	vmov	r0, s16
 80080f2:	4631      	mov	r1, r6
 80080f4:	f7ff f9dc 	bl	80074b0 <quorem>
 80080f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	f805 ab01 	strb.w	sl, [r5], #1
 8008102:	1aea      	subs	r2, r5, r3
 8008104:	9b02      	ldr	r3, [sp, #8]
 8008106:	4293      	cmp	r3, r2
 8008108:	dd09      	ble.n	800811e <_dtoa_r+0xb56>
 800810a:	ee18 1a10 	vmov	r1, s16
 800810e:	2300      	movs	r3, #0
 8008110:	220a      	movs	r2, #10
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f8c2 	bl	800829c <__multadd>
 8008118:	ee08 0a10 	vmov	s16, r0
 800811c:	e7e7      	b.n	80080ee <_dtoa_r+0xb26>
 800811e:	9b02      	ldr	r3, [sp, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	bfc8      	it	gt
 8008124:	461d      	movgt	r5, r3
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	bfd8      	it	le
 800812a:	2501      	movle	r5, #1
 800812c:	441d      	add	r5, r3
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	ee18 1a10 	vmov	r1, s16
 8008136:	2201      	movs	r2, #1
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fa5f 	bl	80085fc <__lshift>
 800813e:	4631      	mov	r1, r6
 8008140:	ee08 0a10 	vmov	s16, r0
 8008144:	f000 faca 	bl	80086dc <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	dc91      	bgt.n	8008070 <_dtoa_r+0xaa8>
 800814c:	d102      	bne.n	8008154 <_dtoa_r+0xb8c>
 800814e:	f01a 0f01 	tst.w	sl, #1
 8008152:	d18d      	bne.n	8008070 <_dtoa_r+0xaa8>
 8008154:	462b      	mov	r3, r5
 8008156:	461d      	mov	r5, r3
 8008158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800815c:	2a30      	cmp	r2, #48	; 0x30
 800815e:	d0fa      	beq.n	8008156 <_dtoa_r+0xb8e>
 8008160:	e6d7      	b.n	8007f12 <_dtoa_r+0x94a>
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d184      	bne.n	8008072 <_dtoa_r+0xaaa>
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	3301      	adds	r3, #1
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	2331      	movs	r3, #49	; 0x31
 8008170:	7013      	strb	r3, [r2, #0]
 8008172:	e6ce      	b.n	8007f12 <_dtoa_r+0x94a>
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <_dtoa_r+0xbd4>)
 8008176:	f7ff ba95 	b.w	80076a4 <_dtoa_r+0xdc>
 800817a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800817c:	2b00      	cmp	r3, #0
 800817e:	f47f aa6e 	bne.w	800765e <_dtoa_r+0x96>
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <_dtoa_r+0xbd8>)
 8008184:	f7ff ba8e 	b.w	80076a4 <_dtoa_r+0xdc>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	dcae      	bgt.n	80080ec <_dtoa_r+0xb24>
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	2b02      	cmp	r3, #2
 8008192:	f73f aea8 	bgt.w	8007ee6 <_dtoa_r+0x91e>
 8008196:	e7a9      	b.n	80080ec <_dtoa_r+0xb24>
 8008198:	0800b677 	.word	0x0800b677
 800819c:	0800b5d4 	.word	0x0800b5d4
 80081a0:	0800b5f8 	.word	0x0800b5f8

080081a4 <_localeconv_r>:
 80081a4:	4800      	ldr	r0, [pc, #0]	; (80081a8 <_localeconv_r+0x4>)
 80081a6:	4770      	bx	lr
 80081a8:	20000168 	.word	0x20000168

080081ac <malloc>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <malloc+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 bc17 	b.w	80089e4 <_malloc_r>
 80081b6:	bf00      	nop
 80081b8:	20000014 	.word	0x20000014

080081bc <memcpy>:
 80081bc:	440a      	add	r2, r1
 80081be:	4291      	cmp	r1, r2
 80081c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c4:	d100      	bne.n	80081c8 <memcpy+0xc>
 80081c6:	4770      	bx	lr
 80081c8:	b510      	push	{r4, lr}
 80081ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d2:	4291      	cmp	r1, r2
 80081d4:	d1f9      	bne.n	80081ca <memcpy+0xe>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <_Balloc>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081dc:	4604      	mov	r4, r0
 80081de:	460d      	mov	r5, r1
 80081e0:	b976      	cbnz	r6, 8008200 <_Balloc+0x28>
 80081e2:	2010      	movs	r0, #16
 80081e4:	f7ff ffe2 	bl	80081ac <malloc>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6260      	str	r0, [r4, #36]	; 0x24
 80081ec:	b920      	cbnz	r0, 80081f8 <_Balloc+0x20>
 80081ee:	4b18      	ldr	r3, [pc, #96]	; (8008250 <_Balloc+0x78>)
 80081f0:	4818      	ldr	r0, [pc, #96]	; (8008254 <_Balloc+0x7c>)
 80081f2:	2166      	movs	r1, #102	; 0x66
 80081f4:	f000 fdd6 	bl	8008da4 <__assert_func>
 80081f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081fc:	6006      	str	r6, [r0, #0]
 80081fe:	60c6      	str	r6, [r0, #12]
 8008200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008202:	68f3      	ldr	r3, [r6, #12]
 8008204:	b183      	cbz	r3, 8008228 <_Balloc+0x50>
 8008206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800820e:	b9b8      	cbnz	r0, 8008240 <_Balloc+0x68>
 8008210:	2101      	movs	r1, #1
 8008212:	fa01 f605 	lsl.w	r6, r1, r5
 8008216:	1d72      	adds	r2, r6, #5
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	4620      	mov	r0, r4
 800821c:	f000 fb60 	bl	80088e0 <_calloc_r>
 8008220:	b160      	cbz	r0, 800823c <_Balloc+0x64>
 8008222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008226:	e00e      	b.n	8008246 <_Balloc+0x6e>
 8008228:	2221      	movs	r2, #33	; 0x21
 800822a:	2104      	movs	r1, #4
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fb57 	bl	80088e0 <_calloc_r>
 8008232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008234:	60f0      	str	r0, [r6, #12]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e4      	bne.n	8008206 <_Balloc+0x2e>
 800823c:	2000      	movs	r0, #0
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	6802      	ldr	r2, [r0, #0]
 8008242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008246:	2300      	movs	r3, #0
 8008248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800824c:	e7f7      	b.n	800823e <_Balloc+0x66>
 800824e:	bf00      	nop
 8008250:	0800b605 	.word	0x0800b605
 8008254:	0800b688 	.word	0x0800b688

08008258 <_Bfree>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b976      	cbnz	r6, 8008280 <_Bfree+0x28>
 8008262:	2010      	movs	r0, #16
 8008264:	f7ff ffa2 	bl	80081ac <malloc>
 8008268:	4602      	mov	r2, r0
 800826a:	6268      	str	r0, [r5, #36]	; 0x24
 800826c:	b920      	cbnz	r0, 8008278 <_Bfree+0x20>
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <_Bfree+0x3c>)
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <_Bfree+0x40>)
 8008272:	218a      	movs	r1, #138	; 0x8a
 8008274:	f000 fd96 	bl	8008da4 <__assert_func>
 8008278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800827c:	6006      	str	r6, [r0, #0]
 800827e:	60c6      	str	r6, [r0, #12]
 8008280:	b13c      	cbz	r4, 8008292 <_Bfree+0x3a>
 8008282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008284:	6862      	ldr	r2, [r4, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800828c:	6021      	str	r1, [r4, #0]
 800828e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	0800b605 	.word	0x0800b605
 8008298:	0800b688 	.word	0x0800b688

0800829c <__multadd>:
 800829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a0:	690d      	ldr	r5, [r1, #16]
 80082a2:	4607      	mov	r7, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	461e      	mov	r6, r3
 80082a8:	f101 0c14 	add.w	ip, r1, #20
 80082ac:	2000      	movs	r0, #0
 80082ae:	f8dc 3000 	ldr.w	r3, [ip]
 80082b2:	b299      	uxth	r1, r3
 80082b4:	fb02 6101 	mla	r1, r2, r1, r6
 80082b8:	0c1e      	lsrs	r6, r3, #16
 80082ba:	0c0b      	lsrs	r3, r1, #16
 80082bc:	fb02 3306 	mla	r3, r2, r6, r3
 80082c0:	b289      	uxth	r1, r1
 80082c2:	3001      	adds	r0, #1
 80082c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082c8:	4285      	cmp	r5, r0
 80082ca:	f84c 1b04 	str.w	r1, [ip], #4
 80082ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082d2:	dcec      	bgt.n	80082ae <__multadd+0x12>
 80082d4:	b30e      	cbz	r6, 800831a <__multadd+0x7e>
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dc19      	bgt.n	8008310 <__multadd+0x74>
 80082dc:	6861      	ldr	r1, [r4, #4]
 80082de:	4638      	mov	r0, r7
 80082e0:	3101      	adds	r1, #1
 80082e2:	f7ff ff79 	bl	80081d8 <_Balloc>
 80082e6:	4680      	mov	r8, r0
 80082e8:	b928      	cbnz	r0, 80082f6 <__multadd+0x5a>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <__multadd+0x84>)
 80082ee:	480d      	ldr	r0, [pc, #52]	; (8008324 <__multadd+0x88>)
 80082f0:	21b5      	movs	r1, #181	; 0xb5
 80082f2:	f000 fd57 	bl	8008da4 <__assert_func>
 80082f6:	6922      	ldr	r2, [r4, #16]
 80082f8:	3202      	adds	r2, #2
 80082fa:	f104 010c 	add.w	r1, r4, #12
 80082fe:	0092      	lsls	r2, r2, #2
 8008300:	300c      	adds	r0, #12
 8008302:	f7ff ff5b 	bl	80081bc <memcpy>
 8008306:	4621      	mov	r1, r4
 8008308:	4638      	mov	r0, r7
 800830a:	f7ff ffa5 	bl	8008258 <_Bfree>
 800830e:	4644      	mov	r4, r8
 8008310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008314:	3501      	adds	r5, #1
 8008316:	615e      	str	r6, [r3, #20]
 8008318:	6125      	str	r5, [r4, #16]
 800831a:	4620      	mov	r0, r4
 800831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008320:	0800b677 	.word	0x0800b677
 8008324:	0800b688 	.word	0x0800b688

08008328 <__hi0bits>:
 8008328:	0c03      	lsrs	r3, r0, #16
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	b9d3      	cbnz	r3, 8008364 <__hi0bits+0x3c>
 800832e:	0400      	lsls	r0, r0, #16
 8008330:	2310      	movs	r3, #16
 8008332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008336:	bf04      	itt	eq
 8008338:	0200      	lsleq	r0, r0, #8
 800833a:	3308      	addeq	r3, #8
 800833c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008340:	bf04      	itt	eq
 8008342:	0100      	lsleq	r0, r0, #4
 8008344:	3304      	addeq	r3, #4
 8008346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800834a:	bf04      	itt	eq
 800834c:	0080      	lsleq	r0, r0, #2
 800834e:	3302      	addeq	r3, #2
 8008350:	2800      	cmp	r0, #0
 8008352:	db05      	blt.n	8008360 <__hi0bits+0x38>
 8008354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008358:	f103 0301 	add.w	r3, r3, #1
 800835c:	bf08      	it	eq
 800835e:	2320      	moveq	r3, #32
 8008360:	4618      	mov	r0, r3
 8008362:	4770      	bx	lr
 8008364:	2300      	movs	r3, #0
 8008366:	e7e4      	b.n	8008332 <__hi0bits+0xa>

08008368 <__lo0bits>:
 8008368:	6803      	ldr	r3, [r0, #0]
 800836a:	f013 0207 	ands.w	r2, r3, #7
 800836e:	4601      	mov	r1, r0
 8008370:	d00b      	beq.n	800838a <__lo0bits+0x22>
 8008372:	07da      	lsls	r2, r3, #31
 8008374:	d423      	bmi.n	80083be <__lo0bits+0x56>
 8008376:	0798      	lsls	r0, r3, #30
 8008378:	bf49      	itett	mi
 800837a:	085b      	lsrmi	r3, r3, #1
 800837c:	089b      	lsrpl	r3, r3, #2
 800837e:	2001      	movmi	r0, #1
 8008380:	600b      	strmi	r3, [r1, #0]
 8008382:	bf5c      	itt	pl
 8008384:	600b      	strpl	r3, [r1, #0]
 8008386:	2002      	movpl	r0, #2
 8008388:	4770      	bx	lr
 800838a:	b298      	uxth	r0, r3
 800838c:	b9a8      	cbnz	r0, 80083ba <__lo0bits+0x52>
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	2010      	movs	r0, #16
 8008392:	b2da      	uxtb	r2, r3
 8008394:	b90a      	cbnz	r2, 800839a <__lo0bits+0x32>
 8008396:	3008      	adds	r0, #8
 8008398:	0a1b      	lsrs	r3, r3, #8
 800839a:	071a      	lsls	r2, r3, #28
 800839c:	bf04      	itt	eq
 800839e:	091b      	lsreq	r3, r3, #4
 80083a0:	3004      	addeq	r0, #4
 80083a2:	079a      	lsls	r2, r3, #30
 80083a4:	bf04      	itt	eq
 80083a6:	089b      	lsreq	r3, r3, #2
 80083a8:	3002      	addeq	r0, #2
 80083aa:	07da      	lsls	r2, r3, #31
 80083ac:	d403      	bmi.n	80083b6 <__lo0bits+0x4e>
 80083ae:	085b      	lsrs	r3, r3, #1
 80083b0:	f100 0001 	add.w	r0, r0, #1
 80083b4:	d005      	beq.n	80083c2 <__lo0bits+0x5a>
 80083b6:	600b      	str	r3, [r1, #0]
 80083b8:	4770      	bx	lr
 80083ba:	4610      	mov	r0, r2
 80083bc:	e7e9      	b.n	8008392 <__lo0bits+0x2a>
 80083be:	2000      	movs	r0, #0
 80083c0:	4770      	bx	lr
 80083c2:	2020      	movs	r0, #32
 80083c4:	4770      	bx	lr
	...

080083c8 <__i2b>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	2101      	movs	r1, #1
 80083ce:	f7ff ff03 	bl	80081d8 <_Balloc>
 80083d2:	4602      	mov	r2, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <__i2b+0x1a>
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <__i2b+0x24>)
 80083d8:	4805      	ldr	r0, [pc, #20]	; (80083f0 <__i2b+0x28>)
 80083da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083de:	f000 fce1 	bl	8008da4 <__assert_func>
 80083e2:	2301      	movs	r3, #1
 80083e4:	6144      	str	r4, [r0, #20]
 80083e6:	6103      	str	r3, [r0, #16]
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	0800b677 	.word	0x0800b677
 80083f0:	0800b688 	.word	0x0800b688

080083f4 <__multiply>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4691      	mov	r9, r2
 80083fa:	690a      	ldr	r2, [r1, #16]
 80083fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008400:	429a      	cmp	r2, r3
 8008402:	bfb8      	it	lt
 8008404:	460b      	movlt	r3, r1
 8008406:	460c      	mov	r4, r1
 8008408:	bfbc      	itt	lt
 800840a:	464c      	movlt	r4, r9
 800840c:	4699      	movlt	r9, r3
 800840e:	6927      	ldr	r7, [r4, #16]
 8008410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008414:	68a3      	ldr	r3, [r4, #8]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	eb07 060a 	add.w	r6, r7, sl
 800841c:	42b3      	cmp	r3, r6
 800841e:	b085      	sub	sp, #20
 8008420:	bfb8      	it	lt
 8008422:	3101      	addlt	r1, #1
 8008424:	f7ff fed8 	bl	80081d8 <_Balloc>
 8008428:	b930      	cbnz	r0, 8008438 <__multiply+0x44>
 800842a:	4602      	mov	r2, r0
 800842c:	4b44      	ldr	r3, [pc, #272]	; (8008540 <__multiply+0x14c>)
 800842e:	4845      	ldr	r0, [pc, #276]	; (8008544 <__multiply+0x150>)
 8008430:	f240 115d 	movw	r1, #349	; 0x15d
 8008434:	f000 fcb6 	bl	8008da4 <__assert_func>
 8008438:	f100 0514 	add.w	r5, r0, #20
 800843c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008440:	462b      	mov	r3, r5
 8008442:	2200      	movs	r2, #0
 8008444:	4543      	cmp	r3, r8
 8008446:	d321      	bcc.n	800848c <__multiply+0x98>
 8008448:	f104 0314 	add.w	r3, r4, #20
 800844c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008450:	f109 0314 	add.w	r3, r9, #20
 8008454:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008458:	9202      	str	r2, [sp, #8]
 800845a:	1b3a      	subs	r2, r7, r4
 800845c:	3a15      	subs	r2, #21
 800845e:	f022 0203 	bic.w	r2, r2, #3
 8008462:	3204      	adds	r2, #4
 8008464:	f104 0115 	add.w	r1, r4, #21
 8008468:	428f      	cmp	r7, r1
 800846a:	bf38      	it	cc
 800846c:	2204      	movcc	r2, #4
 800846e:	9201      	str	r2, [sp, #4]
 8008470:	9a02      	ldr	r2, [sp, #8]
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	429a      	cmp	r2, r3
 8008476:	d80c      	bhi.n	8008492 <__multiply+0x9e>
 8008478:	2e00      	cmp	r6, #0
 800847a:	dd03      	ble.n	8008484 <__multiply+0x90>
 800847c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008480:	2b00      	cmp	r3, #0
 8008482:	d05a      	beq.n	800853a <__multiply+0x146>
 8008484:	6106      	str	r6, [r0, #16]
 8008486:	b005      	add	sp, #20
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	f843 2b04 	str.w	r2, [r3], #4
 8008490:	e7d8      	b.n	8008444 <__multiply+0x50>
 8008492:	f8b3 a000 	ldrh.w	sl, [r3]
 8008496:	f1ba 0f00 	cmp.w	sl, #0
 800849a:	d024      	beq.n	80084e6 <__multiply+0xf2>
 800849c:	f104 0e14 	add.w	lr, r4, #20
 80084a0:	46a9      	mov	r9, r5
 80084a2:	f04f 0c00 	mov.w	ip, #0
 80084a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084aa:	f8d9 1000 	ldr.w	r1, [r9]
 80084ae:	fa1f fb82 	uxth.w	fp, r2
 80084b2:	b289      	uxth	r1, r1
 80084b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80084b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084bc:	f8d9 2000 	ldr.w	r2, [r9]
 80084c0:	4461      	add	r1, ip
 80084c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084ce:	b289      	uxth	r1, r1
 80084d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084d4:	4577      	cmp	r7, lr
 80084d6:	f849 1b04 	str.w	r1, [r9], #4
 80084da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084de:	d8e2      	bhi.n	80084a6 <__multiply+0xb2>
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	f845 c002 	str.w	ip, [r5, r2]
 80084e6:	9a03      	ldr	r2, [sp, #12]
 80084e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084ec:	3304      	adds	r3, #4
 80084ee:	f1b9 0f00 	cmp.w	r9, #0
 80084f2:	d020      	beq.n	8008536 <__multiply+0x142>
 80084f4:	6829      	ldr	r1, [r5, #0]
 80084f6:	f104 0c14 	add.w	ip, r4, #20
 80084fa:	46ae      	mov	lr, r5
 80084fc:	f04f 0a00 	mov.w	sl, #0
 8008500:	f8bc b000 	ldrh.w	fp, [ip]
 8008504:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008508:	fb09 220b 	mla	r2, r9, fp, r2
 800850c:	4492      	add	sl, r2
 800850e:	b289      	uxth	r1, r1
 8008510:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008514:	f84e 1b04 	str.w	r1, [lr], #4
 8008518:	f85c 2b04 	ldr.w	r2, [ip], #4
 800851c:	f8be 1000 	ldrh.w	r1, [lr]
 8008520:	0c12      	lsrs	r2, r2, #16
 8008522:	fb09 1102 	mla	r1, r9, r2, r1
 8008526:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800852a:	4567      	cmp	r7, ip
 800852c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008530:	d8e6      	bhi.n	8008500 <__multiply+0x10c>
 8008532:	9a01      	ldr	r2, [sp, #4]
 8008534:	50a9      	str	r1, [r5, r2]
 8008536:	3504      	adds	r5, #4
 8008538:	e79a      	b.n	8008470 <__multiply+0x7c>
 800853a:	3e01      	subs	r6, #1
 800853c:	e79c      	b.n	8008478 <__multiply+0x84>
 800853e:	bf00      	nop
 8008540:	0800b677 	.word	0x0800b677
 8008544:	0800b688 	.word	0x0800b688

08008548 <__pow5mult>:
 8008548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854c:	4615      	mov	r5, r2
 800854e:	f012 0203 	ands.w	r2, r2, #3
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	d007      	beq.n	8008568 <__pow5mult+0x20>
 8008558:	4c25      	ldr	r4, [pc, #148]	; (80085f0 <__pow5mult+0xa8>)
 800855a:	3a01      	subs	r2, #1
 800855c:	2300      	movs	r3, #0
 800855e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008562:	f7ff fe9b 	bl	800829c <__multadd>
 8008566:	4607      	mov	r7, r0
 8008568:	10ad      	asrs	r5, r5, #2
 800856a:	d03d      	beq.n	80085e8 <__pow5mult+0xa0>
 800856c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800856e:	b97c      	cbnz	r4, 8008590 <__pow5mult+0x48>
 8008570:	2010      	movs	r0, #16
 8008572:	f7ff fe1b 	bl	80081ac <malloc>
 8008576:	4602      	mov	r2, r0
 8008578:	6270      	str	r0, [r6, #36]	; 0x24
 800857a:	b928      	cbnz	r0, 8008588 <__pow5mult+0x40>
 800857c:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <__pow5mult+0xac>)
 800857e:	481e      	ldr	r0, [pc, #120]	; (80085f8 <__pow5mult+0xb0>)
 8008580:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008584:	f000 fc0e 	bl	8008da4 <__assert_func>
 8008588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800858c:	6004      	str	r4, [r0, #0]
 800858e:	60c4      	str	r4, [r0, #12]
 8008590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008598:	b94c      	cbnz	r4, 80085ae <__pow5mult+0x66>
 800859a:	f240 2171 	movw	r1, #625	; 0x271
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ff12 	bl	80083c8 <__i2b>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085aa:	4604      	mov	r4, r0
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	f04f 0900 	mov.w	r9, #0
 80085b2:	07eb      	lsls	r3, r5, #31
 80085b4:	d50a      	bpl.n	80085cc <__pow5mult+0x84>
 80085b6:	4639      	mov	r1, r7
 80085b8:	4622      	mov	r2, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ff1a 	bl	80083f4 <__multiply>
 80085c0:	4639      	mov	r1, r7
 80085c2:	4680      	mov	r8, r0
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff fe47 	bl	8008258 <_Bfree>
 80085ca:	4647      	mov	r7, r8
 80085cc:	106d      	asrs	r5, r5, #1
 80085ce:	d00b      	beq.n	80085e8 <__pow5mult+0xa0>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	b938      	cbnz	r0, 80085e4 <__pow5mult+0x9c>
 80085d4:	4622      	mov	r2, r4
 80085d6:	4621      	mov	r1, r4
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ff0b 	bl	80083f4 <__multiply>
 80085de:	6020      	str	r0, [r4, #0]
 80085e0:	f8c0 9000 	str.w	r9, [r0]
 80085e4:	4604      	mov	r4, r0
 80085e6:	e7e4      	b.n	80085b2 <__pow5mult+0x6a>
 80085e8:	4638      	mov	r0, r7
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	bf00      	nop
 80085f0:	0800b7d8 	.word	0x0800b7d8
 80085f4:	0800b605 	.word	0x0800b605
 80085f8:	0800b688 	.word	0x0800b688

080085fc <__lshift>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	6849      	ldr	r1, [r1, #4]
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	4607      	mov	r7, r0
 800860e:	4691      	mov	r9, r2
 8008610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008614:	f108 0601 	add.w	r6, r8, #1
 8008618:	42b3      	cmp	r3, r6
 800861a:	db0b      	blt.n	8008634 <__lshift+0x38>
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff fddb 	bl	80081d8 <_Balloc>
 8008622:	4605      	mov	r5, r0
 8008624:	b948      	cbnz	r0, 800863a <__lshift+0x3e>
 8008626:	4602      	mov	r2, r0
 8008628:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <__lshift+0xd8>)
 800862a:	482b      	ldr	r0, [pc, #172]	; (80086d8 <__lshift+0xdc>)
 800862c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008630:	f000 fbb8 	bl	8008da4 <__assert_func>
 8008634:	3101      	adds	r1, #1
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	e7ee      	b.n	8008618 <__lshift+0x1c>
 800863a:	2300      	movs	r3, #0
 800863c:	f100 0114 	add.w	r1, r0, #20
 8008640:	f100 0210 	add.w	r2, r0, #16
 8008644:	4618      	mov	r0, r3
 8008646:	4553      	cmp	r3, sl
 8008648:	db37      	blt.n	80086ba <__lshift+0xbe>
 800864a:	6920      	ldr	r0, [r4, #16]
 800864c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008650:	f104 0314 	add.w	r3, r4, #20
 8008654:	f019 091f 	ands.w	r9, r9, #31
 8008658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800865c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008660:	d02f      	beq.n	80086c2 <__lshift+0xc6>
 8008662:	f1c9 0e20 	rsb	lr, r9, #32
 8008666:	468a      	mov	sl, r1
 8008668:	f04f 0c00 	mov.w	ip, #0
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	fa02 f209 	lsl.w	r2, r2, r9
 8008672:	ea42 020c 	orr.w	r2, r2, ip
 8008676:	f84a 2b04 	str.w	r2, [sl], #4
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	4298      	cmp	r0, r3
 8008680:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008684:	d8f2      	bhi.n	800866c <__lshift+0x70>
 8008686:	1b03      	subs	r3, r0, r4
 8008688:	3b15      	subs	r3, #21
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	3304      	adds	r3, #4
 8008690:	f104 0215 	add.w	r2, r4, #21
 8008694:	4290      	cmp	r0, r2
 8008696:	bf38      	it	cc
 8008698:	2304      	movcc	r3, #4
 800869a:	f841 c003 	str.w	ip, [r1, r3]
 800869e:	f1bc 0f00 	cmp.w	ip, #0
 80086a2:	d001      	beq.n	80086a8 <__lshift+0xac>
 80086a4:	f108 0602 	add.w	r6, r8, #2
 80086a8:	3e01      	subs	r6, #1
 80086aa:	4638      	mov	r0, r7
 80086ac:	612e      	str	r6, [r5, #16]
 80086ae:	4621      	mov	r1, r4
 80086b0:	f7ff fdd2 	bl	8008258 <_Bfree>
 80086b4:	4628      	mov	r0, r5
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80086be:	3301      	adds	r3, #1
 80086c0:	e7c1      	b.n	8008646 <__lshift+0x4a>
 80086c2:	3904      	subs	r1, #4
 80086c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086cc:	4298      	cmp	r0, r3
 80086ce:	d8f9      	bhi.n	80086c4 <__lshift+0xc8>
 80086d0:	e7ea      	b.n	80086a8 <__lshift+0xac>
 80086d2:	bf00      	nop
 80086d4:	0800b677 	.word	0x0800b677
 80086d8:	0800b688 	.word	0x0800b688

080086dc <__mcmp>:
 80086dc:	b530      	push	{r4, r5, lr}
 80086de:	6902      	ldr	r2, [r0, #16]
 80086e0:	690c      	ldr	r4, [r1, #16]
 80086e2:	1b12      	subs	r2, r2, r4
 80086e4:	d10e      	bne.n	8008704 <__mcmp+0x28>
 80086e6:	f100 0314 	add.w	r3, r0, #20
 80086ea:	3114      	adds	r1, #20
 80086ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086fc:	42a5      	cmp	r5, r4
 80086fe:	d003      	beq.n	8008708 <__mcmp+0x2c>
 8008700:	d305      	bcc.n	800870e <__mcmp+0x32>
 8008702:	2201      	movs	r2, #1
 8008704:	4610      	mov	r0, r2
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	4283      	cmp	r3, r0
 800870a:	d3f3      	bcc.n	80086f4 <__mcmp+0x18>
 800870c:	e7fa      	b.n	8008704 <__mcmp+0x28>
 800870e:	f04f 32ff 	mov.w	r2, #4294967295
 8008712:	e7f7      	b.n	8008704 <__mcmp+0x28>

08008714 <__mdiff>:
 8008714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	460c      	mov	r4, r1
 800871a:	4606      	mov	r6, r0
 800871c:	4611      	mov	r1, r2
 800871e:	4620      	mov	r0, r4
 8008720:	4690      	mov	r8, r2
 8008722:	f7ff ffdb 	bl	80086dc <__mcmp>
 8008726:	1e05      	subs	r5, r0, #0
 8008728:	d110      	bne.n	800874c <__mdiff+0x38>
 800872a:	4629      	mov	r1, r5
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff fd53 	bl	80081d8 <_Balloc>
 8008732:	b930      	cbnz	r0, 8008742 <__mdiff+0x2e>
 8008734:	4b3a      	ldr	r3, [pc, #232]	; (8008820 <__mdiff+0x10c>)
 8008736:	4602      	mov	r2, r0
 8008738:	f240 2132 	movw	r1, #562	; 0x232
 800873c:	4839      	ldr	r0, [pc, #228]	; (8008824 <__mdiff+0x110>)
 800873e:	f000 fb31 	bl	8008da4 <__assert_func>
 8008742:	2301      	movs	r3, #1
 8008744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	bfa4      	itt	ge
 800874e:	4643      	movge	r3, r8
 8008750:	46a0      	movge	r8, r4
 8008752:	4630      	mov	r0, r6
 8008754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008758:	bfa6      	itte	ge
 800875a:	461c      	movge	r4, r3
 800875c:	2500      	movge	r5, #0
 800875e:	2501      	movlt	r5, #1
 8008760:	f7ff fd3a 	bl	80081d8 <_Balloc>
 8008764:	b920      	cbnz	r0, 8008770 <__mdiff+0x5c>
 8008766:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <__mdiff+0x10c>)
 8008768:	4602      	mov	r2, r0
 800876a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800876e:	e7e5      	b.n	800873c <__mdiff+0x28>
 8008770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008774:	6926      	ldr	r6, [r4, #16]
 8008776:	60c5      	str	r5, [r0, #12]
 8008778:	f104 0914 	add.w	r9, r4, #20
 800877c:	f108 0514 	add.w	r5, r8, #20
 8008780:	f100 0e14 	add.w	lr, r0, #20
 8008784:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800878c:	f108 0210 	add.w	r2, r8, #16
 8008790:	46f2      	mov	sl, lr
 8008792:	2100      	movs	r1, #0
 8008794:	f859 3b04 	ldr.w	r3, [r9], #4
 8008798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800879c:	fa1f f883 	uxth.w	r8, r3
 80087a0:	fa11 f18b 	uxtah	r1, r1, fp
 80087a4:	0c1b      	lsrs	r3, r3, #16
 80087a6:	eba1 0808 	sub.w	r8, r1, r8
 80087aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087b2:	fa1f f888 	uxth.w	r8, r8
 80087b6:	1419      	asrs	r1, r3, #16
 80087b8:	454e      	cmp	r6, r9
 80087ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087be:	f84a 3b04 	str.w	r3, [sl], #4
 80087c2:	d8e7      	bhi.n	8008794 <__mdiff+0x80>
 80087c4:	1b33      	subs	r3, r6, r4
 80087c6:	3b15      	subs	r3, #21
 80087c8:	f023 0303 	bic.w	r3, r3, #3
 80087cc:	3304      	adds	r3, #4
 80087ce:	3415      	adds	r4, #21
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	bf38      	it	cc
 80087d4:	2304      	movcc	r3, #4
 80087d6:	441d      	add	r5, r3
 80087d8:	4473      	add	r3, lr
 80087da:	469e      	mov	lr, r3
 80087dc:	462e      	mov	r6, r5
 80087de:	4566      	cmp	r6, ip
 80087e0:	d30e      	bcc.n	8008800 <__mdiff+0xec>
 80087e2:	f10c 0203 	add.w	r2, ip, #3
 80087e6:	1b52      	subs	r2, r2, r5
 80087e8:	f022 0203 	bic.w	r2, r2, #3
 80087ec:	3d03      	subs	r5, #3
 80087ee:	45ac      	cmp	ip, r5
 80087f0:	bf38      	it	cc
 80087f2:	2200      	movcc	r2, #0
 80087f4:	441a      	add	r2, r3
 80087f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087fa:	b17b      	cbz	r3, 800881c <__mdiff+0x108>
 80087fc:	6107      	str	r7, [r0, #16]
 80087fe:	e7a3      	b.n	8008748 <__mdiff+0x34>
 8008800:	f856 8b04 	ldr.w	r8, [r6], #4
 8008804:	fa11 f288 	uxtah	r2, r1, r8
 8008808:	1414      	asrs	r4, r2, #16
 800880a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800880e:	b292      	uxth	r2, r2
 8008810:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008814:	f84e 2b04 	str.w	r2, [lr], #4
 8008818:	1421      	asrs	r1, r4, #16
 800881a:	e7e0      	b.n	80087de <__mdiff+0xca>
 800881c:	3f01      	subs	r7, #1
 800881e:	e7ea      	b.n	80087f6 <__mdiff+0xe2>
 8008820:	0800b677 	.word	0x0800b677
 8008824:	0800b688 	.word	0x0800b688

08008828 <__d2b>:
 8008828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800882c:	4689      	mov	r9, r1
 800882e:	2101      	movs	r1, #1
 8008830:	ec57 6b10 	vmov	r6, r7, d0
 8008834:	4690      	mov	r8, r2
 8008836:	f7ff fccf 	bl	80081d8 <_Balloc>
 800883a:	4604      	mov	r4, r0
 800883c:	b930      	cbnz	r0, 800884c <__d2b+0x24>
 800883e:	4602      	mov	r2, r0
 8008840:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <__d2b+0xb0>)
 8008842:	4826      	ldr	r0, [pc, #152]	; (80088dc <__d2b+0xb4>)
 8008844:	f240 310a 	movw	r1, #778	; 0x30a
 8008848:	f000 faac 	bl	8008da4 <__assert_func>
 800884c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008854:	bb35      	cbnz	r5, 80088a4 <__d2b+0x7c>
 8008856:	2e00      	cmp	r6, #0
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	d028      	beq.n	80088ae <__d2b+0x86>
 800885c:	4668      	mov	r0, sp
 800885e:	9600      	str	r6, [sp, #0]
 8008860:	f7ff fd82 	bl	8008368 <__lo0bits>
 8008864:	9900      	ldr	r1, [sp, #0]
 8008866:	b300      	cbz	r0, 80088aa <__d2b+0x82>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	f1c0 0320 	rsb	r3, r0, #32
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	430b      	orrs	r3, r1
 8008874:	40c2      	lsrs	r2, r0
 8008876:	6163      	str	r3, [r4, #20]
 8008878:	9201      	str	r2, [sp, #4]
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	61a3      	str	r3, [r4, #24]
 800887e:	2b00      	cmp	r3, #0
 8008880:	bf14      	ite	ne
 8008882:	2202      	movne	r2, #2
 8008884:	2201      	moveq	r2, #1
 8008886:	6122      	str	r2, [r4, #16]
 8008888:	b1d5      	cbz	r5, 80088c0 <__d2b+0x98>
 800888a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800888e:	4405      	add	r5, r0
 8008890:	f8c9 5000 	str.w	r5, [r9]
 8008894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008898:	f8c8 0000 	str.w	r0, [r8]
 800889c:	4620      	mov	r0, r4
 800889e:	b003      	add	sp, #12
 80088a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088a8:	e7d5      	b.n	8008856 <__d2b+0x2e>
 80088aa:	6161      	str	r1, [r4, #20]
 80088ac:	e7e5      	b.n	800887a <__d2b+0x52>
 80088ae:	a801      	add	r0, sp, #4
 80088b0:	f7ff fd5a 	bl	8008368 <__lo0bits>
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	6163      	str	r3, [r4, #20]
 80088b8:	2201      	movs	r2, #1
 80088ba:	6122      	str	r2, [r4, #16]
 80088bc:	3020      	adds	r0, #32
 80088be:	e7e3      	b.n	8008888 <__d2b+0x60>
 80088c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088c8:	f8c9 0000 	str.w	r0, [r9]
 80088cc:	6918      	ldr	r0, [r3, #16]
 80088ce:	f7ff fd2b 	bl	8008328 <__hi0bits>
 80088d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088d6:	e7df      	b.n	8008898 <__d2b+0x70>
 80088d8:	0800b677 	.word	0x0800b677
 80088dc:	0800b688 	.word	0x0800b688

080088e0 <_calloc_r>:
 80088e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e2:	fba1 2402 	umull	r2, r4, r1, r2
 80088e6:	b94c      	cbnz	r4, 80088fc <_calloc_r+0x1c>
 80088e8:	4611      	mov	r1, r2
 80088ea:	9201      	str	r2, [sp, #4]
 80088ec:	f000 f87a 	bl	80089e4 <_malloc_r>
 80088f0:	9a01      	ldr	r2, [sp, #4]
 80088f2:	4605      	mov	r5, r0
 80088f4:	b930      	cbnz	r0, 8008904 <_calloc_r+0x24>
 80088f6:	4628      	mov	r0, r5
 80088f8:	b003      	add	sp, #12
 80088fa:	bd30      	pop	{r4, r5, pc}
 80088fc:	220c      	movs	r2, #12
 80088fe:	6002      	str	r2, [r0, #0]
 8008900:	2500      	movs	r5, #0
 8008902:	e7f8      	b.n	80088f6 <_calloc_r+0x16>
 8008904:	4621      	mov	r1, r4
 8008906:	f7fe f941 	bl	8006b8c <memset>
 800890a:	e7f4      	b.n	80088f6 <_calloc_r+0x16>

0800890c <_free_r>:
 800890c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890e:	2900      	cmp	r1, #0
 8008910:	d044      	beq.n	800899c <_free_r+0x90>
 8008912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008916:	9001      	str	r0, [sp, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f1a1 0404 	sub.w	r4, r1, #4
 800891e:	bfb8      	it	lt
 8008920:	18e4      	addlt	r4, r4, r3
 8008922:	f000 fa9b 	bl	8008e5c <__malloc_lock>
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <_free_r+0x94>)
 8008928:	9801      	ldr	r0, [sp, #4]
 800892a:	6813      	ldr	r3, [r2, #0]
 800892c:	b933      	cbnz	r3, 800893c <_free_r+0x30>
 800892e:	6063      	str	r3, [r4, #4]
 8008930:	6014      	str	r4, [r2, #0]
 8008932:	b003      	add	sp, #12
 8008934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008938:	f000 ba96 	b.w	8008e68 <__malloc_unlock>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d908      	bls.n	8008952 <_free_r+0x46>
 8008940:	6825      	ldr	r5, [r4, #0]
 8008942:	1961      	adds	r1, r4, r5
 8008944:	428b      	cmp	r3, r1
 8008946:	bf01      	itttt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	e7ed      	b.n	800892e <_free_r+0x22>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x50>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x46>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1855      	adds	r5, r2, r1
 8008960:	42a5      	cmp	r5, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x70>
 8008964:	6824      	ldr	r4, [r4, #0]
 8008966:	4421      	add	r1, r4
 8008968:	1854      	adds	r4, r2, r1
 800896a:	42a3      	cmp	r3, r4
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1e0      	bne.n	8008932 <_free_r+0x26>
 8008970:	681c      	ldr	r4, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	6053      	str	r3, [r2, #4]
 8008976:	4421      	add	r1, r4
 8008978:	6011      	str	r1, [r2, #0]
 800897a:	e7da      	b.n	8008932 <_free_r+0x26>
 800897c:	d902      	bls.n	8008984 <_free_r+0x78>
 800897e:	230c      	movs	r3, #12
 8008980:	6003      	str	r3, [r0, #0]
 8008982:	e7d6      	b.n	8008932 <_free_r+0x26>
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	1961      	adds	r1, r4, r5
 8008988:	428b      	cmp	r3, r1
 800898a:	bf04      	itt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	bf04      	itt	eq
 8008994:	1949      	addeq	r1, r1, r5
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	6054      	str	r4, [r2, #4]
 800899a:	e7ca      	b.n	8008932 <_free_r+0x26>
 800899c:	b003      	add	sp, #12
 800899e:	bd30      	pop	{r4, r5, pc}
 80089a0:	2000089c 	.word	0x2000089c

080089a4 <sbrk_aligned>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4e0e      	ldr	r6, [pc, #56]	; (80089e0 <sbrk_aligned+0x3c>)
 80089a8:	460c      	mov	r4, r1
 80089aa:	6831      	ldr	r1, [r6, #0]
 80089ac:	4605      	mov	r5, r0
 80089ae:	b911      	cbnz	r1, 80089b6 <sbrk_aligned+0x12>
 80089b0:	f000 f9e8 	bl	8008d84 <_sbrk_r>
 80089b4:	6030      	str	r0, [r6, #0]
 80089b6:	4621      	mov	r1, r4
 80089b8:	4628      	mov	r0, r5
 80089ba:	f000 f9e3 	bl	8008d84 <_sbrk_r>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d00a      	beq.n	80089d8 <sbrk_aligned+0x34>
 80089c2:	1cc4      	adds	r4, r0, #3
 80089c4:	f024 0403 	bic.w	r4, r4, #3
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d007      	beq.n	80089dc <sbrk_aligned+0x38>
 80089cc:	1a21      	subs	r1, r4, r0
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f9d8 	bl	8008d84 <_sbrk_r>
 80089d4:	3001      	adds	r0, #1
 80089d6:	d101      	bne.n	80089dc <sbrk_aligned+0x38>
 80089d8:	f04f 34ff 	mov.w	r4, #4294967295
 80089dc:	4620      	mov	r0, r4
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	200008a0 	.word	0x200008a0

080089e4 <_malloc_r>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	1ccd      	adds	r5, r1, #3
 80089ea:	f025 0503 	bic.w	r5, r5, #3
 80089ee:	3508      	adds	r5, #8
 80089f0:	2d0c      	cmp	r5, #12
 80089f2:	bf38      	it	cc
 80089f4:	250c      	movcc	r5, #12
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	4607      	mov	r7, r0
 80089fa:	db01      	blt.n	8008a00 <_malloc_r+0x1c>
 80089fc:	42a9      	cmp	r1, r5
 80089fe:	d905      	bls.n	8008a0c <_malloc_r+0x28>
 8008a00:	230c      	movs	r3, #12
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	2600      	movs	r6, #0
 8008a06:	4630      	mov	r0, r6
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	4e2e      	ldr	r6, [pc, #184]	; (8008ac8 <_malloc_r+0xe4>)
 8008a0e:	f000 fa25 	bl	8008e5c <__malloc_lock>
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	461c      	mov	r4, r3
 8008a16:	bb34      	cbnz	r4, 8008a66 <_malloc_r+0x82>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f7ff ffc2 	bl	80089a4 <sbrk_aligned>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	4604      	mov	r4, r0
 8008a24:	d14d      	bne.n	8008ac2 <_malloc_r+0xde>
 8008a26:	6834      	ldr	r4, [r6, #0]
 8008a28:	4626      	mov	r6, r4
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d140      	bne.n	8008ab0 <_malloc_r+0xcc>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	4631      	mov	r1, r6
 8008a32:	4638      	mov	r0, r7
 8008a34:	eb04 0803 	add.w	r8, r4, r3
 8008a38:	f000 f9a4 	bl	8008d84 <_sbrk_r>
 8008a3c:	4580      	cmp	r8, r0
 8008a3e:	d13a      	bne.n	8008ab6 <_malloc_r+0xd2>
 8008a40:	6821      	ldr	r1, [r4, #0]
 8008a42:	3503      	adds	r5, #3
 8008a44:	1a6d      	subs	r5, r5, r1
 8008a46:	f025 0503 	bic.w	r5, r5, #3
 8008a4a:	3508      	adds	r5, #8
 8008a4c:	2d0c      	cmp	r5, #12
 8008a4e:	bf38      	it	cc
 8008a50:	250c      	movcc	r5, #12
 8008a52:	4629      	mov	r1, r5
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ffa5 	bl	80089a4 <sbrk_aligned>
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d02b      	beq.n	8008ab6 <_malloc_r+0xd2>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	442b      	add	r3, r5
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	e00e      	b.n	8008a84 <_malloc_r+0xa0>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	1b52      	subs	r2, r2, r5
 8008a6a:	d41e      	bmi.n	8008aaa <_malloc_r+0xc6>
 8008a6c:	2a0b      	cmp	r2, #11
 8008a6e:	d916      	bls.n	8008a9e <_malloc_r+0xba>
 8008a70:	1961      	adds	r1, r4, r5
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	6025      	str	r5, [r4, #0]
 8008a76:	bf18      	it	ne
 8008a78:	6059      	strne	r1, [r3, #4]
 8008a7a:	6863      	ldr	r3, [r4, #4]
 8008a7c:	bf08      	it	eq
 8008a7e:	6031      	streq	r1, [r6, #0]
 8008a80:	5162      	str	r2, [r4, r5]
 8008a82:	604b      	str	r3, [r1, #4]
 8008a84:	4638      	mov	r0, r7
 8008a86:	f104 060b 	add.w	r6, r4, #11
 8008a8a:	f000 f9ed 	bl	8008e68 <__malloc_unlock>
 8008a8e:	f026 0607 	bic.w	r6, r6, #7
 8008a92:	1d23      	adds	r3, r4, #4
 8008a94:	1af2      	subs	r2, r6, r3
 8008a96:	d0b6      	beq.n	8008a06 <_malloc_r+0x22>
 8008a98:	1b9b      	subs	r3, r3, r6
 8008a9a:	50a3      	str	r3, [r4, r2]
 8008a9c:	e7b3      	b.n	8008a06 <_malloc_r+0x22>
 8008a9e:	6862      	ldr	r2, [r4, #4]
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	bf0c      	ite	eq
 8008aa4:	6032      	streq	r2, [r6, #0]
 8008aa6:	605a      	strne	r2, [r3, #4]
 8008aa8:	e7ec      	b.n	8008a84 <_malloc_r+0xa0>
 8008aaa:	4623      	mov	r3, r4
 8008aac:	6864      	ldr	r4, [r4, #4]
 8008aae:	e7b2      	b.n	8008a16 <_malloc_r+0x32>
 8008ab0:	4634      	mov	r4, r6
 8008ab2:	6876      	ldr	r6, [r6, #4]
 8008ab4:	e7b9      	b.n	8008a2a <_malloc_r+0x46>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	603b      	str	r3, [r7, #0]
 8008aba:	4638      	mov	r0, r7
 8008abc:	f000 f9d4 	bl	8008e68 <__malloc_unlock>
 8008ac0:	e7a1      	b.n	8008a06 <_malloc_r+0x22>
 8008ac2:	6025      	str	r5, [r4, #0]
 8008ac4:	e7de      	b.n	8008a84 <_malloc_r+0xa0>
 8008ac6:	bf00      	nop
 8008ac8:	2000089c 	.word	0x2000089c

08008acc <__ssputs_r>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	688e      	ldr	r6, [r1, #8]
 8008ad2:	429e      	cmp	r6, r3
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	4690      	mov	r8, r2
 8008ada:	461f      	mov	r7, r3
 8008adc:	d838      	bhi.n	8008b50 <__ssputs_r+0x84>
 8008ade:	898a      	ldrh	r2, [r1, #12]
 8008ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ae4:	d032      	beq.n	8008b4c <__ssputs_r+0x80>
 8008ae6:	6825      	ldr	r5, [r4, #0]
 8008ae8:	6909      	ldr	r1, [r1, #16]
 8008aea:	eba5 0901 	sub.w	r9, r5, r1
 8008aee:	6965      	ldr	r5, [r4, #20]
 8008af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af8:	3301      	adds	r3, #1
 8008afa:	444b      	add	r3, r9
 8008afc:	106d      	asrs	r5, r5, #1
 8008afe:	429d      	cmp	r5, r3
 8008b00:	bf38      	it	cc
 8008b02:	461d      	movcc	r5, r3
 8008b04:	0553      	lsls	r3, r2, #21
 8008b06:	d531      	bpl.n	8008b6c <__ssputs_r+0xa0>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7ff ff6b 	bl	80089e4 <_malloc_r>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	b950      	cbnz	r0, 8008b28 <__ssputs_r+0x5c>
 8008b12:	230c      	movs	r3, #12
 8008b14:	f8ca 3000 	str.w	r3, [sl]
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	6921      	ldr	r1, [r4, #16]
 8008b2a:	464a      	mov	r2, r9
 8008b2c:	f7ff fb46 	bl	80081bc <memcpy>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	6126      	str	r6, [r4, #16]
 8008b3e:	6165      	str	r5, [r4, #20]
 8008b40:	444e      	add	r6, r9
 8008b42:	eba5 0509 	sub.w	r5, r5, r9
 8008b46:	6026      	str	r6, [r4, #0]
 8008b48:	60a5      	str	r5, [r4, #8]
 8008b4a:	463e      	mov	r6, r7
 8008b4c:	42be      	cmp	r6, r7
 8008b4e:	d900      	bls.n	8008b52 <__ssputs_r+0x86>
 8008b50:	463e      	mov	r6, r7
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	4632      	mov	r2, r6
 8008b56:	4641      	mov	r1, r8
 8008b58:	f000 f966 	bl	8008e28 <memmove>
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	1b9b      	subs	r3, r3, r6
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4433      	add	r3, r6
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e7db      	b.n	8008b24 <__ssputs_r+0x58>
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	f000 f981 	bl	8008e74 <_realloc_r>
 8008b72:	4606      	mov	r6, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1e1      	bne.n	8008b3c <__ssputs_r+0x70>
 8008b78:	6921      	ldr	r1, [r4, #16]
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	f7ff fec6 	bl	800890c <_free_r>
 8008b80:	e7c7      	b.n	8008b12 <__ssputs_r+0x46>
	...

08008b84 <_svfiprintf_r>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	4698      	mov	r8, r3
 8008b8a:	898b      	ldrh	r3, [r1, #12]
 8008b8c:	061b      	lsls	r3, r3, #24
 8008b8e:	b09d      	sub	sp, #116	; 0x74
 8008b90:	4607      	mov	r7, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	d50e      	bpl.n	8008bb6 <_svfiprintf_r+0x32>
 8008b98:	690b      	ldr	r3, [r1, #16]
 8008b9a:	b963      	cbnz	r3, 8008bb6 <_svfiprintf_r+0x32>
 8008b9c:	2140      	movs	r1, #64	; 0x40
 8008b9e:	f7ff ff21 	bl	80089e4 <_malloc_r>
 8008ba2:	6028      	str	r0, [r5, #0]
 8008ba4:	6128      	str	r0, [r5, #16]
 8008ba6:	b920      	cbnz	r0, 8008bb2 <_svfiprintf_r+0x2e>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e0d1      	b.n	8008d56 <_svfiprintf_r+0x1d2>
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	616b      	str	r3, [r5, #20]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bba:	2320      	movs	r3, #32
 8008bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc4:	2330      	movs	r3, #48	; 0x30
 8008bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d70 <_svfiprintf_r+0x1ec>
 8008bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bce:	f04f 0901 	mov.w	r9, #1
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	469a      	mov	sl, r3
 8008bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bda:	b10a      	cbz	r2, 8008be0 <_svfiprintf_r+0x5c>
 8008bdc:	2a25      	cmp	r2, #37	; 0x25
 8008bde:	d1f9      	bne.n	8008bd4 <_svfiprintf_r+0x50>
 8008be0:	ebba 0b04 	subs.w	fp, sl, r4
 8008be4:	d00b      	beq.n	8008bfe <_svfiprintf_r+0x7a>
 8008be6:	465b      	mov	r3, fp
 8008be8:	4622      	mov	r2, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff ff6d 	bl	8008acc <__ssputs_r>
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f000 80aa 	beq.w	8008d4c <_svfiprintf_r+0x1c8>
 8008bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bfa:	445a      	add	r2, fp
 8008bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 80a2 	beq.w	8008d4c <_svfiprintf_r+0x1c8>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c12:	f10a 0a01 	add.w	sl, sl, #1
 8008c16:	9304      	str	r3, [sp, #16]
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c20:	4654      	mov	r4, sl
 8008c22:	2205      	movs	r2, #5
 8008c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c28:	4851      	ldr	r0, [pc, #324]	; (8008d70 <_svfiprintf_r+0x1ec>)
 8008c2a:	f7f7 fad9 	bl	80001e0 <memchr>
 8008c2e:	9a04      	ldr	r2, [sp, #16]
 8008c30:	b9d8      	cbnz	r0, 8008c6a <_svfiprintf_r+0xe6>
 8008c32:	06d0      	lsls	r0, r2, #27
 8008c34:	bf44      	itt	mi
 8008c36:	2320      	movmi	r3, #32
 8008c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3c:	0711      	lsls	r1, r2, #28
 8008c3e:	bf44      	itt	mi
 8008c40:	232b      	movmi	r3, #43	; 0x2b
 8008c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c46:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4c:	d015      	beq.n	8008c7a <_svfiprintf_r+0xf6>
 8008c4e:	9a07      	ldr	r2, [sp, #28]
 8008c50:	4654      	mov	r4, sl
 8008c52:	2000      	movs	r0, #0
 8008c54:	f04f 0c0a 	mov.w	ip, #10
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5e:	3b30      	subs	r3, #48	; 0x30
 8008c60:	2b09      	cmp	r3, #9
 8008c62:	d94e      	bls.n	8008d02 <_svfiprintf_r+0x17e>
 8008c64:	b1b0      	cbz	r0, 8008c94 <_svfiprintf_r+0x110>
 8008c66:	9207      	str	r2, [sp, #28]
 8008c68:	e014      	b.n	8008c94 <_svfiprintf_r+0x110>
 8008c6a:	eba0 0308 	sub.w	r3, r0, r8
 8008c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c72:	4313      	orrs	r3, r2
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	46a2      	mov	sl, r4
 8008c78:	e7d2      	b.n	8008c20 <_svfiprintf_r+0x9c>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	1d19      	adds	r1, r3, #4
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	9103      	str	r1, [sp, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfbb      	ittet	lt
 8008c86:	425b      	neglt	r3, r3
 8008c88:	f042 0202 	orrlt.w	r2, r2, #2
 8008c8c:	9307      	strge	r3, [sp, #28]
 8008c8e:	9307      	strlt	r3, [sp, #28]
 8008c90:	bfb8      	it	lt
 8008c92:	9204      	strlt	r2, [sp, #16]
 8008c94:	7823      	ldrb	r3, [r4, #0]
 8008c96:	2b2e      	cmp	r3, #46	; 0x2e
 8008c98:	d10c      	bne.n	8008cb4 <_svfiprintf_r+0x130>
 8008c9a:	7863      	ldrb	r3, [r4, #1]
 8008c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9e:	d135      	bne.n	8008d0c <_svfiprintf_r+0x188>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	1d1a      	adds	r2, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	9203      	str	r2, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfb8      	it	lt
 8008cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cb0:	3402      	adds	r4, #2
 8008cb2:	9305      	str	r3, [sp, #20]
 8008cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d80 <_svfiprintf_r+0x1fc>
 8008cb8:	7821      	ldrb	r1, [r4, #0]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	f7f7 fa8f 	bl	80001e0 <memchr>
 8008cc2:	b140      	cbz	r0, 8008cd6 <_svfiprintf_r+0x152>
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	eba0 000a 	sub.w	r0, r0, sl
 8008cca:	fa03 f000 	lsl.w	r0, r3, r0
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	4303      	orrs	r3, r0
 8008cd2:	3401      	adds	r4, #1
 8008cd4:	9304      	str	r3, [sp, #16]
 8008cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cda:	4826      	ldr	r0, [pc, #152]	; (8008d74 <_svfiprintf_r+0x1f0>)
 8008cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce0:	2206      	movs	r2, #6
 8008ce2:	f7f7 fa7d 	bl	80001e0 <memchr>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d038      	beq.n	8008d5c <_svfiprintf_r+0x1d8>
 8008cea:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <_svfiprintf_r+0x1f4>)
 8008cec:	bb1b      	cbnz	r3, 8008d36 <_svfiprintf_r+0x1b2>
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	3307      	adds	r3, #7
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfc:	4433      	add	r3, r6
 8008cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008d00:	e767      	b.n	8008bd2 <_svfiprintf_r+0x4e>
 8008d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d06:	460c      	mov	r4, r1
 8008d08:	2001      	movs	r0, #1
 8008d0a:	e7a5      	b.n	8008c58 <_svfiprintf_r+0xd4>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	3401      	adds	r4, #1
 8008d10:	9305      	str	r3, [sp, #20]
 8008d12:	4619      	mov	r1, r3
 8008d14:	f04f 0c0a 	mov.w	ip, #10
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1e:	3a30      	subs	r2, #48	; 0x30
 8008d20:	2a09      	cmp	r2, #9
 8008d22:	d903      	bls.n	8008d2c <_svfiprintf_r+0x1a8>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0c5      	beq.n	8008cb4 <_svfiprintf_r+0x130>
 8008d28:	9105      	str	r1, [sp, #20]
 8008d2a:	e7c3      	b.n	8008cb4 <_svfiprintf_r+0x130>
 8008d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d30:	4604      	mov	r4, r0
 8008d32:	2301      	movs	r3, #1
 8008d34:	e7f0      	b.n	8008d18 <_svfiprintf_r+0x194>
 8008d36:	ab03      	add	r3, sp, #12
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <_svfiprintf_r+0x1f8>)
 8008d3e:	a904      	add	r1, sp, #16
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7fd ffcb 	bl	8006cdc <_printf_float>
 8008d46:	1c42      	adds	r2, r0, #1
 8008d48:	4606      	mov	r6, r0
 8008d4a:	d1d6      	bne.n	8008cfa <_svfiprintf_r+0x176>
 8008d4c:	89ab      	ldrh	r3, [r5, #12]
 8008d4e:	065b      	lsls	r3, r3, #25
 8008d50:	f53f af2c 	bmi.w	8008bac <_svfiprintf_r+0x28>
 8008d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d56:	b01d      	add	sp, #116	; 0x74
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	ab03      	add	r3, sp, #12
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	462a      	mov	r2, r5
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <_svfiprintf_r+0x1f8>)
 8008d64:	a904      	add	r1, sp, #16
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7fe fa5c 	bl	8007224 <_printf_i>
 8008d6c:	e7eb      	b.n	8008d46 <_svfiprintf_r+0x1c2>
 8008d6e:	bf00      	nop
 8008d70:	0800b7e4 	.word	0x0800b7e4
 8008d74:	0800b7ee 	.word	0x0800b7ee
 8008d78:	08006cdd 	.word	0x08006cdd
 8008d7c:	08008acd 	.word	0x08008acd
 8008d80:	0800b7ea 	.word	0x0800b7ea

08008d84 <_sbrk_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_sbrk_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7f9 feba 	bl	8002b08 <_sbrk>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_sbrk_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_sbrk_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	200008a4 	.word	0x200008a4

08008da4 <__assert_func>:
 8008da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008da6:	4614      	mov	r4, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <__assert_func+0x2c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4605      	mov	r5, r0
 8008db0:	68d8      	ldr	r0, [r3, #12]
 8008db2:	b14c      	cbz	r4, 8008dc8 <__assert_func+0x24>
 8008db4:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <__assert_func+0x30>)
 8008db6:	9100      	str	r1, [sp, #0]
 8008db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dbc:	4906      	ldr	r1, [pc, #24]	; (8008dd8 <__assert_func+0x34>)
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f000 f80e 	bl	8008de0 <fiprintf>
 8008dc4:	f000 faac 	bl	8009320 <abort>
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <__assert_func+0x38>)
 8008dca:	461c      	mov	r4, r3
 8008dcc:	e7f3      	b.n	8008db6 <__assert_func+0x12>
 8008dce:	bf00      	nop
 8008dd0:	20000014 	.word	0x20000014
 8008dd4:	0800b7f5 	.word	0x0800b7f5
 8008dd8:	0800b802 	.word	0x0800b802
 8008ddc:	0800b830 	.word	0x0800b830

08008de0 <fiprintf>:
 8008de0:	b40e      	push	{r1, r2, r3}
 8008de2:	b503      	push	{r0, r1, lr}
 8008de4:	4601      	mov	r1, r0
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <fiprintf+0x20>)
 8008dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dee:	6800      	ldr	r0, [r0, #0]
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	f000 f897 	bl	8008f24 <_vfiprintf_r>
 8008df6:	b002      	add	sp, #8
 8008df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dfc:	b003      	add	sp, #12
 8008dfe:	4770      	bx	lr
 8008e00:	20000014 	.word	0x20000014

08008e04 <__ascii_mbtowc>:
 8008e04:	b082      	sub	sp, #8
 8008e06:	b901      	cbnz	r1, 8008e0a <__ascii_mbtowc+0x6>
 8008e08:	a901      	add	r1, sp, #4
 8008e0a:	b142      	cbz	r2, 8008e1e <__ascii_mbtowc+0x1a>
 8008e0c:	b14b      	cbz	r3, 8008e22 <__ascii_mbtowc+0x1e>
 8008e0e:	7813      	ldrb	r3, [r2, #0]
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	1e10      	subs	r0, r2, #0
 8008e16:	bf18      	it	ne
 8008e18:	2001      	movne	r0, #1
 8008e1a:	b002      	add	sp, #8
 8008e1c:	4770      	bx	lr
 8008e1e:	4610      	mov	r0, r2
 8008e20:	e7fb      	b.n	8008e1a <__ascii_mbtowc+0x16>
 8008e22:	f06f 0001 	mvn.w	r0, #1
 8008e26:	e7f8      	b.n	8008e1a <__ascii_mbtowc+0x16>

08008e28 <memmove>:
 8008e28:	4288      	cmp	r0, r1
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	eb01 0402 	add.w	r4, r1, r2
 8008e30:	d902      	bls.n	8008e38 <memmove+0x10>
 8008e32:	4284      	cmp	r4, r0
 8008e34:	4623      	mov	r3, r4
 8008e36:	d807      	bhi.n	8008e48 <memmove+0x20>
 8008e38:	1e43      	subs	r3, r0, #1
 8008e3a:	42a1      	cmp	r1, r4
 8008e3c:	d008      	beq.n	8008e50 <memmove+0x28>
 8008e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e46:	e7f8      	b.n	8008e3a <memmove+0x12>
 8008e48:	4402      	add	r2, r0
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	428a      	cmp	r2, r1
 8008e4e:	d100      	bne.n	8008e52 <memmove+0x2a>
 8008e50:	bd10      	pop	{r4, pc}
 8008e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e5a:	e7f7      	b.n	8008e4c <memmove+0x24>

08008e5c <__malloc_lock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__malloc_lock+0x8>)
 8008e5e:	f000 bc1f 	b.w	80096a0 <__retarget_lock_acquire_recursive>
 8008e62:	bf00      	nop
 8008e64:	200008a8 	.word	0x200008a8

08008e68 <__malloc_unlock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_unlock+0x8>)
 8008e6a:	f000 bc1a 	b.w	80096a2 <__retarget_lock_release_recursive>
 8008e6e:	bf00      	nop
 8008e70:	200008a8 	.word	0x200008a8

08008e74 <_realloc_r>:
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	b921      	cbnz	r1, 8008e8a <_realloc_r+0x16>
 8008e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	4611      	mov	r1, r2
 8008e86:	f7ff bdad 	b.w	80089e4 <_malloc_r>
 8008e8a:	b92a      	cbnz	r2, 8008e98 <_realloc_r+0x24>
 8008e8c:	f7ff fd3e 	bl	800890c <_free_r>
 8008e90:	4625      	mov	r5, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	f000 fc6a 	bl	8009770 <_malloc_usable_size_r>
 8008e9c:	4284      	cmp	r4, r0
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	d802      	bhi.n	8008ea8 <_realloc_r+0x34>
 8008ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea6:	d812      	bhi.n	8008ece <_realloc_r+0x5a>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4640      	mov	r0, r8
 8008eac:	f7ff fd9a 	bl	80089e4 <_malloc_r>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d0ed      	beq.n	8008e92 <_realloc_r+0x1e>
 8008eb6:	42bc      	cmp	r4, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4631      	mov	r1, r6
 8008ebc:	bf28      	it	cs
 8008ebe:	463a      	movcs	r2, r7
 8008ec0:	f7ff f97c 	bl	80081bc <memcpy>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f7ff fd20 	bl	800890c <_free_r>
 8008ecc:	e7e1      	b.n	8008e92 <_realloc_r+0x1e>
 8008ece:	4635      	mov	r5, r6
 8008ed0:	e7df      	b.n	8008e92 <_realloc_r+0x1e>

08008ed2 <__sfputc_r>:
 8008ed2:	6893      	ldr	r3, [r2, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	b410      	push	{r4}
 8008eda:	6093      	str	r3, [r2, #8]
 8008edc:	da08      	bge.n	8008ef0 <__sfputc_r+0x1e>
 8008ede:	6994      	ldr	r4, [r2, #24]
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	db01      	blt.n	8008ee8 <__sfputc_r+0x16>
 8008ee4:	290a      	cmp	r1, #10
 8008ee6:	d103      	bne.n	8008ef0 <__sfputc_r+0x1e>
 8008ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eec:	f000 b94a 	b.w	8009184 <__swbuf_r>
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	1c58      	adds	r0, r3, #1
 8008ef4:	6010      	str	r0, [r2, #0]
 8008ef6:	7019      	strb	r1, [r3, #0]
 8008ef8:	4608      	mov	r0, r1
 8008efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <__sfputs_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	4606      	mov	r6, r0
 8008f04:	460f      	mov	r7, r1
 8008f06:	4614      	mov	r4, r2
 8008f08:	18d5      	adds	r5, r2, r3
 8008f0a:	42ac      	cmp	r4, r5
 8008f0c:	d101      	bne.n	8008f12 <__sfputs_r+0x12>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e007      	b.n	8008f22 <__sfputs_r+0x22>
 8008f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f16:	463a      	mov	r2, r7
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff ffda 	bl	8008ed2 <__sfputc_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d1f3      	bne.n	8008f0a <__sfputs_r+0xa>
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f24 <_vfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	460d      	mov	r5, r1
 8008f2a:	b09d      	sub	sp, #116	; 0x74
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	4698      	mov	r8, r3
 8008f30:	4606      	mov	r6, r0
 8008f32:	b118      	cbz	r0, 8008f3c <_vfiprintf_r+0x18>
 8008f34:	6983      	ldr	r3, [r0, #24]
 8008f36:	b90b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x18>
 8008f38:	f000 fb14 	bl	8009564 <__sinit>
 8008f3c:	4b89      	ldr	r3, [pc, #548]	; (8009164 <_vfiprintf_r+0x240>)
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	d11b      	bne.n	8008f7a <_vfiprintf_r+0x56>
 8008f42:	6875      	ldr	r5, [r6, #4]
 8008f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f52:	f000 fba5 	bl	80096a0 <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x3c>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b9eb      	cbnz	r3, 8008f9c <_vfiprintf_r+0x78>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f000 f96e 	bl	8009244 <__swsetup_r>
 8008f68:	b1c0      	cbz	r0, 8008f9c <_vfiprintf_r+0x78>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d50e      	bpl.n	8008f8e <_vfiprintf_r+0x6a>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	; 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <_vfiprintf_r+0x244>)
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	d101      	bne.n	8008f84 <_vfiprintf_r+0x60>
 8008f80:	68b5      	ldr	r5, [r6, #8]
 8008f82:	e7df      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f84:	4b79      	ldr	r3, [pc, #484]	; (800916c <_vfiprintf_r+0x248>)
 8008f86:	429d      	cmp	r5, r3
 8008f88:	bf08      	it	eq
 8008f8a:	68f5      	ldreq	r5, [r6, #12]
 8008f8c:	e7da      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	0598      	lsls	r0, r3, #22
 8008f92:	d4ed      	bmi.n	8008f70 <_vfiprintf_r+0x4c>
 8008f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f96:	f000 fb84 	bl	80096a2 <__retarget_lock_release_recursive>
 8008f9a:	e7e9      	b.n	8008f70 <_vfiprintf_r+0x4c>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008faa:	2330      	movs	r3, #48	; 0x30
 8008fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009170 <_vfiprintf_r+0x24c>
 8008fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb4:	f04f 0901 	mov.w	r9, #1
 8008fb8:	4623      	mov	r3, r4
 8008fba:	469a      	mov	sl, r3
 8008fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_vfiprintf_r+0xa2>
 8008fc2:	2a25      	cmp	r2, #37	; 0x25
 8008fc4:	d1f9      	bne.n	8008fba <_vfiprintf_r+0x96>
 8008fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fca:	d00b      	beq.n	8008fe4 <_vfiprintf_r+0xc0>
 8008fcc:	465b      	mov	r3, fp
 8008fce:	4622      	mov	r2, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7ff ff94 	bl	8008f00 <__sfputs_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f000 80aa 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	445a      	add	r2, fp
 8008fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80a2 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff8:	f10a 0a01 	add.w	sl, sl, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009004:	931a      	str	r3, [sp, #104]	; 0x68
 8009006:	4654      	mov	r4, sl
 8009008:	2205      	movs	r2, #5
 800900a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900e:	4858      	ldr	r0, [pc, #352]	; (8009170 <_vfiprintf_r+0x24c>)
 8009010:	f7f7 f8e6 	bl	80001e0 <memchr>
 8009014:	9a04      	ldr	r2, [sp, #16]
 8009016:	b9d8      	cbnz	r0, 8009050 <_vfiprintf_r+0x12c>
 8009018:	06d1      	lsls	r1, r2, #27
 800901a:	bf44      	itt	mi
 800901c:	2320      	movmi	r3, #32
 800901e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009022:	0713      	lsls	r3, r2, #28
 8009024:	bf44      	itt	mi
 8009026:	232b      	movmi	r3, #43	; 0x2b
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d015      	beq.n	8009060 <_vfiprintf_r+0x13c>
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	4654      	mov	r4, sl
 8009038:	2000      	movs	r0, #0
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4621      	mov	r1, r4
 8009040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009044:	3b30      	subs	r3, #48	; 0x30
 8009046:	2b09      	cmp	r3, #9
 8009048:	d94e      	bls.n	80090e8 <_vfiprintf_r+0x1c4>
 800904a:	b1b0      	cbz	r0, 800907a <_vfiprintf_r+0x156>
 800904c:	9207      	str	r2, [sp, #28]
 800904e:	e014      	b.n	800907a <_vfiprintf_r+0x156>
 8009050:	eba0 0308 	sub.w	r3, r0, r8
 8009054:	fa09 f303 	lsl.w	r3, r9, r3
 8009058:	4313      	orrs	r3, r2
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	46a2      	mov	sl, r4
 800905e:	e7d2      	b.n	8009006 <_vfiprintf_r+0xe2>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	1d19      	adds	r1, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	9103      	str	r1, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfbb      	ittet	lt
 800906c:	425b      	neglt	r3, r3
 800906e:	f042 0202 	orrlt.w	r2, r2, #2
 8009072:	9307      	strge	r3, [sp, #28]
 8009074:	9307      	strlt	r3, [sp, #28]
 8009076:	bfb8      	it	lt
 8009078:	9204      	strlt	r2, [sp, #16]
 800907a:	7823      	ldrb	r3, [r4, #0]
 800907c:	2b2e      	cmp	r3, #46	; 0x2e
 800907e:	d10c      	bne.n	800909a <_vfiprintf_r+0x176>
 8009080:	7863      	ldrb	r3, [r4, #1]
 8009082:	2b2a      	cmp	r3, #42	; 0x2a
 8009084:	d135      	bne.n	80090f2 <_vfiprintf_r+0x1ce>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	9203      	str	r2, [sp, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfb8      	it	lt
 8009092:	f04f 33ff 	movlt.w	r3, #4294967295
 8009096:	3402      	adds	r4, #2
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009180 <_vfiprintf_r+0x25c>
 800909e:	7821      	ldrb	r1, [r4, #0]
 80090a0:	2203      	movs	r2, #3
 80090a2:	4650      	mov	r0, sl
 80090a4:	f7f7 f89c 	bl	80001e0 <memchr>
 80090a8:	b140      	cbz	r0, 80090bc <_vfiprintf_r+0x198>
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	eba0 000a 	sub.w	r0, r0, sl
 80090b0:	fa03 f000 	lsl.w	r0, r3, r0
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4303      	orrs	r3, r0
 80090b8:	3401      	adds	r4, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	482c      	ldr	r0, [pc, #176]	; (8009174 <_vfiprintf_r+0x250>)
 80090c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c6:	2206      	movs	r2, #6
 80090c8:	f7f7 f88a 	bl	80001e0 <memchr>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d03f      	beq.n	8009150 <_vfiprintf_r+0x22c>
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <_vfiprintf_r+0x254>)
 80090d2:	bb1b      	cbnz	r3, 800911c <_vfiprintf_r+0x1f8>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	3307      	adds	r3, #7
 80090d8:	f023 0307 	bic.w	r3, r3, #7
 80090dc:	3308      	adds	r3, #8
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	443b      	add	r3, r7
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	e767      	b.n	8008fb8 <_vfiprintf_r+0x94>
 80090e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ec:	460c      	mov	r4, r1
 80090ee:	2001      	movs	r0, #1
 80090f0:	e7a5      	b.n	800903e <_vfiprintf_r+0x11a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009104:	3a30      	subs	r2, #48	; 0x30
 8009106:	2a09      	cmp	r2, #9
 8009108:	d903      	bls.n	8009112 <_vfiprintf_r+0x1ee>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0c5      	beq.n	800909a <_vfiprintf_r+0x176>
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	e7c3      	b.n	800909a <_vfiprintf_r+0x176>
 8009112:	fb0c 2101 	mla	r1, ip, r1, r2
 8009116:	4604      	mov	r4, r0
 8009118:	2301      	movs	r3, #1
 800911a:	e7f0      	b.n	80090fe <_vfiprintf_r+0x1da>
 800911c:	ab03      	add	r3, sp, #12
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	462a      	mov	r2, r5
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <_vfiprintf_r+0x258>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	4630      	mov	r0, r6
 8009128:	f7fd fdd8 	bl	8006cdc <_printf_float>
 800912c:	4607      	mov	r7, r0
 800912e:	1c78      	adds	r0, r7, #1
 8009130:	d1d6      	bne.n	80090e0 <_vfiprintf_r+0x1bc>
 8009132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009134:	07d9      	lsls	r1, r3, #31
 8009136:	d405      	bmi.n	8009144 <_vfiprintf_r+0x220>
 8009138:	89ab      	ldrh	r3, [r5, #12]
 800913a:	059a      	lsls	r2, r3, #22
 800913c:	d402      	bmi.n	8009144 <_vfiprintf_r+0x220>
 800913e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009140:	f000 faaf 	bl	80096a2 <__retarget_lock_release_recursive>
 8009144:	89ab      	ldrh	r3, [r5, #12]
 8009146:	065b      	lsls	r3, r3, #25
 8009148:	f53f af12 	bmi.w	8008f70 <_vfiprintf_r+0x4c>
 800914c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914e:	e711      	b.n	8008f74 <_vfiprintf_r+0x50>
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	462a      	mov	r2, r5
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <_vfiprintf_r+0x258>)
 8009158:	a904      	add	r1, sp, #16
 800915a:	4630      	mov	r0, r6
 800915c:	f7fe f862 	bl	8007224 <_printf_i>
 8009160:	e7e4      	b.n	800912c <_vfiprintf_r+0x208>
 8009162:	bf00      	nop
 8009164:	0800b95c 	.word	0x0800b95c
 8009168:	0800b97c 	.word	0x0800b97c
 800916c:	0800b93c 	.word	0x0800b93c
 8009170:	0800b7e4 	.word	0x0800b7e4
 8009174:	0800b7ee 	.word	0x0800b7ee
 8009178:	08006cdd 	.word	0x08006cdd
 800917c:	08008f01 	.word	0x08008f01
 8009180:	0800b7ea 	.word	0x0800b7ea

08009184 <__swbuf_r>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	460e      	mov	r6, r1
 8009188:	4614      	mov	r4, r2
 800918a:	4605      	mov	r5, r0
 800918c:	b118      	cbz	r0, 8009196 <__swbuf_r+0x12>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <__swbuf_r+0x12>
 8009192:	f000 f9e7 	bl	8009564 <__sinit>
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <__swbuf_r+0x98>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d12b      	bne.n	80091f4 <__swbuf_r+0x70>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	69a3      	ldr	r3, [r4, #24]
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	071a      	lsls	r2, r3, #28
 80091a6:	d52f      	bpl.n	8009208 <__swbuf_r+0x84>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	b36b      	cbz	r3, 8009208 <__swbuf_r+0x84>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1ac0      	subs	r0, r0, r3
 80091b2:	6963      	ldr	r3, [r4, #20]
 80091b4:	b2f6      	uxtb	r6, r6
 80091b6:	4283      	cmp	r3, r0
 80091b8:	4637      	mov	r7, r6
 80091ba:	dc04      	bgt.n	80091c6 <__swbuf_r+0x42>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f93c 	bl	800943c <_fflush_r>
 80091c4:	bb30      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	701e      	strb	r6, [r3, #0]
 80091d4:	6963      	ldr	r3, [r4, #20]
 80091d6:	3001      	adds	r0, #1
 80091d8:	4283      	cmp	r3, r0
 80091da:	d004      	beq.n	80091e6 <__swbuf_r+0x62>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d506      	bpl.n	80091f0 <__swbuf_r+0x6c>
 80091e2:	2e0a      	cmp	r6, #10
 80091e4:	d104      	bne.n	80091f0 <__swbuf_r+0x6c>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f000 f927 	bl	800943c <_fflush_r>
 80091ee:	b988      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091f0:	4638      	mov	r0, r7
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <__swbuf_r+0x9c>)
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d101      	bne.n	80091fe <__swbuf_r+0x7a>
 80091fa:	68ac      	ldr	r4, [r5, #8]
 80091fc:	e7cf      	b.n	800919e <__swbuf_r+0x1a>
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <__swbuf_r+0xa0>)
 8009200:	429c      	cmp	r4, r3
 8009202:	bf08      	it	eq
 8009204:	68ec      	ldreq	r4, [r5, #12]
 8009206:	e7ca      	b.n	800919e <__swbuf_r+0x1a>
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f000 f81a 	bl	8009244 <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d0cb      	beq.n	80091ac <__swbuf_r+0x28>
 8009214:	f04f 37ff 	mov.w	r7, #4294967295
 8009218:	e7ea      	b.n	80091f0 <__swbuf_r+0x6c>
 800921a:	bf00      	nop
 800921c:	0800b95c 	.word	0x0800b95c
 8009220:	0800b97c 	.word	0x0800b97c
 8009224:	0800b93c 	.word	0x0800b93c

08009228 <__ascii_wctomb>:
 8009228:	b149      	cbz	r1, 800923e <__ascii_wctomb+0x16>
 800922a:	2aff      	cmp	r2, #255	; 0xff
 800922c:	bf85      	ittet	hi
 800922e:	238a      	movhi	r3, #138	; 0x8a
 8009230:	6003      	strhi	r3, [r0, #0]
 8009232:	700a      	strbls	r2, [r1, #0]
 8009234:	f04f 30ff 	movhi.w	r0, #4294967295
 8009238:	bf98      	it	ls
 800923a:	2001      	movls	r0, #1
 800923c:	4770      	bx	lr
 800923e:	4608      	mov	r0, r1
 8009240:	4770      	bx	lr
	...

08009244 <__swsetup_r>:
 8009244:	4b32      	ldr	r3, [pc, #200]	; (8009310 <__swsetup_r+0xcc>)
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	681d      	ldr	r5, [r3, #0]
 800924a:	4606      	mov	r6, r0
 800924c:	460c      	mov	r4, r1
 800924e:	b125      	cbz	r5, 800925a <__swsetup_r+0x16>
 8009250:	69ab      	ldr	r3, [r5, #24]
 8009252:	b913      	cbnz	r3, 800925a <__swsetup_r+0x16>
 8009254:	4628      	mov	r0, r5
 8009256:	f000 f985 	bl	8009564 <__sinit>
 800925a:	4b2e      	ldr	r3, [pc, #184]	; (8009314 <__swsetup_r+0xd0>)
 800925c:	429c      	cmp	r4, r3
 800925e:	d10f      	bne.n	8009280 <__swsetup_r+0x3c>
 8009260:	686c      	ldr	r4, [r5, #4]
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009268:	0719      	lsls	r1, r3, #28
 800926a:	d42c      	bmi.n	80092c6 <__swsetup_r+0x82>
 800926c:	06dd      	lsls	r5, r3, #27
 800926e:	d411      	bmi.n	8009294 <__swsetup_r+0x50>
 8009270:	2309      	movs	r3, #9
 8009272:	6033      	str	r3, [r6, #0]
 8009274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	e03e      	b.n	80092fe <__swsetup_r+0xba>
 8009280:	4b25      	ldr	r3, [pc, #148]	; (8009318 <__swsetup_r+0xd4>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d101      	bne.n	800928a <__swsetup_r+0x46>
 8009286:	68ac      	ldr	r4, [r5, #8]
 8009288:	e7eb      	b.n	8009262 <__swsetup_r+0x1e>
 800928a:	4b24      	ldr	r3, [pc, #144]	; (800931c <__swsetup_r+0xd8>)
 800928c:	429c      	cmp	r4, r3
 800928e:	bf08      	it	eq
 8009290:	68ec      	ldreq	r4, [r5, #12]
 8009292:	e7e6      	b.n	8009262 <__swsetup_r+0x1e>
 8009294:	0758      	lsls	r0, r3, #29
 8009296:	d512      	bpl.n	80092be <__swsetup_r+0x7a>
 8009298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929a:	b141      	cbz	r1, 80092ae <__swsetup_r+0x6a>
 800929c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a0:	4299      	cmp	r1, r3
 80092a2:	d002      	beq.n	80092aa <__swsetup_r+0x66>
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff fb31 	bl	800890c <_free_r>
 80092aa:	2300      	movs	r3, #0
 80092ac:	6363      	str	r3, [r4, #52]	; 0x34
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	2300      	movs	r3, #0
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f043 0308 	orr.w	r3, r3, #8
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	b94b      	cbnz	r3, 80092de <__swsetup_r+0x9a>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092d4:	d003      	beq.n	80092de <__swsetup_r+0x9a>
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 fa09 	bl	80096f0 <__smakebuf_r>
 80092de:	89a0      	ldrh	r0, [r4, #12]
 80092e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092e4:	f010 0301 	ands.w	r3, r0, #1
 80092e8:	d00a      	beq.n	8009300 <__swsetup_r+0xbc>
 80092ea:	2300      	movs	r3, #0
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6963      	ldr	r3, [r4, #20]
 80092f0:	425b      	negs	r3, r3
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	b943      	cbnz	r3, 800930a <__swsetup_r+0xc6>
 80092f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092fc:	d1ba      	bne.n	8009274 <__swsetup_r+0x30>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	0781      	lsls	r1, r0, #30
 8009302:	bf58      	it	pl
 8009304:	6963      	ldrpl	r3, [r4, #20]
 8009306:	60a3      	str	r3, [r4, #8]
 8009308:	e7f4      	b.n	80092f4 <__swsetup_r+0xb0>
 800930a:	2000      	movs	r0, #0
 800930c:	e7f7      	b.n	80092fe <__swsetup_r+0xba>
 800930e:	bf00      	nop
 8009310:	20000014 	.word	0x20000014
 8009314:	0800b95c 	.word	0x0800b95c
 8009318:	0800b97c 	.word	0x0800b97c
 800931c:	0800b93c 	.word	0x0800b93c

08009320 <abort>:
 8009320:	b508      	push	{r3, lr}
 8009322:	2006      	movs	r0, #6
 8009324:	f000 fa54 	bl	80097d0 <raise>
 8009328:	2001      	movs	r0, #1
 800932a:	f7f9 fb75 	bl	8002a18 <_exit>
	...

08009330 <__sflush_r>:
 8009330:	898a      	ldrh	r2, [r1, #12]
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	4605      	mov	r5, r0
 8009338:	0710      	lsls	r0, r2, #28
 800933a:	460c      	mov	r4, r1
 800933c:	d458      	bmi.n	80093f0 <__sflush_r+0xc0>
 800933e:	684b      	ldr	r3, [r1, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc05      	bgt.n	8009350 <__sflush_r+0x20>
 8009344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc02      	bgt.n	8009350 <__sflush_r+0x20>
 800934a:	2000      	movs	r0, #0
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009352:	2e00      	cmp	r6, #0
 8009354:	d0f9      	beq.n	800934a <__sflush_r+0x1a>
 8009356:	2300      	movs	r3, #0
 8009358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800935c:	682f      	ldr	r7, [r5, #0]
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	d032      	beq.n	80093c8 <__sflush_r+0x98>
 8009362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	075a      	lsls	r2, r3, #29
 8009368:	d505      	bpl.n	8009376 <__sflush_r+0x46>
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	1ac0      	subs	r0, r0, r3
 800936e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009370:	b10b      	cbz	r3, 8009376 <__sflush_r+0x46>
 8009372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009374:	1ac0      	subs	r0, r0, r3
 8009376:	2300      	movs	r3, #0
 8009378:	4602      	mov	r2, r0
 800937a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	4628      	mov	r0, r5
 8009380:	47b0      	blx	r6
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	d106      	bne.n	8009396 <__sflush_r+0x66>
 8009388:	6829      	ldr	r1, [r5, #0]
 800938a:	291d      	cmp	r1, #29
 800938c:	d82c      	bhi.n	80093e8 <__sflush_r+0xb8>
 800938e:	4a2a      	ldr	r2, [pc, #168]	; (8009438 <__sflush_r+0x108>)
 8009390:	40ca      	lsrs	r2, r1
 8009392:	07d6      	lsls	r6, r2, #31
 8009394:	d528      	bpl.n	80093e8 <__sflush_r+0xb8>
 8009396:	2200      	movs	r2, #0
 8009398:	6062      	str	r2, [r4, #4]
 800939a:	04d9      	lsls	r1, r3, #19
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	6022      	str	r2, [r4, #0]
 80093a0:	d504      	bpl.n	80093ac <__sflush_r+0x7c>
 80093a2:	1c42      	adds	r2, r0, #1
 80093a4:	d101      	bne.n	80093aa <__sflush_r+0x7a>
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	b903      	cbnz	r3, 80093ac <__sflush_r+0x7c>
 80093aa:	6560      	str	r0, [r4, #84]	; 0x54
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	602f      	str	r7, [r5, #0]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	d0ca      	beq.n	800934a <__sflush_r+0x1a>
 80093b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b8:	4299      	cmp	r1, r3
 80093ba:	d002      	beq.n	80093c2 <__sflush_r+0x92>
 80093bc:	4628      	mov	r0, r5
 80093be:	f7ff faa5 	bl	800890c <_free_r>
 80093c2:	2000      	movs	r0, #0
 80093c4:	6360      	str	r0, [r4, #52]	; 0x34
 80093c6:	e7c1      	b.n	800934c <__sflush_r+0x1c>
 80093c8:	6a21      	ldr	r1, [r4, #32]
 80093ca:	2301      	movs	r3, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	1c41      	adds	r1, r0, #1
 80093d2:	d1c7      	bne.n	8009364 <__sflush_r+0x34>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c4      	beq.n	8009364 <__sflush_r+0x34>
 80093da:	2b1d      	cmp	r3, #29
 80093dc:	d001      	beq.n	80093e2 <__sflush_r+0xb2>
 80093de:	2b16      	cmp	r3, #22
 80093e0:	d101      	bne.n	80093e6 <__sflush_r+0xb6>
 80093e2:	602f      	str	r7, [r5, #0]
 80093e4:	e7b1      	b.n	800934a <__sflush_r+0x1a>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7ad      	b.n	800934c <__sflush_r+0x1c>
 80093f0:	690f      	ldr	r7, [r1, #16]
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	d0a9      	beq.n	800934a <__sflush_r+0x1a>
 80093f6:	0793      	lsls	r3, r2, #30
 80093f8:	680e      	ldr	r6, [r1, #0]
 80093fa:	bf08      	it	eq
 80093fc:	694b      	ldreq	r3, [r1, #20]
 80093fe:	600f      	str	r7, [r1, #0]
 8009400:	bf18      	it	ne
 8009402:	2300      	movne	r3, #0
 8009404:	eba6 0807 	sub.w	r8, r6, r7
 8009408:	608b      	str	r3, [r1, #8]
 800940a:	f1b8 0f00 	cmp.w	r8, #0
 800940e:	dd9c      	ble.n	800934a <__sflush_r+0x1a>
 8009410:	6a21      	ldr	r1, [r4, #32]
 8009412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009414:	4643      	mov	r3, r8
 8009416:	463a      	mov	r2, r7
 8009418:	4628      	mov	r0, r5
 800941a:	47b0      	blx	r6
 800941c:	2800      	cmp	r0, #0
 800941e:	dc06      	bgt.n	800942e <__sflush_r+0xfe>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e78e      	b.n	800934c <__sflush_r+0x1c>
 800942e:	4407      	add	r7, r0
 8009430:	eba8 0800 	sub.w	r8, r8, r0
 8009434:	e7e9      	b.n	800940a <__sflush_r+0xda>
 8009436:	bf00      	nop
 8009438:	20400001 	.word	0x20400001

0800943c <_fflush_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b913      	cbnz	r3, 800944c <_fflush_r+0x10>
 8009446:	2500      	movs	r5, #0
 8009448:	4628      	mov	r0, r5
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	b118      	cbz	r0, 8009456 <_fflush_r+0x1a>
 800944e:	6983      	ldr	r3, [r0, #24]
 8009450:	b90b      	cbnz	r3, 8009456 <_fflush_r+0x1a>
 8009452:	f000 f887 	bl	8009564 <__sinit>
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <_fflush_r+0x6c>)
 8009458:	429c      	cmp	r4, r3
 800945a:	d11b      	bne.n	8009494 <_fflush_r+0x58>
 800945c:	686c      	ldr	r4, [r5, #4]
 800945e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0ef      	beq.n	8009446 <_fflush_r+0xa>
 8009466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009468:	07d0      	lsls	r0, r2, #31
 800946a:	d404      	bmi.n	8009476 <_fflush_r+0x3a>
 800946c:	0599      	lsls	r1, r3, #22
 800946e:	d402      	bmi.n	8009476 <_fflush_r+0x3a>
 8009470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009472:	f000 f915 	bl	80096a0 <__retarget_lock_acquire_recursive>
 8009476:	4628      	mov	r0, r5
 8009478:	4621      	mov	r1, r4
 800947a:	f7ff ff59 	bl	8009330 <__sflush_r>
 800947e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009480:	07da      	lsls	r2, r3, #31
 8009482:	4605      	mov	r5, r0
 8009484:	d4e0      	bmi.n	8009448 <_fflush_r+0xc>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	059b      	lsls	r3, r3, #22
 800948a:	d4dd      	bmi.n	8009448 <_fflush_r+0xc>
 800948c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948e:	f000 f908 	bl	80096a2 <__retarget_lock_release_recursive>
 8009492:	e7d9      	b.n	8009448 <_fflush_r+0xc>
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <_fflush_r+0x70>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d101      	bne.n	800949e <_fflush_r+0x62>
 800949a:	68ac      	ldr	r4, [r5, #8]
 800949c:	e7df      	b.n	800945e <_fflush_r+0x22>
 800949e:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <_fflush_r+0x74>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	bf08      	it	eq
 80094a4:	68ec      	ldreq	r4, [r5, #12]
 80094a6:	e7da      	b.n	800945e <_fflush_r+0x22>
 80094a8:	0800b95c 	.word	0x0800b95c
 80094ac:	0800b97c 	.word	0x0800b97c
 80094b0:	0800b93c 	.word	0x0800b93c

080094b4 <std>:
 80094b4:	2300      	movs	r3, #0
 80094b6:	b510      	push	{r4, lr}
 80094b8:	4604      	mov	r4, r0
 80094ba:	e9c0 3300 	strd	r3, r3, [r0]
 80094be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094c2:	6083      	str	r3, [r0, #8]
 80094c4:	8181      	strh	r1, [r0, #12]
 80094c6:	6643      	str	r3, [r0, #100]	; 0x64
 80094c8:	81c2      	strh	r2, [r0, #14]
 80094ca:	6183      	str	r3, [r0, #24]
 80094cc:	4619      	mov	r1, r3
 80094ce:	2208      	movs	r2, #8
 80094d0:	305c      	adds	r0, #92	; 0x5c
 80094d2:	f7fd fb5b 	bl	8006b8c <memset>
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <std+0x38>)
 80094d8:	6263      	str	r3, [r4, #36]	; 0x24
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <std+0x3c>)
 80094dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <std+0x40>)
 80094e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <std+0x44>)
 80094e4:	6224      	str	r4, [r4, #32]
 80094e6:	6323      	str	r3, [r4, #48]	; 0x30
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	bf00      	nop
 80094ec:	08009809 	.word	0x08009809
 80094f0:	0800982b 	.word	0x0800982b
 80094f4:	08009863 	.word	0x08009863
 80094f8:	08009887 	.word	0x08009887

080094fc <_cleanup_r>:
 80094fc:	4901      	ldr	r1, [pc, #4]	; (8009504 <_cleanup_r+0x8>)
 80094fe:	f000 b8af 	b.w	8009660 <_fwalk_reent>
 8009502:	bf00      	nop
 8009504:	0800943d 	.word	0x0800943d

08009508 <__sfmoreglue>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	2268      	movs	r2, #104	; 0x68
 800950c:	1e4d      	subs	r5, r1, #1
 800950e:	4355      	muls	r5, r2
 8009510:	460e      	mov	r6, r1
 8009512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009516:	f7ff fa65 	bl	80089e4 <_malloc_r>
 800951a:	4604      	mov	r4, r0
 800951c:	b140      	cbz	r0, 8009530 <__sfmoreglue+0x28>
 800951e:	2100      	movs	r1, #0
 8009520:	e9c0 1600 	strd	r1, r6, [r0]
 8009524:	300c      	adds	r0, #12
 8009526:	60a0      	str	r0, [r4, #8]
 8009528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800952c:	f7fd fb2e 	bl	8006b8c <memset>
 8009530:	4620      	mov	r0, r4
 8009532:	bd70      	pop	{r4, r5, r6, pc}

08009534 <__sfp_lock_acquire>:
 8009534:	4801      	ldr	r0, [pc, #4]	; (800953c <__sfp_lock_acquire+0x8>)
 8009536:	f000 b8b3 	b.w	80096a0 <__retarget_lock_acquire_recursive>
 800953a:	bf00      	nop
 800953c:	200008a9 	.word	0x200008a9

08009540 <__sfp_lock_release>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__sfp_lock_release+0x8>)
 8009542:	f000 b8ae 	b.w	80096a2 <__retarget_lock_release_recursive>
 8009546:	bf00      	nop
 8009548:	200008a9 	.word	0x200008a9

0800954c <__sinit_lock_acquire>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__sinit_lock_acquire+0x8>)
 800954e:	f000 b8a7 	b.w	80096a0 <__retarget_lock_acquire_recursive>
 8009552:	bf00      	nop
 8009554:	200008aa 	.word	0x200008aa

08009558 <__sinit_lock_release>:
 8009558:	4801      	ldr	r0, [pc, #4]	; (8009560 <__sinit_lock_release+0x8>)
 800955a:	f000 b8a2 	b.w	80096a2 <__retarget_lock_release_recursive>
 800955e:	bf00      	nop
 8009560:	200008aa 	.word	0x200008aa

08009564 <__sinit>:
 8009564:	b510      	push	{r4, lr}
 8009566:	4604      	mov	r4, r0
 8009568:	f7ff fff0 	bl	800954c <__sinit_lock_acquire>
 800956c:	69a3      	ldr	r3, [r4, #24]
 800956e:	b11b      	cbz	r3, 8009578 <__sinit+0x14>
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f7ff bff0 	b.w	8009558 <__sinit_lock_release>
 8009578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800957c:	6523      	str	r3, [r4, #80]	; 0x50
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <__sinit+0x68>)
 8009580:	4a13      	ldr	r2, [pc, #76]	; (80095d0 <__sinit+0x6c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	62a2      	str	r2, [r4, #40]	; 0x28
 8009586:	42a3      	cmp	r3, r4
 8009588:	bf04      	itt	eq
 800958a:	2301      	moveq	r3, #1
 800958c:	61a3      	streq	r3, [r4, #24]
 800958e:	4620      	mov	r0, r4
 8009590:	f000 f820 	bl	80095d4 <__sfp>
 8009594:	6060      	str	r0, [r4, #4]
 8009596:	4620      	mov	r0, r4
 8009598:	f000 f81c 	bl	80095d4 <__sfp>
 800959c:	60a0      	str	r0, [r4, #8]
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 f818 	bl	80095d4 <__sfp>
 80095a4:	2200      	movs	r2, #0
 80095a6:	60e0      	str	r0, [r4, #12]
 80095a8:	2104      	movs	r1, #4
 80095aa:	6860      	ldr	r0, [r4, #4]
 80095ac:	f7ff ff82 	bl	80094b4 <std>
 80095b0:	68a0      	ldr	r0, [r4, #8]
 80095b2:	2201      	movs	r2, #1
 80095b4:	2109      	movs	r1, #9
 80095b6:	f7ff ff7d 	bl	80094b4 <std>
 80095ba:	68e0      	ldr	r0, [r4, #12]
 80095bc:	2202      	movs	r2, #2
 80095be:	2112      	movs	r1, #18
 80095c0:	f7ff ff78 	bl	80094b4 <std>
 80095c4:	2301      	movs	r3, #1
 80095c6:	61a3      	str	r3, [r4, #24]
 80095c8:	e7d2      	b.n	8009570 <__sinit+0xc>
 80095ca:	bf00      	nop
 80095cc:	0800b5c0 	.word	0x0800b5c0
 80095d0:	080094fd 	.word	0x080094fd

080095d4 <__sfp>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	4607      	mov	r7, r0
 80095d8:	f7ff ffac 	bl	8009534 <__sfp_lock_acquire>
 80095dc:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <__sfp+0x84>)
 80095de:	681e      	ldr	r6, [r3, #0]
 80095e0:	69b3      	ldr	r3, [r6, #24]
 80095e2:	b913      	cbnz	r3, 80095ea <__sfp+0x16>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff ffbd 	bl	8009564 <__sinit>
 80095ea:	3648      	adds	r6, #72	; 0x48
 80095ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	d503      	bpl.n	80095fc <__sfp+0x28>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	b30b      	cbz	r3, 800963c <__sfp+0x68>
 80095f8:	6836      	ldr	r6, [r6, #0]
 80095fa:	e7f7      	b.n	80095ec <__sfp+0x18>
 80095fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009600:	b9d5      	cbnz	r5, 8009638 <__sfp+0x64>
 8009602:	4b16      	ldr	r3, [pc, #88]	; (800965c <__sfp+0x88>)
 8009604:	60e3      	str	r3, [r4, #12]
 8009606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800960a:	6665      	str	r5, [r4, #100]	; 0x64
 800960c:	f000 f847 	bl	800969e <__retarget_lock_init_recursive>
 8009610:	f7ff ff96 	bl	8009540 <__sfp_lock_release>
 8009614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800961c:	6025      	str	r5, [r4, #0]
 800961e:	61a5      	str	r5, [r4, #24]
 8009620:	2208      	movs	r2, #8
 8009622:	4629      	mov	r1, r5
 8009624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009628:	f7fd fab0 	bl	8006b8c <memset>
 800962c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009634:	4620      	mov	r0, r4
 8009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009638:	3468      	adds	r4, #104	; 0x68
 800963a:	e7d9      	b.n	80095f0 <__sfp+0x1c>
 800963c:	2104      	movs	r1, #4
 800963e:	4638      	mov	r0, r7
 8009640:	f7ff ff62 	bl	8009508 <__sfmoreglue>
 8009644:	4604      	mov	r4, r0
 8009646:	6030      	str	r0, [r6, #0]
 8009648:	2800      	cmp	r0, #0
 800964a:	d1d5      	bne.n	80095f8 <__sfp+0x24>
 800964c:	f7ff ff78 	bl	8009540 <__sfp_lock_release>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	e7ee      	b.n	8009634 <__sfp+0x60>
 8009656:	bf00      	nop
 8009658:	0800b5c0 	.word	0x0800b5c0
 800965c:	ffff0001 	.word	0xffff0001

08009660 <_fwalk_reent>:
 8009660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009664:	4606      	mov	r6, r0
 8009666:	4688      	mov	r8, r1
 8009668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800966c:	2700      	movs	r7, #0
 800966e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009672:	f1b9 0901 	subs.w	r9, r9, #1
 8009676:	d505      	bpl.n	8009684 <_fwalk_reent+0x24>
 8009678:	6824      	ldr	r4, [r4, #0]
 800967a:	2c00      	cmp	r4, #0
 800967c:	d1f7      	bne.n	800966e <_fwalk_reent+0xe>
 800967e:	4638      	mov	r0, r7
 8009680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009684:	89ab      	ldrh	r3, [r5, #12]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d907      	bls.n	800969a <_fwalk_reent+0x3a>
 800968a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800968e:	3301      	adds	r3, #1
 8009690:	d003      	beq.n	800969a <_fwalk_reent+0x3a>
 8009692:	4629      	mov	r1, r5
 8009694:	4630      	mov	r0, r6
 8009696:	47c0      	blx	r8
 8009698:	4307      	orrs	r7, r0
 800969a:	3568      	adds	r5, #104	; 0x68
 800969c:	e7e9      	b.n	8009672 <_fwalk_reent+0x12>

0800969e <__retarget_lock_init_recursive>:
 800969e:	4770      	bx	lr

080096a0 <__retarget_lock_acquire_recursive>:
 80096a0:	4770      	bx	lr

080096a2 <__retarget_lock_release_recursive>:
 80096a2:	4770      	bx	lr

080096a4 <__swhatbuf_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ac:	2900      	cmp	r1, #0
 80096ae:	b096      	sub	sp, #88	; 0x58
 80096b0:	4614      	mov	r4, r2
 80096b2:	461d      	mov	r5, r3
 80096b4:	da08      	bge.n	80096c8 <__swhatbuf_r+0x24>
 80096b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	061a      	lsls	r2, r3, #24
 80096c0:	d410      	bmi.n	80096e4 <__swhatbuf_r+0x40>
 80096c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c6:	e00e      	b.n	80096e6 <__swhatbuf_r+0x42>
 80096c8:	466a      	mov	r2, sp
 80096ca:	f000 f903 	bl	80098d4 <_fstat_r>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	dbf1      	blt.n	80096b6 <__swhatbuf_r+0x12>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096dc:	425a      	negs	r2, r3
 80096de:	415a      	adcs	r2, r3
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	e7ee      	b.n	80096c2 <__swhatbuf_r+0x1e>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	2000      	movs	r0, #0
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	b016      	add	sp, #88	; 0x58
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080096f0 <__smakebuf_r>:
 80096f0:	898b      	ldrh	r3, [r1, #12]
 80096f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096f4:	079d      	lsls	r5, r3, #30
 80096f6:	4606      	mov	r6, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	d507      	bpl.n	800970c <__smakebuf_r+0x1c>
 80096fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	2301      	movs	r3, #1
 8009706:	6163      	str	r3, [r4, #20]
 8009708:	b002      	add	sp, #8
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	ab01      	add	r3, sp, #4
 800970e:	466a      	mov	r2, sp
 8009710:	f7ff ffc8 	bl	80096a4 <__swhatbuf_r>
 8009714:	9900      	ldr	r1, [sp, #0]
 8009716:	4605      	mov	r5, r0
 8009718:	4630      	mov	r0, r6
 800971a:	f7ff f963 	bl	80089e4 <_malloc_r>
 800971e:	b948      	cbnz	r0, 8009734 <__smakebuf_r+0x44>
 8009720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009724:	059a      	lsls	r2, r3, #22
 8009726:	d4ef      	bmi.n	8009708 <__smakebuf_r+0x18>
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	f043 0302 	orr.w	r3, r3, #2
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	e7e3      	b.n	80096fc <__smakebuf_r+0xc>
 8009734:	4b0d      	ldr	r3, [pc, #52]	; (800976c <__smakebuf_r+0x7c>)
 8009736:	62b3      	str	r3, [r6, #40]	; 0x28
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	9b00      	ldr	r3, [sp, #0]
 8009744:	6163      	str	r3, [r4, #20]
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	6120      	str	r0, [r4, #16]
 800974a:	b15b      	cbz	r3, 8009764 <__smakebuf_r+0x74>
 800974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f8d1 	bl	80098f8 <_isatty_r>
 8009756:	b128      	cbz	r0, 8009764 <__smakebuf_r+0x74>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	89a0      	ldrh	r0, [r4, #12]
 8009766:	4305      	orrs	r5, r0
 8009768:	81a5      	strh	r5, [r4, #12]
 800976a:	e7cd      	b.n	8009708 <__smakebuf_r+0x18>
 800976c:	080094fd 	.word	0x080094fd

08009770 <_malloc_usable_size_r>:
 8009770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009774:	1f18      	subs	r0, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfbc      	itt	lt
 800977a:	580b      	ldrlt	r3, [r1, r0]
 800977c:	18c0      	addlt	r0, r0, r3
 800977e:	4770      	bx	lr

08009780 <_raise_r>:
 8009780:	291f      	cmp	r1, #31
 8009782:	b538      	push	{r3, r4, r5, lr}
 8009784:	4604      	mov	r4, r0
 8009786:	460d      	mov	r5, r1
 8009788:	d904      	bls.n	8009794 <_raise_r+0x14>
 800978a:	2316      	movs	r3, #22
 800978c:	6003      	str	r3, [r0, #0]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009796:	b112      	cbz	r2, 800979e <_raise_r+0x1e>
 8009798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800979c:	b94b      	cbnz	r3, 80097b2 <_raise_r+0x32>
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f830 	bl	8009804 <_getpid_r>
 80097a4:	462a      	mov	r2, r5
 80097a6:	4601      	mov	r1, r0
 80097a8:	4620      	mov	r0, r4
 80097aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ae:	f000 b817 	b.w	80097e0 <_kill_r>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d00a      	beq.n	80097cc <_raise_r+0x4c>
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	d103      	bne.n	80097c2 <_raise_r+0x42>
 80097ba:	2316      	movs	r3, #22
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	2001      	movs	r0, #1
 80097c0:	e7e7      	b.n	8009792 <_raise_r+0x12>
 80097c2:	2400      	movs	r4, #0
 80097c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c8:	4628      	mov	r0, r5
 80097ca:	4798      	blx	r3
 80097cc:	2000      	movs	r0, #0
 80097ce:	e7e0      	b.n	8009792 <_raise_r+0x12>

080097d0 <raise>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <raise+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7ff bfd3 	b.w	8009780 <_raise_r>
 80097da:	bf00      	nop
 80097dc:	20000014 	.word	0x20000014

080097e0 <_kill_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	; (8009800 <_kill_r+0x20>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	602b      	str	r3, [r5, #0]
 80097ee:	f7f9 f903 	bl	80029f8 <_kill>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d102      	bne.n	80097fc <_kill_r+0x1c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b103      	cbz	r3, 80097fc <_kill_r+0x1c>
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	200008a4 	.word	0x200008a4

08009804 <_getpid_r>:
 8009804:	f7f9 b8f0 	b.w	80029e8 <_getpid>

08009808 <__sread>:
 8009808:	b510      	push	{r4, lr}
 800980a:	460c      	mov	r4, r1
 800980c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009810:	f000 f894 	bl	800993c <_read_r>
 8009814:	2800      	cmp	r0, #0
 8009816:	bfab      	itete	ge
 8009818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800981a:	89a3      	ldrhlt	r3, [r4, #12]
 800981c:	181b      	addge	r3, r3, r0
 800981e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009822:	bfac      	ite	ge
 8009824:	6563      	strge	r3, [r4, #84]	; 0x54
 8009826:	81a3      	strhlt	r3, [r4, #12]
 8009828:	bd10      	pop	{r4, pc}

0800982a <__swrite>:
 800982a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982e:	461f      	mov	r7, r3
 8009830:	898b      	ldrh	r3, [r1, #12]
 8009832:	05db      	lsls	r3, r3, #23
 8009834:	4605      	mov	r5, r0
 8009836:	460c      	mov	r4, r1
 8009838:	4616      	mov	r6, r2
 800983a:	d505      	bpl.n	8009848 <__swrite+0x1e>
 800983c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009840:	2302      	movs	r3, #2
 8009842:	2200      	movs	r2, #0
 8009844:	f000 f868 	bl	8009918 <_lseek_r>
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800984e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	4632      	mov	r2, r6
 8009856:	463b      	mov	r3, r7
 8009858:	4628      	mov	r0, r5
 800985a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985e:	f000 b817 	b.w	8009890 <_write_r>

08009862 <__sseek>:
 8009862:	b510      	push	{r4, lr}
 8009864:	460c      	mov	r4, r1
 8009866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986a:	f000 f855 	bl	8009918 <_lseek_r>
 800986e:	1c43      	adds	r3, r0, #1
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	bf15      	itete	ne
 8009874:	6560      	strne	r0, [r4, #84]	; 0x54
 8009876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800987a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800987e:	81a3      	strheq	r3, [r4, #12]
 8009880:	bf18      	it	ne
 8009882:	81a3      	strhne	r3, [r4, #12]
 8009884:	bd10      	pop	{r4, pc}

08009886 <__sclose>:
 8009886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988a:	f000 b813 	b.w	80098b4 <_close_r>
	...

08009890 <_write_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d07      	ldr	r5, [pc, #28]	; (80098b0 <_write_r+0x20>)
 8009894:	4604      	mov	r4, r0
 8009896:	4608      	mov	r0, r1
 8009898:	4611      	mov	r1, r2
 800989a:	2200      	movs	r2, #0
 800989c:	602a      	str	r2, [r5, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	f7f9 f8e1 	bl	8002a66 <_write>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_write_r+0x1e>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_write_r+0x1e>
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	200008a4 	.word	0x200008a4

080098b4 <_close_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d06      	ldr	r5, [pc, #24]	; (80098d0 <_close_r+0x1c>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	602b      	str	r3, [r5, #0]
 80098c0:	f7f9 f8ed 	bl	8002a9e <_close>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_close_r+0x1a>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_close_r+0x1a>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	200008a4 	.word	0x200008a4

080098d4 <_fstat_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_fstat_r+0x20>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	f7f9 f8e8 	bl	8002ab6 <_fstat>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d102      	bne.n	80098f0 <_fstat_r+0x1c>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	b103      	cbz	r3, 80098f0 <_fstat_r+0x1c>
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	200008a4 	.word	0x200008a4

080098f8 <_isatty_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_isatty_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f9 f8e7 	bl	8002ad6 <_isatty>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_isatty_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_isatty_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	200008a4 	.word	0x200008a4

08009918 <_lseek_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	; (8009938 <_lseek_r+0x20>)
 800991c:	4604      	mov	r4, r0
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	2200      	movs	r2, #0
 8009924:	602a      	str	r2, [r5, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	f7f9 f8e0 	bl	8002aec <_lseek>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_lseek_r+0x1e>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_lseek_r+0x1e>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	200008a4 	.word	0x200008a4

0800993c <_read_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_read_r+0x20>)
 8009940:	4604      	mov	r4, r0
 8009942:	4608      	mov	r0, r1
 8009944:	4611      	mov	r1, r2
 8009946:	2200      	movs	r2, #0
 8009948:	602a      	str	r2, [r5, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	f7f9 f86e 	bl	8002a2c <_read>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_read_r+0x1e>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_read_r+0x1e>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	200008a4 	.word	0x200008a4

08009960 <pow>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	ed2d 8b02 	vpush	{d8}
 8009966:	eeb0 8a40 	vmov.f32	s16, s0
 800996a:	eef0 8a60 	vmov.f32	s17, s1
 800996e:	ec55 4b11 	vmov	r4, r5, d1
 8009972:	f000 f865 	bl	8009a40 <__ieee754_pow>
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	ec57 6b10 	vmov	r6, r7, d0
 8009982:	f7f7 f8d3 	bl	8000b2c <__aeabi_dcmpun>
 8009986:	2800      	cmp	r0, #0
 8009988:	d13b      	bne.n	8009a02 <pow+0xa2>
 800998a:	ec51 0b18 	vmov	r0, r1, d8
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	f7f7 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8009996:	b1b8      	cbz	r0, 80099c8 <pow+0x68>
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	f7f7 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d146      	bne.n	8009a36 <pow+0xd6>
 80099a8:	ec45 4b10 	vmov	d0, r4, r5
 80099ac:	f000 fe61 	bl	800a672 <finite>
 80099b0:	b338      	cbz	r0, 8009a02 <pow+0xa2>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f88f 	bl	8000adc <__aeabi_dcmplt>
 80099be:	b300      	cbz	r0, 8009a02 <pow+0xa2>
 80099c0:	f7fd f8ba 	bl	8006b38 <__errno>
 80099c4:	2322      	movs	r3, #34	; 0x22
 80099c6:	e01b      	b.n	8009a00 <pow+0xa0>
 80099c8:	ec47 6b10 	vmov	d0, r6, r7
 80099cc:	f000 fe51 	bl	800a672 <finite>
 80099d0:	b9e0      	cbnz	r0, 8009a0c <pow+0xac>
 80099d2:	eeb0 0a48 	vmov.f32	s0, s16
 80099d6:	eef0 0a68 	vmov.f32	s1, s17
 80099da:	f000 fe4a 	bl	800a672 <finite>
 80099de:	b1a8      	cbz	r0, 8009a0c <pow+0xac>
 80099e0:	ec45 4b10 	vmov	d0, r4, r5
 80099e4:	f000 fe45 	bl	800a672 <finite>
 80099e8:	b180      	cbz	r0, 8009a0c <pow+0xac>
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	4630      	mov	r0, r6
 80099f0:	4639      	mov	r1, r7
 80099f2:	f7f7 f89b 	bl	8000b2c <__aeabi_dcmpun>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d0e2      	beq.n	80099c0 <pow+0x60>
 80099fa:	f7fd f89d 	bl	8006b38 <__errno>
 80099fe:	2321      	movs	r3, #33	; 0x21
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	ecbd 8b02 	vpop	{d8}
 8009a06:	ec47 6b10 	vmov	d0, r6, r7
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f7 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d0f2      	beq.n	8009a02 <pow+0xa2>
 8009a1c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a20:	eef0 0a68 	vmov.f32	s1, s17
 8009a24:	f000 fe25 	bl	800a672 <finite>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d0ea      	beq.n	8009a02 <pow+0xa2>
 8009a2c:	ec45 4b10 	vmov	d0, r4, r5
 8009a30:	f000 fe1f 	bl	800a672 <finite>
 8009a34:	e7c3      	b.n	80099be <pow+0x5e>
 8009a36:	4f01      	ldr	r7, [pc, #4]	; (8009a3c <pow+0xdc>)
 8009a38:	2600      	movs	r6, #0
 8009a3a:	e7e2      	b.n	8009a02 <pow+0xa2>
 8009a3c:	3ff00000 	.word	0x3ff00000

08009a40 <__ieee754_pow>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	ed2d 8b06 	vpush	{d8-d10}
 8009a48:	b089      	sub	sp, #36	; 0x24
 8009a4a:	ed8d 1b00 	vstr	d1, [sp]
 8009a4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009a52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009a56:	ea58 0102 	orrs.w	r1, r8, r2
 8009a5a:	ec57 6b10 	vmov	r6, r7, d0
 8009a5e:	d115      	bne.n	8009a8c <__ieee754_pow+0x4c>
 8009a60:	19b3      	adds	r3, r6, r6
 8009a62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009a66:	4152      	adcs	r2, r2
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	4b89      	ldr	r3, [pc, #548]	; (8009c90 <__ieee754_pow+0x250>)
 8009a6c:	4193      	sbcs	r3, r2
 8009a6e:	f080 84d2 	bcs.w	800a416 <__ieee754_pow+0x9d6>
 8009a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fc07 	bl	800028c <__adddf3>
 8009a7e:	ec41 0b10 	vmov	d0, r0, r1
 8009a82:	b009      	add	sp, #36	; 0x24
 8009a84:	ecbd 8b06 	vpop	{d8-d10}
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8c:	4b81      	ldr	r3, [pc, #516]	; (8009c94 <__ieee754_pow+0x254>)
 8009a8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009a92:	429c      	cmp	r4, r3
 8009a94:	ee10 aa10 	vmov	sl, s0
 8009a98:	463d      	mov	r5, r7
 8009a9a:	dc06      	bgt.n	8009aaa <__ieee754_pow+0x6a>
 8009a9c:	d101      	bne.n	8009aa2 <__ieee754_pow+0x62>
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d1e7      	bne.n	8009a72 <__ieee754_pow+0x32>
 8009aa2:	4598      	cmp	r8, r3
 8009aa4:	dc01      	bgt.n	8009aaa <__ieee754_pow+0x6a>
 8009aa6:	d10f      	bne.n	8009ac8 <__ieee754_pow+0x88>
 8009aa8:	b172      	cbz	r2, 8009ac8 <__ieee754_pow+0x88>
 8009aaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009aae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009ab2:	ea55 050a 	orrs.w	r5, r5, sl
 8009ab6:	d1dc      	bne.n	8009a72 <__ieee754_pow+0x32>
 8009ab8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009abc:	18db      	adds	r3, r3, r3
 8009abe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009ac2:	4152      	adcs	r2, r2
 8009ac4:	429d      	cmp	r5, r3
 8009ac6:	e7d0      	b.n	8009a6a <__ieee754_pow+0x2a>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	da3b      	bge.n	8009b44 <__ieee754_pow+0x104>
 8009acc:	4b72      	ldr	r3, [pc, #456]	; (8009c98 <__ieee754_pow+0x258>)
 8009ace:	4598      	cmp	r8, r3
 8009ad0:	dc51      	bgt.n	8009b76 <__ieee754_pow+0x136>
 8009ad2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ad6:	4598      	cmp	r8, r3
 8009ad8:	f340 84ac 	ble.w	800a434 <__ieee754_pow+0x9f4>
 8009adc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ae0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ae4:	2b14      	cmp	r3, #20
 8009ae6:	dd0f      	ble.n	8009b08 <__ieee754_pow+0xc8>
 8009ae8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009aec:	fa22 f103 	lsr.w	r1, r2, r3
 8009af0:	fa01 f303 	lsl.w	r3, r1, r3
 8009af4:	4293      	cmp	r3, r2
 8009af6:	f040 849d 	bne.w	800a434 <__ieee754_pow+0x9f4>
 8009afa:	f001 0101 	and.w	r1, r1, #1
 8009afe:	f1c1 0302 	rsb	r3, r1, #2
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	b182      	cbz	r2, 8009b28 <__ieee754_pow+0xe8>
 8009b06:	e05f      	b.n	8009bc8 <__ieee754_pow+0x188>
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d15b      	bne.n	8009bc4 <__ieee754_pow+0x184>
 8009b0c:	f1c3 0314 	rsb	r3, r3, #20
 8009b10:	fa48 f103 	asr.w	r1, r8, r3
 8009b14:	fa01 f303 	lsl.w	r3, r1, r3
 8009b18:	4543      	cmp	r3, r8
 8009b1a:	f040 8488 	bne.w	800a42e <__ieee754_pow+0x9ee>
 8009b1e:	f001 0101 	and.w	r1, r1, #1
 8009b22:	f1c1 0302 	rsb	r3, r1, #2
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	4b5c      	ldr	r3, [pc, #368]	; (8009c9c <__ieee754_pow+0x25c>)
 8009b2a:	4598      	cmp	r8, r3
 8009b2c:	d132      	bne.n	8009b94 <__ieee754_pow+0x154>
 8009b2e:	f1b9 0f00 	cmp.w	r9, #0
 8009b32:	f280 8478 	bge.w	800a426 <__ieee754_pow+0x9e6>
 8009b36:	4959      	ldr	r1, [pc, #356]	; (8009c9c <__ieee754_pow+0x25c>)
 8009b38:	4632      	mov	r2, r6
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f7f6 fe85 	bl	800084c <__aeabi_ddiv>
 8009b42:	e79c      	b.n	8009a7e <__ieee754_pow+0x3e>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	2a00      	cmp	r2, #0
 8009b4a:	d13d      	bne.n	8009bc8 <__ieee754_pow+0x188>
 8009b4c:	4b51      	ldr	r3, [pc, #324]	; (8009c94 <__ieee754_pow+0x254>)
 8009b4e:	4598      	cmp	r8, r3
 8009b50:	d1ea      	bne.n	8009b28 <__ieee754_pow+0xe8>
 8009b52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b5a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b5e:	f000 845a 	beq.w	800a416 <__ieee754_pow+0x9d6>
 8009b62:	4b4f      	ldr	r3, [pc, #316]	; (8009ca0 <__ieee754_pow+0x260>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	dd08      	ble.n	8009b7a <__ieee754_pow+0x13a>
 8009b68:	f1b9 0f00 	cmp.w	r9, #0
 8009b6c:	f2c0 8457 	blt.w	800a41e <__ieee754_pow+0x9de>
 8009b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b74:	e783      	b.n	8009a7e <__ieee754_pow+0x3e>
 8009b76:	2302      	movs	r3, #2
 8009b78:	e7e5      	b.n	8009b46 <__ieee754_pow+0x106>
 8009b7a:	f1b9 0f00 	cmp.w	r9, #0
 8009b7e:	f04f 0000 	mov.w	r0, #0
 8009b82:	f04f 0100 	mov.w	r1, #0
 8009b86:	f6bf af7a 	bge.w	8009a7e <__ieee754_pow+0x3e>
 8009b8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009b8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b92:	e774      	b.n	8009a7e <__ieee754_pow+0x3e>
 8009b94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009b98:	d106      	bne.n	8009ba8 <__ieee754_pow+0x168>
 8009b9a:	4632      	mov	r2, r6
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	f7f6 fd29 	bl	80005f8 <__aeabi_dmul>
 8009ba6:	e76a      	b.n	8009a7e <__ieee754_pow+0x3e>
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <__ieee754_pow+0x264>)
 8009baa:	4599      	cmp	r9, r3
 8009bac:	d10c      	bne.n	8009bc8 <__ieee754_pow+0x188>
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	db0a      	blt.n	8009bc8 <__ieee754_pow+0x188>
 8009bb2:	ec47 6b10 	vmov	d0, r6, r7
 8009bb6:	b009      	add	sp, #36	; 0x24
 8009bb8:	ecbd 8b06 	vpop	{d8-d10}
 8009bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	f000 bc6c 	b.w	800a49c <__ieee754_sqrt>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	ec47 6b10 	vmov	d0, r6, r7
 8009bcc:	f000 fd48 	bl	800a660 <fabs>
 8009bd0:	ec51 0b10 	vmov	r0, r1, d0
 8009bd4:	f1ba 0f00 	cmp.w	sl, #0
 8009bd8:	d129      	bne.n	8009c2e <__ieee754_pow+0x1ee>
 8009bda:	b124      	cbz	r4, 8009be6 <__ieee754_pow+0x1a6>
 8009bdc:	4b2f      	ldr	r3, [pc, #188]	; (8009c9c <__ieee754_pow+0x25c>)
 8009bde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d123      	bne.n	8009c2e <__ieee754_pow+0x1ee>
 8009be6:	f1b9 0f00 	cmp.w	r9, #0
 8009bea:	da05      	bge.n	8009bf8 <__ieee754_pow+0x1b8>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	492a      	ldr	r1, [pc, #168]	; (8009c9c <__ieee754_pow+0x25c>)
 8009bf4:	f7f6 fe2a 	bl	800084c <__aeabi_ddiv>
 8009bf8:	2d00      	cmp	r5, #0
 8009bfa:	f6bf af40 	bge.w	8009a7e <__ieee754_pow+0x3e>
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c08:	4323      	orrs	r3, r4
 8009c0a:	d108      	bne.n	8009c1e <__ieee754_pow+0x1de>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7f6 fb38 	bl	8000288 <__aeabi_dsub>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	e78f      	b.n	8009b3e <__ieee754_pow+0xfe>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	f47f af2c 	bne.w	8009a7e <__ieee754_pow+0x3e>
 8009c26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	e727      	b.n	8009a7e <__ieee754_pow+0x3e>
 8009c2e:	0feb      	lsrs	r3, r5, #31
 8009c30:	3b01      	subs	r3, #1
 8009c32:	9306      	str	r3, [sp, #24]
 8009c34:	9a06      	ldr	r2, [sp, #24]
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d102      	bne.n	8009c42 <__ieee754_pow+0x202>
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	463b      	mov	r3, r7
 8009c40:	e7e6      	b.n	8009c10 <__ieee754_pow+0x1d0>
 8009c42:	4b19      	ldr	r3, [pc, #100]	; (8009ca8 <__ieee754_pow+0x268>)
 8009c44:	4598      	cmp	r8, r3
 8009c46:	f340 80fb 	ble.w	8009e40 <__ieee754_pow+0x400>
 8009c4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c4e:	4598      	cmp	r8, r3
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <__ieee754_pow+0x260>)
 8009c52:	dd0c      	ble.n	8009c6e <__ieee754_pow+0x22e>
 8009c54:	429c      	cmp	r4, r3
 8009c56:	dc0f      	bgt.n	8009c78 <__ieee754_pow+0x238>
 8009c58:	f1b9 0f00 	cmp.w	r9, #0
 8009c5c:	da0f      	bge.n	8009c7e <__ieee754_pow+0x23e>
 8009c5e:	2000      	movs	r0, #0
 8009c60:	b009      	add	sp, #36	; 0x24
 8009c62:	ecbd 8b06 	vpop	{d8-d10}
 8009c66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	f000 bcf0 	b.w	800a64e <__math_oflow>
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	dbf2      	blt.n	8009c58 <__ieee754_pow+0x218>
 8009c72:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <__ieee754_pow+0x25c>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	dd19      	ble.n	8009cac <__ieee754_pow+0x26c>
 8009c78:	f1b9 0f00 	cmp.w	r9, #0
 8009c7c:	dcef      	bgt.n	8009c5e <__ieee754_pow+0x21e>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	b009      	add	sp, #36	; 0x24
 8009c82:	ecbd 8b06 	vpop	{d8-d10}
 8009c86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	f000 bcd7 	b.w	800a63c <__math_uflow>
 8009c8e:	bf00      	nop
 8009c90:	fff00000 	.word	0xfff00000
 8009c94:	7ff00000 	.word	0x7ff00000
 8009c98:	433fffff 	.word	0x433fffff
 8009c9c:	3ff00000 	.word	0x3ff00000
 8009ca0:	3fefffff 	.word	0x3fefffff
 8009ca4:	3fe00000 	.word	0x3fe00000
 8009ca8:	41e00000 	.word	0x41e00000
 8009cac:	4b60      	ldr	r3, [pc, #384]	; (8009e30 <__ieee754_pow+0x3f0>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f7f6 faea 	bl	8000288 <__aeabi_dsub>
 8009cb4:	a354      	add	r3, pc, #336	; (adr r3, 8009e08 <__ieee754_pow+0x3c8>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	f7f6 fc9b 	bl	80005f8 <__aeabi_dmul>
 8009cc2:	a353      	add	r3, pc, #332	; (adr r3, 8009e10 <__ieee754_pow+0x3d0>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	4606      	mov	r6, r0
 8009cca:	460f      	mov	r7, r1
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fc92 	bl	80005f8 <__aeabi_dmul>
 8009cd4:	4b57      	ldr	r3, [pc, #348]	; (8009e34 <__ieee754_pow+0x3f4>)
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	468b      	mov	fp, r1
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	a14b      	add	r1, pc, #300	; (adr r1, 8009e18 <__ieee754_pow+0x3d8>)
 8009cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cee:	f7f6 facb 	bl	8000288 <__aeabi_dsub>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	f7f6 fc7f 	bl	80005f8 <__aeabi_dmul>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	2000      	movs	r0, #0
 8009d00:	494d      	ldr	r1, [pc, #308]	; (8009e38 <__ieee754_pow+0x3f8>)
 8009d02:	f7f6 fac1 	bl	8000288 <__aeabi_dsub>
 8009d06:	4622      	mov	r2, r4
 8009d08:	4680      	mov	r8, r0
 8009d0a:	4689      	mov	r9, r1
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f6 fc6b 	bl	80005f8 <__aeabi_dmul>
 8009d22:	a33f      	add	r3, pc, #252	; (adr r3, 8009e20 <__ieee754_pow+0x3e0>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4650      	mov	r0, sl
 8009d32:	4659      	mov	r1, fp
 8009d34:	f7f6 faa8 	bl	8000288 <__aeabi_dsub>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	4689      	mov	r9, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 faa2 	bl	800028c <__adddf3>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	4604      	mov	r4, r0
 8009d50:	460d      	mov	r5, r1
 8009d52:	f7f6 fa99 	bl	8000288 <__aeabi_dsub>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fa93 	bl	8000288 <__aeabi_dsub>
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	9a06      	ldr	r2, [sp, #24]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	f040 81e7 	bne.w	800a140 <__ieee754_pow+0x700>
 8009d72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009e28 <__ieee754_pow+0x3e8>
 8009d76:	eeb0 8a47 	vmov.f32	s16, s14
 8009d7a:	eef0 8a67 	vmov.f32	s17, s15
 8009d7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d82:	2600      	movs	r6, #0
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d8c:	f7f6 fa7c 	bl	8000288 <__aeabi_dsub>
 8009d90:	4622      	mov	r2, r4
 8009d92:	462b      	mov	r3, r5
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	4650      	mov	r0, sl
 8009da2:	4659      	mov	r1, fp
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 fa6c 	bl	800028c <__adddf3>
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	4680      	mov	r8, r0
 8009dba:	4689      	mov	r9, r1
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	460d      	mov	r5, r1
 8009dca:	4602      	mov	r2, r0
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7f6 fa5c 	bl	800028c <__adddf3>
 8009dd4:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <__ieee754_pow+0x3fc>)
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	ec45 4b19 	vmov	d9, r4, r5
 8009ddc:	4606      	mov	r6, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	468b      	mov	fp, r1
 8009de2:	f340 82f1 	ble.w	800a3c8 <__ieee754_pow+0x988>
 8009de6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009dea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009dee:	4303      	orrs	r3, r0
 8009df0:	f000 81e4 	beq.w	800a1bc <__ieee754_pow+0x77c>
 8009df4:	ec51 0b18 	vmov	r0, r1, d8
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f7f6 fe6e 	bl	8000adc <__aeabi_dcmplt>
 8009e00:	3800      	subs	r0, #0
 8009e02:	bf18      	it	ne
 8009e04:	2001      	movne	r0, #1
 8009e06:	e72b      	b.n	8009c60 <__ieee754_pow+0x220>
 8009e08:	60000000 	.word	0x60000000
 8009e0c:	3ff71547 	.word	0x3ff71547
 8009e10:	f85ddf44 	.word	0xf85ddf44
 8009e14:	3e54ae0b 	.word	0x3e54ae0b
 8009e18:	55555555 	.word	0x55555555
 8009e1c:	3fd55555 	.word	0x3fd55555
 8009e20:	652b82fe 	.word	0x652b82fe
 8009e24:	3ff71547 	.word	0x3ff71547
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	bff00000 	.word	0xbff00000
 8009e30:	3ff00000 	.word	0x3ff00000
 8009e34:	3fd00000 	.word	0x3fd00000
 8009e38:	3fe00000 	.word	0x3fe00000
 8009e3c:	408fffff 	.word	0x408fffff
 8009e40:	4bd5      	ldr	r3, [pc, #852]	; (800a198 <__ieee754_pow+0x758>)
 8009e42:	402b      	ands	r3, r5
 8009e44:	2200      	movs	r2, #0
 8009e46:	b92b      	cbnz	r3, 8009e54 <__ieee754_pow+0x414>
 8009e48:	4bd4      	ldr	r3, [pc, #848]	; (800a19c <__ieee754_pow+0x75c>)
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e52:	460c      	mov	r4, r1
 8009e54:	1523      	asrs	r3, r4, #20
 8009e56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e5a:	4413      	add	r3, r2
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	4bd0      	ldr	r3, [pc, #832]	; (800a1a0 <__ieee754_pow+0x760>)
 8009e60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e6e:	dd08      	ble.n	8009e82 <__ieee754_pow+0x442>
 8009e70:	4bcc      	ldr	r3, [pc, #816]	; (800a1a4 <__ieee754_pow+0x764>)
 8009e72:	429c      	cmp	r4, r3
 8009e74:	f340 8162 	ble.w	800a13c <__ieee754_pow+0x6fc>
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009e82:	2400      	movs	r4, #0
 8009e84:	00e3      	lsls	r3, r4, #3
 8009e86:	9307      	str	r3, [sp, #28]
 8009e88:	4bc7      	ldr	r3, [pc, #796]	; (800a1a8 <__ieee754_pow+0x768>)
 8009e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e8e:	ed93 7b00 	vldr	d7, [r3]
 8009e92:	4629      	mov	r1, r5
 8009e94:	ec53 2b17 	vmov	r2, r3, d7
 8009e98:	eeb0 9a47 	vmov.f32	s18, s14
 8009e9c:	eef0 9a67 	vmov.f32	s19, s15
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	f7f6 f9f1 	bl	8000288 <__aeabi_dsub>
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	460f      	mov	r7, r1
 8009eac:	462b      	mov	r3, r5
 8009eae:	ec51 0b19 	vmov	r0, r1, d9
 8009eb2:	f7f6 f9eb 	bl	800028c <__adddf3>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	2000      	movs	r0, #0
 8009ebc:	49bb      	ldr	r1, [pc, #748]	; (800a1ac <__ieee754_pow+0x76c>)
 8009ebe:	f7f6 fcc5 	bl	800084c <__aeabi_ddiv>
 8009ec2:	ec41 0b1a 	vmov	d10, r0, r1
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4630      	mov	r0, r6
 8009ecc:	4639      	mov	r1, r7
 8009ece:	f7f6 fb93 	bl	80005f8 <__aeabi_dmul>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ede:	46ab      	mov	fp, r5
 8009ee0:	106d      	asrs	r5, r5, #1
 8009ee2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009ee6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009eea:	ec41 0b18 	vmov	d8, r0, r1
 8009eee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	4614      	mov	r4, r2
 8009efa:	461d      	mov	r5, r3
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4630      	mov	r0, r6
 8009f06:	4639      	mov	r1, r7
 8009f08:	f7f6 f9be 	bl	8000288 <__aeabi_dsub>
 8009f0c:	ec53 2b19 	vmov	r2, r3, d9
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	4620      	mov	r0, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	f7f6 fb64 	bl	80005f8 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4630      	mov	r0, r6
 8009f36:	4639      	mov	r1, r7
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	ec53 2b1a 	vmov	r2, r3, d10
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	ec53 2b18 	vmov	r2, r3, d8
 8009f48:	ec41 0b19 	vmov	d9, r0, r1
 8009f4c:	ec51 0b18 	vmov	r0, r1, d8
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	a37c      	add	r3, pc, #496	; (adr r3, 800a148 <__ieee754_pow+0x708>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	a37b      	add	r3, pc, #492	; (adr r3, 800a150 <__ieee754_pow+0x710>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f990 	bl	800028c <__adddf3>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f7f6 fb42 	bl	80005f8 <__aeabi_dmul>
 8009f74:	a378      	add	r3, pc, #480	; (adr r3, 800a158 <__ieee754_pow+0x718>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f987 	bl	800028c <__adddf3>
 8009f7e:	4622      	mov	r2, r4
 8009f80:	462b      	mov	r3, r5
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	a376      	add	r3, pc, #472	; (adr r3, 800a160 <__ieee754_pow+0x720>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	f7f6 fb30 	bl	80005f8 <__aeabi_dmul>
 8009f98:	a373      	add	r3, pc, #460	; (adr r3, 800a168 <__ieee754_pow+0x728>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f975 	bl	800028c <__adddf3>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	f7f6 fb27 	bl	80005f8 <__aeabi_dmul>
 8009faa:	a371      	add	r3, pc, #452	; (adr r3, 800a170 <__ieee754_pow+0x730>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f96c 	bl	800028c <__adddf3>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	462b      	mov	r3, r5
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4630      	mov	r0, r6
 8009fca:	4639      	mov	r1, r7
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	460d      	mov	r5, r1
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	ec51 0b18 	vmov	r0, r1, d8
 8009fdc:	f7f6 f956 	bl	800028c <__adddf3>
 8009fe0:	ec53 2b19 	vmov	r2, r3, d9
 8009fe4:	f7f6 fb08 	bl	80005f8 <__aeabi_dmul>
 8009fe8:	4622      	mov	r2, r4
 8009fea:	462b      	mov	r3, r5
 8009fec:	f7f6 f94e 	bl	800028c <__adddf3>
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	4682      	mov	sl, r0
 8009ff4:	468b      	mov	fp, r1
 8009ff6:	464b      	mov	r3, r9
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	4b6b      	ldr	r3, [pc, #428]	; (800a1b0 <__ieee754_pow+0x770>)
 800a002:	2200      	movs	r2, #0
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	f7f6 f940 	bl	800028c <__adddf3>
 800a00c:	4652      	mov	r2, sl
 800a00e:	465b      	mov	r3, fp
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	2000      	movs	r0, #0
 800a016:	4604      	mov	r4, r0
 800a018:	460d      	mov	r5, r1
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fae9 	bl	80005f8 <__aeabi_dmul>
 800a026:	4b62      	ldr	r3, [pc, #392]	; (800a1b0 <__ieee754_pow+0x770>)
 800a028:	4680      	mov	r8, r0
 800a02a:	4689      	mov	r9, r1
 800a02c:	2200      	movs	r2, #0
 800a02e:	4620      	mov	r0, r4
 800a030:	4629      	mov	r1, r5
 800a032:	f7f6 f929 	bl	8000288 <__aeabi_dsub>
 800a036:	4632      	mov	r2, r6
 800a038:	463b      	mov	r3, r7
 800a03a:	f7f6 f925 	bl	8000288 <__aeabi_dsub>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	f7f6 f91f 	bl	8000288 <__aeabi_dsub>
 800a04a:	ec53 2b18 	vmov	r2, r3, d8
 800a04e:	f7f6 fad3 	bl	80005f8 <__aeabi_dmul>
 800a052:	4622      	mov	r2, r4
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	462b      	mov	r3, r5
 800a05a:	ec51 0b19 	vmov	r0, r1, d9
 800a05e:	f7f6 facb 	bl	80005f8 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 f90f 	bl	800028c <__adddf3>
 800a06e:	4606      	mov	r6, r0
 800a070:	460f      	mov	r7, r1
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4640      	mov	r0, r8
 800a078:	4649      	mov	r1, r9
 800a07a:	f7f6 f907 	bl	800028c <__adddf3>
 800a07e:	a33e      	add	r3, pc, #248	; (adr r3, 800a178 <__ieee754_pow+0x738>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	2000      	movs	r0, #0
 800a086:	4604      	mov	r4, r0
 800a088:	460d      	mov	r5, r1
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	4642      	mov	r2, r8
 800a090:	ec41 0b18 	vmov	d8, r0, r1
 800a094:	464b      	mov	r3, r9
 800a096:	4620      	mov	r0, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	f7f6 f8f5 	bl	8000288 <__aeabi_dsub>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	f7f6 f8ef 	bl	8000288 <__aeabi_dsub>
 800a0aa:	a335      	add	r3, pc, #212	; (adr r3, 800a180 <__ieee754_pow+0x740>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 faa2 	bl	80005f8 <__aeabi_dmul>
 800a0b4:	a334      	add	r3, pc, #208	; (adr r3, 800a188 <__ieee754_pow+0x748>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460f      	mov	r7, r1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 fa99 	bl	80005f8 <__aeabi_dmul>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 f8dd 	bl	800028c <__adddf3>
 800a0d2:	9a07      	ldr	r2, [sp, #28]
 800a0d4:	4b37      	ldr	r3, [pc, #220]	; (800a1b4 <__ieee754_pow+0x774>)
 800a0d6:	4413      	add	r3, r2
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f8d6 	bl	800028c <__adddf3>
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	9805      	ldr	r0, [sp, #20]
 800a0e4:	468b      	mov	fp, r1
 800a0e6:	f7f6 fa1d 	bl	8000524 <__aeabi_i2d>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	4b32      	ldr	r3, [pc, #200]	; (800a1b8 <__ieee754_pow+0x778>)
 800a0ee:	4413      	add	r3, r2
 800a0f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	4652      	mov	r2, sl
 800a0fa:	465b      	mov	r3, fp
 800a0fc:	ec51 0b18 	vmov	r0, r1, d8
 800a100:	f7f6 f8c4 	bl	800028c <__adddf3>
 800a104:	4642      	mov	r2, r8
 800a106:	464b      	mov	r3, r9
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	f7f6 f8bc 	bl	800028c <__adddf3>
 800a114:	2000      	movs	r0, #0
 800a116:	4632      	mov	r2, r6
 800a118:	463b      	mov	r3, r7
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	f7f6 f8b3 	bl	8000288 <__aeabi_dsub>
 800a122:	4642      	mov	r2, r8
 800a124:	464b      	mov	r3, r9
 800a126:	f7f6 f8af 	bl	8000288 <__aeabi_dsub>
 800a12a:	ec53 2b18 	vmov	r2, r3, d8
 800a12e:	f7f6 f8ab 	bl	8000288 <__aeabi_dsub>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4650      	mov	r0, sl
 800a138:	4659      	mov	r1, fp
 800a13a:	e610      	b.n	8009d5e <__ieee754_pow+0x31e>
 800a13c:	2401      	movs	r4, #1
 800a13e:	e6a1      	b.n	8009e84 <__ieee754_pow+0x444>
 800a140:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a190 <__ieee754_pow+0x750>
 800a144:	e617      	b.n	8009d76 <__ieee754_pow+0x336>
 800a146:	bf00      	nop
 800a148:	4a454eef 	.word	0x4a454eef
 800a14c:	3fca7e28 	.word	0x3fca7e28
 800a150:	93c9db65 	.word	0x93c9db65
 800a154:	3fcd864a 	.word	0x3fcd864a
 800a158:	a91d4101 	.word	0xa91d4101
 800a15c:	3fd17460 	.word	0x3fd17460
 800a160:	518f264d 	.word	0x518f264d
 800a164:	3fd55555 	.word	0x3fd55555
 800a168:	db6fabff 	.word	0xdb6fabff
 800a16c:	3fdb6db6 	.word	0x3fdb6db6
 800a170:	33333303 	.word	0x33333303
 800a174:	3fe33333 	.word	0x3fe33333
 800a178:	e0000000 	.word	0xe0000000
 800a17c:	3feec709 	.word	0x3feec709
 800a180:	dc3a03fd 	.word	0xdc3a03fd
 800a184:	3feec709 	.word	0x3feec709
 800a188:	145b01f5 	.word	0x145b01f5
 800a18c:	be3e2fe0 	.word	0xbe3e2fe0
 800a190:	00000000 	.word	0x00000000
 800a194:	3ff00000 	.word	0x3ff00000
 800a198:	7ff00000 	.word	0x7ff00000
 800a19c:	43400000 	.word	0x43400000
 800a1a0:	0003988e 	.word	0x0003988e
 800a1a4:	000bb679 	.word	0x000bb679
 800a1a8:	0800b9a0 	.word	0x0800b9a0
 800a1ac:	3ff00000 	.word	0x3ff00000
 800a1b0:	40080000 	.word	0x40080000
 800a1b4:	0800b9c0 	.word	0x0800b9c0
 800a1b8:	0800b9b0 	.word	0x0800b9b0
 800a1bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800a494 <__ieee754_pow+0xa54>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 f861 	bl	800028c <__adddf3>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	ec41 0b1a 	vmov	d10, r0, r1
 800a1d0:	462b      	mov	r3, r5
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	ec51 0b1a 	vmov	r0, r1, d10
 800a1e2:	f7f6 fc99 	bl	8000b18 <__aeabi_dcmpgt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f47f ae04 	bne.w	8009df4 <__ieee754_pow+0x3b4>
 800a1ec:	4aa4      	ldr	r2, [pc, #656]	; (800a480 <__ieee754_pow+0xa40>)
 800a1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	f340 8108 	ble.w	800a408 <__ieee754_pow+0x9c8>
 800a1f8:	151b      	asrs	r3, r3, #20
 800a1fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a1fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a202:	fa4a f303 	asr.w	r3, sl, r3
 800a206:	445b      	add	r3, fp
 800a208:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a20c:	4e9d      	ldr	r6, [pc, #628]	; (800a484 <__ieee754_pow+0xa44>)
 800a20e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a212:	4116      	asrs	r6, r2
 800a214:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a218:	2000      	movs	r0, #0
 800a21a:	ea23 0106 	bic.w	r1, r3, r6
 800a21e:	f1c2 0214 	rsb	r2, r2, #20
 800a222:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a226:	fa4a fa02 	asr.w	sl, sl, r2
 800a22a:	f1bb 0f00 	cmp.w	fp, #0
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4620      	mov	r0, r4
 800a234:	4629      	mov	r1, r5
 800a236:	bfb8      	it	lt
 800a238:	f1ca 0a00 	rsblt	sl, sl, #0
 800a23c:	f7f6 f824 	bl	8000288 <__aeabi_dsub>
 800a240:	ec41 0b19 	vmov	d9, r0, r1
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	ec51 0b19 	vmov	r0, r1, d9
 800a24c:	f7f6 f81e 	bl	800028c <__adddf3>
 800a250:	a37b      	add	r3, pc, #492	; (adr r3, 800a440 <__ieee754_pow+0xa00>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	2000      	movs	r0, #0
 800a258:	4604      	mov	r4, r0
 800a25a:	460d      	mov	r5, r1
 800a25c:	f7f6 f9cc 	bl	80005f8 <__aeabi_dmul>
 800a260:	ec53 2b19 	vmov	r2, r3, d9
 800a264:	4606      	mov	r6, r0
 800a266:	460f      	mov	r7, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f6 f80c 	bl	8000288 <__aeabi_dsub>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f806 	bl	8000288 <__aeabi_dsub>
 800a27c:	a372      	add	r3, pc, #456	; (adr r3, 800a448 <__ieee754_pow+0xa08>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f7f6 f9b9 	bl	80005f8 <__aeabi_dmul>
 800a286:	a372      	add	r3, pc, #456	; (adr r3, 800a450 <__ieee754_pow+0xa10>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	4680      	mov	r8, r0
 800a28e:	4689      	mov	r9, r1
 800a290:	4620      	mov	r0, r4
 800a292:	4629      	mov	r1, r5
 800a294:	f7f6 f9b0 	bl	80005f8 <__aeabi_dmul>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4640      	mov	r0, r8
 800a29e:	4649      	mov	r1, r9
 800a2a0:	f7f5 fff4 	bl	800028c <__adddf3>
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f5 ffec 	bl	800028c <__adddf3>
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4689      	mov	r9, r1
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f5 ffde 	bl	8000288 <__aeabi_dsub>
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 f98e 	bl	80005f8 <__aeabi_dmul>
 800a2dc:	a35e      	add	r3, pc, #376	; (adr r3, 800a458 <__ieee754_pow+0xa18>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	f7f6 f987 	bl	80005f8 <__aeabi_dmul>
 800a2ea:	a35d      	add	r3, pc, #372	; (adr r3, 800a460 <__ieee754_pow+0xa20>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ffca 	bl	8000288 <__aeabi_dsub>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	a35a      	add	r3, pc, #360	; (adr r3, 800a468 <__ieee754_pow+0xa28>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ffc3 	bl	800028c <__adddf3>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	a358      	add	r3, pc, #352	; (adr r3, 800a470 <__ieee754_pow+0xa30>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffb8 	bl	8000288 <__aeabi_dsub>
 800a318:	4622      	mov	r2, r4
 800a31a:	462b      	mov	r3, r5
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	a355      	add	r3, pc, #340	; (adr r3, 800a478 <__ieee754_pow+0xa38>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ffb1 	bl	800028c <__adddf3>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f6 f963 	bl	80005f8 <__aeabi_dmul>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f5 ffa5 	bl	8000288 <__aeabi_dsub>
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	2200      	movs	r2, #0
 800a350:	ec41 0b19 	vmov	d9, r0, r1
 800a354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f5 ff94 	bl	8000288 <__aeabi_dsub>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	ec51 0b19 	vmov	r0, r1, d9
 800a368:	f7f6 fa70 	bl	800084c <__aeabi_ddiv>
 800a36c:	4632      	mov	r2, r6
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
 800a372:	463b      	mov	r3, r7
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	f7f5 ff84 	bl	800028c <__adddf3>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f5 ff7c 	bl	8000288 <__aeabi_dsub>
 800a390:	4642      	mov	r2, r8
 800a392:	464b      	mov	r3, r9
 800a394:	f7f5 ff78 	bl	8000288 <__aeabi_dsub>
 800a398:	460b      	mov	r3, r1
 800a39a:	4602      	mov	r2, r0
 800a39c:	493a      	ldr	r1, [pc, #232]	; (800a488 <__ieee754_pow+0xa48>)
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f7f5 ff72 	bl	8000288 <__aeabi_dsub>
 800a3a4:	ec41 0b10 	vmov	d0, r0, r1
 800a3a8:	ee10 3a90 	vmov	r3, s1
 800a3ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a3b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3b4:	da2b      	bge.n	800a40e <__ieee754_pow+0x9ce>
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	f000 f966 	bl	800a688 <scalbn>
 800a3bc:	ec51 0b10 	vmov	r0, r1, d0
 800a3c0:	ec53 2b18 	vmov	r2, r3, d8
 800a3c4:	f7ff bbed 	b.w	8009ba2 <__ieee754_pow+0x162>
 800a3c8:	4b30      	ldr	r3, [pc, #192]	; (800a48c <__ieee754_pow+0xa4c>)
 800a3ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	f77f af0c 	ble.w	800a1ec <__ieee754_pow+0x7ac>
 800a3d4:	4b2e      	ldr	r3, [pc, #184]	; (800a490 <__ieee754_pow+0xa50>)
 800a3d6:	440b      	add	r3, r1
 800a3d8:	4303      	orrs	r3, r0
 800a3da:	d009      	beq.n	800a3f0 <__ieee754_pow+0x9b0>
 800a3dc:	ec51 0b18 	vmov	r0, r1, d8
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb7a 	bl	8000adc <__aeabi_dcmplt>
 800a3e8:	3800      	subs	r0, #0
 800a3ea:	bf18      	it	ne
 800a3ec:	2001      	movne	r0, #1
 800a3ee:	e447      	b.n	8009c80 <__ieee754_pow+0x240>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f5 ff48 	bl	8000288 <__aeabi_dsub>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	f7f6 fb82 	bl	8000b04 <__aeabi_dcmpge>
 800a400:	2800      	cmp	r0, #0
 800a402:	f43f aef3 	beq.w	800a1ec <__ieee754_pow+0x7ac>
 800a406:	e7e9      	b.n	800a3dc <__ieee754_pow+0x99c>
 800a408:	f04f 0a00 	mov.w	sl, #0
 800a40c:	e71a      	b.n	800a244 <__ieee754_pow+0x804>
 800a40e:	ec51 0b10 	vmov	r0, r1, d0
 800a412:	4619      	mov	r1, r3
 800a414:	e7d4      	b.n	800a3c0 <__ieee754_pow+0x980>
 800a416:	491c      	ldr	r1, [pc, #112]	; (800a488 <__ieee754_pow+0xa48>)
 800a418:	2000      	movs	r0, #0
 800a41a:	f7ff bb30 	b.w	8009a7e <__ieee754_pow+0x3e>
 800a41e:	2000      	movs	r0, #0
 800a420:	2100      	movs	r1, #0
 800a422:	f7ff bb2c 	b.w	8009a7e <__ieee754_pow+0x3e>
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	f7ff bb28 	b.w	8009a7e <__ieee754_pow+0x3e>
 800a42e:	9204      	str	r2, [sp, #16]
 800a430:	f7ff bb7a 	b.w	8009b28 <__ieee754_pow+0xe8>
 800a434:	2300      	movs	r3, #0
 800a436:	f7ff bb64 	b.w	8009b02 <__ieee754_pow+0xc2>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	00000000 	.word	0x00000000
 800a444:	3fe62e43 	.word	0x3fe62e43
 800a448:	fefa39ef 	.word	0xfefa39ef
 800a44c:	3fe62e42 	.word	0x3fe62e42
 800a450:	0ca86c39 	.word	0x0ca86c39
 800a454:	be205c61 	.word	0xbe205c61
 800a458:	72bea4d0 	.word	0x72bea4d0
 800a45c:	3e663769 	.word	0x3e663769
 800a460:	c5d26bf1 	.word	0xc5d26bf1
 800a464:	3ebbbd41 	.word	0x3ebbbd41
 800a468:	af25de2c 	.word	0xaf25de2c
 800a46c:	3f11566a 	.word	0x3f11566a
 800a470:	16bebd93 	.word	0x16bebd93
 800a474:	3f66c16c 	.word	0x3f66c16c
 800a478:	5555553e 	.word	0x5555553e
 800a47c:	3fc55555 	.word	0x3fc55555
 800a480:	3fe00000 	.word	0x3fe00000
 800a484:	000fffff 	.word	0x000fffff
 800a488:	3ff00000 	.word	0x3ff00000
 800a48c:	4090cbff 	.word	0x4090cbff
 800a490:	3f6f3400 	.word	0x3f6f3400
 800a494:	652b82fe 	.word	0x652b82fe
 800a498:	3c971547 	.word	0x3c971547

0800a49c <__ieee754_sqrt>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	ec55 4b10 	vmov	r4, r5, d0
 800a4a4:	4e55      	ldr	r6, [pc, #340]	; (800a5fc <__ieee754_sqrt+0x160>)
 800a4a6:	43ae      	bics	r6, r5
 800a4a8:	ee10 0a10 	vmov	r0, s0
 800a4ac:	ee10 3a10 	vmov	r3, s0
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	d110      	bne.n	800a4d8 <__ieee754_sqrt+0x3c>
 800a4b6:	ee10 2a10 	vmov	r2, s0
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	f7f6 f89c 	bl	80005f8 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	ec45 4b10 	vmov	d0, r4, r5
 800a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	dc10      	bgt.n	800a4fe <__ieee754_sqrt+0x62>
 800a4dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4e0:	4330      	orrs	r0, r6
 800a4e2:	d0f5      	beq.n	800a4d0 <__ieee754_sqrt+0x34>
 800a4e4:	b15d      	cbz	r5, 800a4fe <__ieee754_sqrt+0x62>
 800a4e6:	ee10 2a10 	vmov	r2, s0
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	ee10 0a10 	vmov	r0, s0
 800a4f0:	f7f5 feca 	bl	8000288 <__aeabi_dsub>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	f7f6 f9a8 	bl	800084c <__aeabi_ddiv>
 800a4fc:	e7e6      	b.n	800a4cc <__ieee754_sqrt+0x30>
 800a4fe:	1512      	asrs	r2, r2, #20
 800a500:	d074      	beq.n	800a5ec <__ieee754_sqrt+0x150>
 800a502:	07d4      	lsls	r4, r2, #31
 800a504:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a508:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a50c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a510:	bf5e      	ittt	pl
 800a512:	0fda      	lsrpl	r2, r3, #31
 800a514:	005b      	lslpl	r3, r3, #1
 800a516:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a51a:	2400      	movs	r4, #0
 800a51c:	0fda      	lsrs	r2, r3, #31
 800a51e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a522:	107f      	asrs	r7, r7, #1
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	2516      	movs	r5, #22
 800a528:	4620      	mov	r0, r4
 800a52a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a52e:	1886      	adds	r6, r0, r2
 800a530:	428e      	cmp	r6, r1
 800a532:	bfde      	ittt	le
 800a534:	1b89      	suble	r1, r1, r6
 800a536:	18b0      	addle	r0, r6, r2
 800a538:	18a4      	addle	r4, r4, r2
 800a53a:	0049      	lsls	r1, r1, #1
 800a53c:	3d01      	subs	r5, #1
 800a53e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a542:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a546:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a54a:	d1f0      	bne.n	800a52e <__ieee754_sqrt+0x92>
 800a54c:	462a      	mov	r2, r5
 800a54e:	f04f 0e20 	mov.w	lr, #32
 800a552:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a556:	4281      	cmp	r1, r0
 800a558:	eb06 0c05 	add.w	ip, r6, r5
 800a55c:	dc02      	bgt.n	800a564 <__ieee754_sqrt+0xc8>
 800a55e:	d113      	bne.n	800a588 <__ieee754_sqrt+0xec>
 800a560:	459c      	cmp	ip, r3
 800a562:	d811      	bhi.n	800a588 <__ieee754_sqrt+0xec>
 800a564:	f1bc 0f00 	cmp.w	ip, #0
 800a568:	eb0c 0506 	add.w	r5, ip, r6
 800a56c:	da43      	bge.n	800a5f6 <__ieee754_sqrt+0x15a>
 800a56e:	2d00      	cmp	r5, #0
 800a570:	db41      	blt.n	800a5f6 <__ieee754_sqrt+0x15a>
 800a572:	f100 0801 	add.w	r8, r0, #1
 800a576:	1a09      	subs	r1, r1, r0
 800a578:	459c      	cmp	ip, r3
 800a57a:	bf88      	it	hi
 800a57c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a580:	eba3 030c 	sub.w	r3, r3, ip
 800a584:	4432      	add	r2, r6
 800a586:	4640      	mov	r0, r8
 800a588:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a58c:	f1be 0e01 	subs.w	lr, lr, #1
 800a590:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a594:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a598:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a59c:	d1db      	bne.n	800a556 <__ieee754_sqrt+0xba>
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	d006      	beq.n	800a5b0 <__ieee754_sqrt+0x114>
 800a5a2:	1c50      	adds	r0, r2, #1
 800a5a4:	bf13      	iteet	ne
 800a5a6:	3201      	addne	r2, #1
 800a5a8:	3401      	addeq	r4, #1
 800a5aa:	4672      	moveq	r2, lr
 800a5ac:	f022 0201 	bicne.w	r2, r2, #1
 800a5b0:	1063      	asrs	r3, r4, #1
 800a5b2:	0852      	lsrs	r2, r2, #1
 800a5b4:	07e1      	lsls	r1, r4, #31
 800a5b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a5ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a5be:	bf48      	it	mi
 800a5c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a5c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	e781      	b.n	800a4d0 <__ieee754_sqrt+0x34>
 800a5cc:	0ad9      	lsrs	r1, r3, #11
 800a5ce:	3815      	subs	r0, #21
 800a5d0:	055b      	lsls	r3, r3, #21
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	d0fa      	beq.n	800a5cc <__ieee754_sqrt+0x130>
 800a5d6:	02cd      	lsls	r5, r1, #11
 800a5d8:	d50a      	bpl.n	800a5f0 <__ieee754_sqrt+0x154>
 800a5da:	f1c2 0420 	rsb	r4, r2, #32
 800a5de:	fa23 f404 	lsr.w	r4, r3, r4
 800a5e2:	1e55      	subs	r5, r2, #1
 800a5e4:	4093      	lsls	r3, r2
 800a5e6:	4321      	orrs	r1, r4
 800a5e8:	1b42      	subs	r2, r0, r5
 800a5ea:	e78a      	b.n	800a502 <__ieee754_sqrt+0x66>
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	e7f0      	b.n	800a5d2 <__ieee754_sqrt+0x136>
 800a5f0:	0049      	lsls	r1, r1, #1
 800a5f2:	3201      	adds	r2, #1
 800a5f4:	e7ef      	b.n	800a5d6 <__ieee754_sqrt+0x13a>
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	e7bd      	b.n	800a576 <__ieee754_sqrt+0xda>
 800a5fa:	bf00      	nop
 800a5fc:	7ff00000 	.word	0x7ff00000

0800a600 <with_errno>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	460d      	mov	r5, r1
 800a606:	4616      	mov	r6, r2
 800a608:	f7fc fa96 	bl	8006b38 <__errno>
 800a60c:	4629      	mov	r1, r5
 800a60e:	6006      	str	r6, [r0, #0]
 800a610:	4620      	mov	r0, r4
 800a612:	bd70      	pop	{r4, r5, r6, pc}

0800a614 <xflow>:
 800a614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a616:	4614      	mov	r4, r2
 800a618:	461d      	mov	r5, r3
 800a61a:	b108      	cbz	r0, 800a620 <xflow+0xc>
 800a61c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a620:	e9cd 2300 	strd	r2, r3, [sp]
 800a624:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f5 ffe4 	bl	80005f8 <__aeabi_dmul>
 800a630:	2222      	movs	r2, #34	; 0x22
 800a632:	b003      	add	sp, #12
 800a634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a638:	f7ff bfe2 	b.w	800a600 <with_errno>

0800a63c <__math_uflow>:
 800a63c:	b508      	push	{r3, lr}
 800a63e:	2200      	movs	r2, #0
 800a640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a644:	f7ff ffe6 	bl	800a614 <xflow>
 800a648:	ec41 0b10 	vmov	d0, r0, r1
 800a64c:	bd08      	pop	{r3, pc}

0800a64e <__math_oflow>:
 800a64e:	b508      	push	{r3, lr}
 800a650:	2200      	movs	r2, #0
 800a652:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a656:	f7ff ffdd 	bl	800a614 <xflow>
 800a65a:	ec41 0b10 	vmov	d0, r0, r1
 800a65e:	bd08      	pop	{r3, pc}

0800a660 <fabs>:
 800a660:	ec51 0b10 	vmov	r0, r1, d0
 800a664:	ee10 2a10 	vmov	r2, s0
 800a668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a66c:	ec43 2b10 	vmov	d0, r2, r3
 800a670:	4770      	bx	lr

0800a672 <finite>:
 800a672:	b082      	sub	sp, #8
 800a674:	ed8d 0b00 	vstr	d0, [sp]
 800a678:	9801      	ldr	r0, [sp, #4]
 800a67a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a67e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a682:	0fc0      	lsrs	r0, r0, #31
 800a684:	b002      	add	sp, #8
 800a686:	4770      	bx	lr

0800a688 <scalbn>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	ec55 4b10 	vmov	r4, r5, d0
 800a68e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a692:	4606      	mov	r6, r0
 800a694:	462b      	mov	r3, r5
 800a696:	b99a      	cbnz	r2, 800a6c0 <scalbn+0x38>
 800a698:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a69c:	4323      	orrs	r3, r4
 800a69e:	d036      	beq.n	800a70e <scalbn+0x86>
 800a6a0:	4b39      	ldr	r3, [pc, #228]	; (800a788 <scalbn+0x100>)
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	ee10 0a10 	vmov	r0, s0
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f7f5 ffa5 	bl	80005f8 <__aeabi_dmul>
 800a6ae:	4b37      	ldr	r3, [pc, #220]	; (800a78c <scalbn+0x104>)
 800a6b0:	429e      	cmp	r6, r3
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	da10      	bge.n	800a6da <scalbn+0x52>
 800a6b8:	a32b      	add	r3, pc, #172	; (adr r3, 800a768 <scalbn+0xe0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	e03a      	b.n	800a736 <scalbn+0xae>
 800a6c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a6c4:	428a      	cmp	r2, r1
 800a6c6:	d10c      	bne.n	800a6e2 <scalbn+0x5a>
 800a6c8:	ee10 2a10 	vmov	r2, s0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fddc 	bl	800028c <__adddf3>
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	e019      	b.n	800a70e <scalbn+0x86>
 800a6da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a6de:	460b      	mov	r3, r1
 800a6e0:	3a36      	subs	r2, #54	; 0x36
 800a6e2:	4432      	add	r2, r6
 800a6e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a6e8:	428a      	cmp	r2, r1
 800a6ea:	dd08      	ble.n	800a6fe <scalbn+0x76>
 800a6ec:	2d00      	cmp	r5, #0
 800a6ee:	a120      	add	r1, pc, #128	; (adr r1, 800a770 <scalbn+0xe8>)
 800a6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f4:	da1c      	bge.n	800a730 <scalbn+0xa8>
 800a6f6:	a120      	add	r1, pc, #128	; (adr r1, 800a778 <scalbn+0xf0>)
 800a6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fc:	e018      	b.n	800a730 <scalbn+0xa8>
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	dd08      	ble.n	800a714 <scalbn+0x8c>
 800a702:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a706:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a70a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a70e:	ec45 4b10 	vmov	d0, r4, r5
 800a712:	bd70      	pop	{r4, r5, r6, pc}
 800a714:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a718:	da19      	bge.n	800a74e <scalbn+0xc6>
 800a71a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a71e:	429e      	cmp	r6, r3
 800a720:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a724:	dd0a      	ble.n	800a73c <scalbn+0xb4>
 800a726:	a112      	add	r1, pc, #72	; (adr r1, 800a770 <scalbn+0xe8>)
 800a728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1e2      	bne.n	800a6f6 <scalbn+0x6e>
 800a730:	a30f      	add	r3, pc, #60	; (adr r3, 800a770 <scalbn+0xe8>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f7f5 ff5f 	bl	80005f8 <__aeabi_dmul>
 800a73a:	e7cb      	b.n	800a6d4 <scalbn+0x4c>
 800a73c:	a10a      	add	r1, pc, #40	; (adr r1, 800a768 <scalbn+0xe0>)
 800a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0b8      	beq.n	800a6b8 <scalbn+0x30>
 800a746:	a10e      	add	r1, pc, #56	; (adr r1, 800a780 <scalbn+0xf8>)
 800a748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a74c:	e7b4      	b.n	800a6b8 <scalbn+0x30>
 800a74e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a752:	3236      	adds	r2, #54	; 0x36
 800a754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a758:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a75c:	4620      	mov	r0, r4
 800a75e:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <scalbn+0x108>)
 800a760:	2200      	movs	r2, #0
 800a762:	e7e8      	b.n	800a736 <scalbn+0xae>
 800a764:	f3af 8000 	nop.w
 800a768:	c2f8f359 	.word	0xc2f8f359
 800a76c:	01a56e1f 	.word	0x01a56e1f
 800a770:	8800759c 	.word	0x8800759c
 800a774:	7e37e43c 	.word	0x7e37e43c
 800a778:	8800759c 	.word	0x8800759c
 800a77c:	fe37e43c 	.word	0xfe37e43c
 800a780:	c2f8f359 	.word	0xc2f8f359
 800a784:	81a56e1f 	.word	0x81a56e1f
 800a788:	43500000 	.word	0x43500000
 800a78c:	ffff3cb0 	.word	0xffff3cb0
 800a790:	3c900000 	.word	0x3c900000

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
